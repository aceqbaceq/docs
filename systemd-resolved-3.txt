| systemd-resolved
| dns
| dig



что  я обнаружил по systemd-resolved :
вот я к нему обратился через dig


 $ dig -4 @127.0.0.53  +notcp   -t A  "vasya.ru."


и положим что на данный момент у компа плохая
связь с интернетом. так вот, диг он подождет
немного ответа от SR(systemd-resolved) и вернет
нам в ответ отлуп

;; communications error to 127.0.0.53#53: timed out


тоесть мы увидим

 $ dig -4 @127.0.0.53  +notcp   -t A  "vasya.ru."
;; communications error to 127.0.0.53#53: timed out


но! из того что диг у нас больше не ждет ответа
от SR это не значит что все прекратилось!
если взять tcpdump то можно увидеть что SR будет
ПРОДОЛЖАТЬ ДОЛБИТ В СЕТЬ СНОВА И СНОВА пытаясь зарезолвить запрос который мы ему задали!

также когда наш SR получает днс записи от 
вышестоящего форвардера то каждая запись имеет TTL
и наш SR каждую секунду уменьшает в своей памяти
этот TTL для каждой записи которую он получил на -1
это по идее должно значить что когда у записи 
TTL станет равен 0 то он наверное должен полезть 
в сеть чтобы обновить эту запись(но на практике не
проверял лезет ли он при этом в сеть или нет)


еще момент в новых версиях SR есть полезная
опция позволяет посмотреть какие записи у него 
лежат в кэше\памяти
единсвтенне что он не покзывает какой TTL есть
у каждой записи прям щас

$ sudo resolvectl show-cache
Scope protocol=dns ifindex=2 ifname=wlp2s0
No entries.

Scope protocol=dns
m1.ru IN A 185.175.46.230
bar.ru IN A 192.145.124.206
ftp.gwdg.de IN CNAME ftp6.gwdg.de



еще раз вернусь к ошибук у дига
 $ dig -4 @127.0.0.53  +notcp   -t A  "vasya.ru."
;; communications error to 127.0.0.53#53: timed out

на самом деле она не обязаельно значит что 
диг не имеет сосвем связи с SR , это также может
значить то что SR не успел за то время которое
диг согласен ждать ответа выдать ему ответа,
например интернет слабый скажем это поезд, и 
SR не может быстро получить ответ из интернета 
поэтому он не может быстро выдать ответ дигу 
а тот не хочет ждать вечно. поэтому диг 
выдает

;; communications error to 127.0.0.53#53: timed out


как проверить например что у дига есть связь
с SR - через 
  $ sudo resolvectl show-cache
смотрим какой нибудь запись которая есть в кеше SR
и вот ее  и запрашиваем через диг. тут уже SR
ненужно лазить в сеть. он имеет эту запись из 
памяти. поэтому если связь есть то диг длже получить
ее от SR мнвоенно
также SR он при поиске лазииит в /etc/hosts 
поэтому мы можем через у SR через диг запросить
какую нибудь запись из /etc/hosts , ответ тоже 
должен быть мнвоенным.

я проверил вот что.
я зашел на виртуалку.
она имеет ip=172.16.10.11
и на ней запускаю запрос к локальному SR
(@systemd-resolved резволится в 127.0.0.53 на
основе /etc/hosts)

$ dig +notcp -4 @systemd-resolved +notcp -t A "kuku.ru."


мой SR на этой виртуалке настроен так что форвар
дером явялется 172.16.10.1 , это SR на хосте где
запущена виртуалка

(виртуалка) $ resolvectl status
Global
  Protocols: -LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported
  resolv.conf mode: stub
Current DNS Server: 172.16.10.1
        DNS Servers 172.16.10.1
        DNS Domain ~.


так вот я смотрю tcpdump внутри виртуалки
причем внимание! я смотрю его не на карте -i lo
на которую делает запрос наш диг 
а я смотрю тцпдамп на карте -i enp0s3
тоесть я смтрю тцпдамп запроса который делает
уже SR этой вирталки на вышестоящий форвардер
(тоесть на SR хоста)

(виртуалка)# tcpdump -n -v  -i enp0s3 -p udp port 53


proto UDP 
    172.16.10.11.33835 > 172.16.10.1.53: 1876+ [1au] A? kuku.ru. (36)
proto UDP 
    172.16.10.1.53 > 172.16.10.11.33835: 1876 1/0/1 kuku.ru. A 46.137.98.206 (52)


тоесть еще раз. это не тцпдамп от нашего диг!
для этого нужно было бы ловить дамп на карте -i lo
а это уже тцпдамп от SR виртуалки на выщестоящий
форвардер!

а это я ловлю тот же самый трафик но уже 
на сетевом стеке хоста тоесть на карте br0
а трафик этот тот же самый

$ sudo tcpdump -n -v  -i br0 -p udp port 53


proto UDP
    172.16.10.11.33835 > 172.16.10.1.53: 1876+ [1au] A? kuku.ru. (36)
proto UDP 
    172.16.10.1.53 > 172.16.10.11.33835: 1876 1/0/1 kuku.ru. A 46.137.98.206 (52)



а вот еще интересный момент.
я заставил диг обратьиться к SR через TCP 
протокол. 

$ dig +notcp -4 @systemd-resolved +tcp -t A "m1.ru."

и вот сетевой дамп снятный с -i lo

# tcpdump -n -v  -i lo -p tcp port 53
    127.0.0.1.41713 > 127.0.0.53.53: Flags [S]
    127.0.0.53.53 > 127.0.0.1.41713: Flags [S.]
    127.0.0.1.41713 > 127.0.0.53.53: Flags [.]

    127.0.0.1.41713 > 127.0.0.53.53: Flags [P.],  [1au] A? m1.ru. (46)

    127.0.0.53.53 > 127.0.0.1.41713: Flags [.],

    127.0.0.53.53 > 127.0.0.1.41713: Flags [P.],  25568 1/0/1 m1.ru. A 185.175.46.230 (50)

    127.0.0.1.41713 > 127.0.0.53.53: Flags [.]

    127.0.0.1.41713 > 127.0.0.53.53: Flags [F.]

    127.0.0.53.53 > 127.0.0.1.41713: Flags [F.]

    127.0.0.1.41713 > 127.0.0.53.53: Flags [.]


так вот из дампа можно увидеть какая это 
мудота получать ответ через TCP
потому что нужно обменться огромным колиеством
пакетом для установления сеанса.
только потом у нас идет пакет с запросом.
потом летит пакет который пдтверждает о том
что серевер получил пакет с запросом.
потом толоько летит пакет с ответом.
потом наш комп шлет пакет о том что 
мы получили ответ.
а потом еще адовое колчесвтво пакетов которые
закрывают tcp конект. это ад.

а вот для сравнения сет трафик когда мы 
работаем через UDP

# dig +notcp -4 @systemd-resolved +notcp -t A "m1.ru."

# tcpdump -n -v  -i lo -p udp port 53

proto UDP
    127.0.0.1.57067 > 127.0.0.53.53: 44325+ [1au] A? m1.ru. (46)
proto UDP 
    127.0.0.53.53 > 127.0.0.1.57067: 44325 1/0/1 m1.ru. A 185.175.46.230 (50)


тоесть это несравнить как охренененно проше
и ядрам в плане нагрузки по генерации пакетов
и легче сетевому оборудованию по числу пакетов
которые нужно переслать!

тоесть через UDP у нас пакет запроса и пакет
ответа. а через TCP у нас куча пакетов инциирующих
конект. потом пакет запроса и пакет ответа и 
на кжадый такой пакет обратная сторона должна
сдать подвреждающий пакет о получении пакетов.
и потом еще куча пакетов закрыающих тцп соединеение.
это ад.


ЕЩЕ я хотел обозначить важный момент.
сам SR принимает запросы на 127.0.0.53 как по 
TCP так и по UDP
а вот как сам этот SR будет делать запрос 
на форвардер завсиит не от того как клиент
обартился к нему . нет! а от конфига SR!
на виртулаке у меня SR имеет конфиг

# cat /etc/systemd/resolved.conf.d/global.conf 
[Resolve]
DNS=172.16.10.1
#DNS=8.8.8.8
#FallbackDNS=8.8.8.8

Domains=.


DNSSEC=no
DNSOverTLS=no


MulticastDNS=no
LLMNR=no

это значит что на форвардер 172.16.10.1 она
будет делать по UDP в незавсисомсти от того 
какой протокол был использован дигом при обращении
к SR. 


это значит на хосте если у нас по дефолту 
для INPUT стоит DROP

*filter
:INPUT DROP [39:4773]

то нам будет нужно добавить вот такое правило

-A INPUT  -m udp  -p udp --dport 53 -i br0  -j ACCEPT




я подозреваю что в ряде случаев SR может 
делать к форвардеру и TCP запросы
поэтому я расширяю это правило на два протокола

-A INPUT  -m udp  -p udp --dport 53 -i br0  -j ACCEPT
-A INPUT  -m tcp  -p tcp --dport 53 -i br0  -j ACCEPT


напомню что запрос к SR можно сделать без
использоваия сетевого стека и диг
а можено сдеать через клиент resolvectl 
который обратиться к SR черещ локаьный сокет

$ resolvectl query -p dns -t A   "mail.ru."

где -p dns  означает что заказываем у SR сделать
обчный юникст днс запрос ( другие варианты это 
mdns или llmnr)
и -t A это тип записи что мы ищем

жалко что в ответе resolvectl в отличии от диг 
показывает мало информации

   mail.ru IN A 94.100.180.200  -- link: wlp2s0

тоесть например нет параметра TTL

так вот если у нас плохая связь то resolvectl
в отлиии от диг может ждать ответа от SR сколь
угодно долго. а не напишет на экране 


 $ dig -4 @127.0.0.53  +notcp   -t A  "vasya.ru."
;; communications error to 127.0.0.53#53: timed out

