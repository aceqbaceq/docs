gitlab

----
установка

для его установки надо плюс минус 5 ядер цпу E5 2680-v4
и памяти 6-7 GB иначе постоянно будет крутить файл подкачки

если делать памяти меньше то там начинаются дикие операции чтения записи
и процесс установки и без того супер долгий становится просто бесконечным

гитлаб ставится очень долго. минут 15-20 наверно.


черновой ансибл плейбук по его установке - gitlab-ansible-playbook.txt (смотри
в ансибл проектах)

когда он очень очень очень долго прекрутит и установится
то проверить статус что все установилось вот так можно

$ sudo -i gitlab-ctl status

vagrant@ubuntu-xenial:~$ sudo -i gitlab-ctl status
run: alertmanager: (pid 17248) 45s; run: log: (pid 16659) 196s
run: gitaly: (pid 17140) 48s; run: log: (pid 16106) 357s
run: gitlab-exporter: (pid 17132) 49s; run: log: (pid 16598) 212s
run: gitlab-workhorse: (pid 17098) 50s; run: log: (pid 16498) 231s
run: grafana: (pid 17267) 44s; run: log: (pid 17000) 93s
run: logrotate: (pid 16021) 370s; run: log: (pid 16033) 367s
run: nginx: (pid 16528) 227s; run: log: (pid 16539) 226s
run: node-exporter: (pid 17115) 49s; run: log: (pid 16573) 220s
run: postgres-exporter: (pid 17259) 44s; run: log: (pid 16686) 189s
run: postgresql: (pid 16231) 347s; run: log: (pid 16245) 344s
run: prometheus: (pid 17153) 48s; run: log: (pid 16639) 202s
run: puma: (pid 16438) 245s; run: log: (pid 16448) 242s
run: redis: (pid 16051) 364s; run: log: (pid 16062) 361s
run: redis-exporter: (pid 17134) 48s; run: log: (pid 16621) 206s
run: sidekiq: (pid 16455) 239s; run: log: (pid 16465) 238s
vagrant@ubuntu-xenial:~$ sudo -i netstat -tnlp

как видно должно работать если все в порядке куча куча куча компонентов.
если их меньше значит чтото незавелось.

после установки вэб морда будет доступна через 

	http://127.0.0.1:80
	

дефолтовый юзер : admin@example.com
а пароль вэб морда прредложит установить с самого начала

----



----

/etc/gitlab/gitlab.rb 

это походу главный конфигурацияонный файл у гитлаба

--

так случилось что я сразу забыл юзера и пароль 
от вэб морды


чтобы сбросить пароль от вэб морды 
надо зайти на линукс на котором крутится гитлаб 
далее повысить права до root и запустить rails console

# gitlab-rails console -e production

далее как сбросить пароль написано здесь - https://docs.gitlab.com/12.10/ee/security/reset_root_password.html

но рецепт оттуда нихуя неработает. потому что его недостаточно.
а работает вот какой рецепт в итоге

> user = User.where(id: 1).first
> user.password = 'secret_pass'
> user.password_confirmation = 'secret_pass'

(а вот та команда которой нехватало)
> user.skip_reconfirmation!

> user.save!

все, можно заходить в вэб морду под root и новым паролем


----
проекты в гитлабе имеют три степени видимости

в общем случае видимость по русски означает лишь права на чтение 
файлов проекта. но никак не права на запись.


public: виден всем , юзеры без акаунта на сервере тоже видят проект

internal: виден всем кто имеет акаунт на сервере.

private: чтобы получить доступ к проекту надо чтобы тебя включили в группу проекта

проект в гитлабе это по сути +1 новый гит репозиторий.

----

как добавить ssh ключ для юзера который щас вошел в морду гитлаб:

попали на главную страницу гитлаба - вверху справа тыкаем на  наш аватар - preferences -
потом слева в меню в форме вертикального списка ищем SSH keys - мы попали куда надо


в итоге система работы с гитом у гитлаба выглядит так : мы к проекту добавляем в группу
юзера а у юзера в его профиле прописаны ssh ключи. так что через ssh ключ (вместо пароля) 
юзер аутентифиуироется когда стучится через гит клиент на гит сервер ,
и стучится юзер в конретный гит репозиторий ( ака гитлаб проект) и гитлаб сервер
смотрит этому юзеру можно читатьь\писать в этот гит репозиторий\проект
----

почему то в книжке по гитлабу написано что для одного акаунта можно
юзать только один ssh ключ. хотя не пойму в чем проблема юзать сто ssh ключей.
и вэб морда позволяет добавить милион ssh ключей к акаунту

----

git add .

говорит о том что мы делаем staging. тоест мы сообщаем что мы хотим засунуть 
в следущий комить такие то файлы

-----

типа как зафигачить удаленный репозиторий
и чтоб было по минимуму мудоты с пушами


$ git init
$ git clone git@gitlab.example.com:vasya/project-01.git

по дефолту гит коммитит в origin тока надо его поднастроить


$ git remote add origin git@gitlab.example.com:vasya/project-01.git

$ git add .
$ git commit -m "first commit"
$ git push -u origin master

далее можно уже будет коммитить просто через 

$ git push

проверить всю эту шарманку ( то что с удаленными реопзиториями бранчами
мудрота проведена успешно) можно через

$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master

$ git remote
origin


origin это чтото вроде алиаса для удаленного чегото там

посмотреть более подробную инфу по origin можно через


$ git remote show origin
* remote origin
  Fetch URL: git@gitlab.example.com:vasya/project-01.git
  Push  URL: git@gitlab.example.com:vasya/project-01.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)


таким образом мы убеждаеся что origin =  git@gitlab.example.com:vasya/project-01.git
тоесть все подучилось
-------


