
apt  
=====

ПРЕЖДЕ ЧЕМ изучать APT надо изучить GPG потому что его исопьзует APT поэтому нам
надо разобраться как рабоатет GPG

итак

GPG
большое обьяснение


gpg

это шифрвние на основе публиный риватный ключ. таких пар может быть много.

по дефолту ключи хрантся в хранилище , по английски оно называется keyring тоесть это как бы аналог
колечка на котором висят ключи.  по дефолту этот файл находися по пути



~/.gnupg/pubring.kbx




наскольк я понимаю там хрнаться только публичные ключи. приатнвых там нет


как посмотреть ключи котоыре лежат там




$ gpg --list-keys
/home/vasya/.gnupg/pubring.kbx
------------------------------
pub   rsa4096 2017-05-08 [SCEA]
      1EDDE2CDFC025D17F6DA9EC0ADAE6AD28A8F901A
uid           [ unknown] Sublime HQ Pty Ltd <support@sublimetext.com>
sub   rsa4096 2017-05-08 [S]




при этом кмана вывдет тот факт что она взяла ключи из файла /home/vasya/.gnupg/pubring.kbx
на картинке я привел толкь один ключ из листинга.

1EDDE2CDFC025D17F6DA9EC0ADAE6AD28A8F901A = это фингерпринт от ключа.

по этому фингепринут можно искать этот ключ среди прочих

надо миниум 8 цифр от фингепринта чтобы по нему найти ключ




$ gpg --list-keys --fingerprint D88E42B4
pub   rsa2048 2013-09-16 [SC]
      4609 5ACC 8548 582C 1A26  99A9 D27D 666C D88E 42B4
uid           [ unknown] Elasticsearch (Elasticsearch Signing Key) <dev_ops@elasticsearch.org>
sub   rsa2048 2013-09-16 [E]





далее.
вместо дефолтого ключехраниища мы можем укзаать любой другой файл с ключами

это опция --keyring




$ gpg --list-keys --keyring ./deadsnakes_ubuntu_ppa.gpg --no-default-keyring
./deadsnakes_ubuntu_ppa.gpg
---------------------------
pub   rsa4096 2017-07-29 [SC]
      F23C5A6CF475977595C89F51BA6932366A755776
uid           [ unknown] Launchpad PPA for deadsnakes





доп опция --no-default-keyring нам нужна потмоу что если ее неуказать то gpg покажет ключи
из укзанного нами ключехранилища и плюс клчючи из дефолтовгого ключехранидища а нам это ненадо.
дебильное поведение у созателей gpg если чстно.


таким макаром мы можем теперь легко посмотреть все ключи котоыре харняться в любом opengpg ключехранилище
в том числе и те котоыре используются командой apt

например




$ gpg --list-keys --keyring /etc/apt/trusted.gpg --no-default-keyring
/etc/apt/trusted.gpg
--------------------
pub   rsa4096 2017-05-08 [SCEA]
      1EDDE2CDFC025D17F6DA9EC0ADAE6AD28A8F901A
uid           [ unknown] Sublime HQ Pty Ltd <support@sublimetext.com>
sub   rsa4096 2017-05-08 [S]




ради этого мы и разбиралст с gpg. потому что он исползуется командой apt



тепрь передйтем к вопрому как имея подписанны через цифрову подпись файл проверить
его достоверность целостность пдлинность

качаем файл
 2007  wget http://www.netgull.com/gcc/releases/gcc-4.8.0/gcc-4.8.0.tar.gz

качаем  подпись цифровую для этого файла
 2008  wget http://ftp.gnu.org/gnu/gcc/gcc-4.8.0/gcc-4.8.0.tar.gz.sig

качаем публичный ключ gpg
 2009  wget ftp://ftp.gnu.org/gnu/gnu-keyring.gpg



смотрим что там в публичном ключе
    $ gpg --no-default-keyring --list-keys --keyring ./gnu-keyring.gpg



проверяем пользуясь публичным ключом по цифровой подписи достверность файла
 2010  gpg --verify --keyring ./gnu-keyring.gpg ./gcc-4.8.0.tar.gz.sig
gpg: assuming signed data in './gcc-4.8.0.tar.gz'
gpg: Signature made Пт 22 мар 2013 19:32:29 +06
gpg:                using DSA key A328C3A2C3C45C06
gpg: Good signature from "Jakub Jelinek <jakub@redhat.com>" [expired]
gpg: Note: This key has expired!
Primary key fingerprint: 33C2 35A3 4C46 AA3F FB29  3709 A328 C3A2 C3C4 5C06


во первых заметим что мы указали только файл с цифровой подптсью и файл с публичным ключом
а сам файл не указали. и программа сама догадывается какое имя у проверяемого файла.

gpg: assuming signed data in './gcc-4.8.0.tar.gz'


далее вот эти две строки посмотрим
using DSA key A328C3A2C3C45C06
Primary key fingerprint: 33C2 35A3 4C46 AA3F FB29  3709 A328 C3A2 C3C4 5C06

по факту это указан один и тот же публичный ключ , его фингерпринт.


таким образом самое важное что надо понять. для поверки файла по цифровой подписи и по пбуличному ключу
надо в прогрмме указать  керинг для публичного ключа, файл цифровой подписи. и сам файл программа надйет
в тоейже папке сама


также по приколу убедиися  что публичный ключ с указагным  фингерпинтом дейтсивтельно есть в нашем кейринге.



$ gpg  --keyring ./gnu-keyring.gpg --list-keys --fingerprint A328C3A2C3C45C06
pub   dsa1024 2004-04-21 [SC] [expired: 2009-04-20]
      33C2 35A3 4C46 AA3F FB29  3709 A328 C3A2 C3C4 5C06
uid           [ expired] Jakub Jelinek <jakub@redhat.com>



вывод да действиетльно. такой публичный ключ есть в кейринге.
заметим также что ключ имеет формат DSA . и выше об этом также было написано при проверке
подписи 
gpg:                using DSA key A328C3A2C3C45C06



далее стоит сказать что публичные ключи GPG в ключеъранилище хранятся в некотоором форрмате
незнаю название но этот точно не текстовый фоомат а какойто бинарный. это важно. 
так как  далее  мы  увидим как gpg и его цфирвые подписи и публичные ключи используются в apt
репозитоиях. и в этих репозиториях публичный ключ обычно предоставлен в другом формате - в текстом виде
вот примерно вот в таком

$ head gpg
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBFit2ioBEADhWpZ8/wvZ6hUTiXOwQHXMAlaFHcPH9hAtr4F1y2+OYdbtMuth
lqqwp028AqyY+PRfVMtSYMbjuQuu5byyKR01BbqYhuS3jtqQmljZ/bJvXqnmiVXh
...
=0YYh
-----END PGP PUBLIC KEY BLOCK-----


вот если ключ в таком формате прдетсталвен то мы должны его переделать в бианрный вид чтобы 
вставит его в ключехраниище.

но прежде всего ( опять эти прежде всего) надо понять откуда нам брать gpg публиные ключи от того или
игного apt репозитория. это тоже мудациий сложный вопрос. в само простом случае он хранится прям в папке
репозитория. например  имею apt репозиторий от докера

# cat /etc/apt/sources.list.d/docker.list 
deb [arch=amd64] https://download.docker.com/linux/ubuntu/ bionic stable

публичный ключ для этого репо лежит тут https://download.docker.com/linux/ubuntu/gpg
этот ключ как раз имеет вид не бинарный а текстовый. и его нужно прееделать в бинарный 
и импортировать в кейринг. импртиовать можно в сущестующий кейринг а можно в новый. 





для начала засунем ключ в новый кейринг new.gpg
$ cat gpg | gpg --dearmor  -o /etc/apt/new.gpg



проерим как ключ выглядит в новом хранилище
# gpg --list-keys --keyring /etc/apt/new.gpg  --no-default-keyring
gpg: WARNING: unsafe ownership on homedir '/home/vasya/.gnupg'
/etc/apt/new.gpg
----------------
pub   rsa4096 2017-02-22 [SCEA]
      9DC858229FC7DD38854AE2D88D81803C0EBFCD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]




заебыаюший момент у гпг. во первых аргументы их порядок имеет значение.
во вторых опция --no-default-keyring которую нужно везде вставлять

далее тот же самый ключ у нас щас находится в дефолтовом кейринге  pubring.kbx
# gpg --list-keys --no-default-keyring  --keyring  /home/vasya/.gnupg/pubring.kbx  -fingerprint 0EBFCD88  
pub   rsa4096 2017-02-22 [SCEA]
      9DC858229FC7DD38854AE2D88D81803C0EBFCD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]


я хочу удалить этот ключ из дефолтогвого кейринга.
# gpg --delete-key --no-default-keyring  --keyring  /home/vasya/.gnupg/pubring.kbx  -fingerprint 0EBFCD88  
gpg: WARNING: unsafe ownership on homedir '/home/vasya/.gnupg'
gpg (GnuPG) 2.2.4; Copyright (C) 2017 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

pub  rsa4096/8D81803C0EBFCD88 2017-02-22 Docker Release (CE deb) <docker@docker.com>

Delete this key from the keyring? (y/N) y


проверяем остался ли ключ в ключехранидище pubring.kbx
# gpg --list-keys --no-default-keyring  --keyring  /home/vasya/.gnupg/pubring.kbx  -fingerprint 0EBFCD88  
gpg: WARNING: unsafe ownership on homedir '/home/vasya/.gnupg'
gpg: error reading key: No public key



теперь я хочу импортировать этот ключ из /etc/apt/new.gpg в другое хранилизе /etc/apt/trusted.gpg
# gpg --no-default-keyring  --keyring  /etc/apt/trusted.gpg  --import  /etc/apt/new.gpg

итаки до он туда импортиолвался
# gpg --no-default-keyring --list-keys  --keyring  /etc/apt/trusted.gpg  -fingerprint 0EBFCD88  
gpg: WARNING: unsafe ownership on homedir '/home/vasya/.gnupg'
pub   rsa4096 2017-02-22 [SCEA]
      9DC858229FC7DD38854AE2D88D81803C0EBFCD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]

теперь когда мы засунули публичый ключ GPG в нужное нам ключехранилище
то можно добавит его в наш apt репозитоия докера чтобы apt при своей работе мог опираться
на этот ключ.

итак у нас была строка репо без указания кейринга



# cat /etc/apt/sources.list.d/docker.list 
deb [arch=amd64] https://download.docker.com/linux/ubuntu/ bionic stable


а щас мы даелаем репо в котором мы укажем кейринг снужным ключом GPG

# cat /etc/apt/sources.list.d/docker.list 
deb [arch=amd64 signed-by=/etc/apt/trusted.gpg] https://download.docker.com/linux/ubuntu/ bionic stable


таким макакром что мы сделали. мы добавили пуличный ключ GPG в ключехраниище /etc/apt/trusted.gpg
от репозитория докера. и далее мы ддобавили к apt репозитторий докера и прописали в нем где
искать публичный ключ GPG от этого репозитория 


# apt-get update 
нам покажет что все сделано верно. никакой ругани небудет

скажу также что apt имеет типа свой совбстенный инструмнт работы с PGP ключами 
это комада apt-key но  прикол в том что с какогото времени эта комнда както нихерна неоработает 
и неделает то что надо. поэтмоу вместо нее прихоится мудить через команды gpg


остатеся еще один мудацкий вопрос. не все апт репозитории имеют публичный ключ  в явном виде.
например апт репозитории убунты неимеют в своем корне публичного ключа GPG. вместо этого 
его предполагается дообывать совершенно другим дебилнм путем. есть сервер keyserver.ubuntu.com
и на него любой желающий может залить свой публичный GPG ключ. а далее любой желающий зная фингерпринт
от этого ключа может его скачать. таким образом  публичный ключ от репозитория убунты надо качать 
оттуда. если мы знаем фингеприент то импортровать ключ в дефолтовый керинг  ~/.gnupg/pubring.kbx
можно вот так


# gpg   --keyserver keyserver.ubuntu.com --recv-keys  7CE8FC69BE118222


отстаетс только вопрос как узнать фингерпринт от репозитория убунты...

красивого способа я щас незнаю. знаю корявый. если мы прописали некоторый репозиторий но 
у нас на компе нет публичного GPG ключа от apt-get update нам выдас ошибку на экране и напишет
фингепринт публичного ключа который нам надо найти и закчать на комп. вот такой способ.



======================================



БОЛЬШОЕ ОСНОВАТЕЛЬНО описание про то как прописывать репозитории apt и что они значат.


придется разобраться с репозитриями ибо очень зае*ло тема мутная.


в папке /etc/apt/sources.list.d/ мы имеем  файл vasya.list
deb [arch=amd64]    http://ftp.ubuntu.com/ubuntu  bionic               main multiverse restricted universe


что значат эти загадочные параметры

deb = просто хрень
[arch=amd64] = значит что нас интеерсуют только пакеты с архитектутрой 64bit
http://ftp.ubuntu.com/ubuntu  bionic    main multiverse restricted universe = самое интересное





значит по адресу http://ftp.ubuntu.com/ubuntu
лежит вот такая структура папок


[DIR]	dists/	
[DIR]	indices/	
[файл] ls-lR.gz	
[DIR]	pool/	
[DIR]	project/	
[DIR]	ubuntu/


возникает вопрос какой URL надо вбивать в конфиге от чего оно зависит что ожидает увидеть apt
через этот URL. так вот я утверждаю что в конфиге нужно вводить такой урл чтобы и я вот тут  я щас обьясню.

возьмем вначале полную строку

http://ftp.ubuntu.com/ubuntu  bionic    main multiverse restricted universe = самое интересное

но рассмотрим толко ее часть.


http://ftp.ubuntu.com/ubuntu  bionic 

так вот эта часть строки должна быть ровно такая чтобы если ее возьмет apt то чтобы сущестовал файл
с путем

http://ftp.ubuntu.com/ubuntu/dists/bionic/InRealease


тоесть этот дебилоидный apt добавляет dists потом еще добавляет bionic и в этой папке ищет файл InRelease
вот какой смысл этой дебильной строки. это куски пути на сайте к файлу InRelease. какого хуя они явно 
неукзавыают папку dists непонятно.


итак еще раз если у нас в vasya.list есть строка:
deb [arch=amd64] https://repo.skype.com/deb stable main

то она в частности значит что apt будет искать файл InRelease в папке
https://repo.skype.com/deb/dists/stable/InRelease

тоесть если обозначить 
https://repo.skype.com/deb=A1   а stable=B1 
то путь к файлу InRelease в этом репозитории обязан быть

A1/dists/B1/InRelease

и действительно стрктуру папок если открыть https://repo.skype.com/deb/dists/stable/


[   ]	InRelease	2023-01-03 10:30	4.4K	 
[   ]	Release	2023-01-03 10:30	3.9K	 
[   ]	Release.gpg	2023-01-03 10:30	488	 
[DIR]	main/	2023-01-03 10:30	-	 



таким макаром если у нас есть в файле vasya.list строка
deb [arch=amd64]    http://ftp.ubuntu.com/ubuntu  bionic               main multiverse restricted universe

то большую часть ее смысла мы раскрыли. тоесть большая часть ее предназначена чтобы
найти и скачать файл InRelease. 

чтоже значит отставшая ся часть  main multiverse restricted universe

это так называемые компоненты. что дает указание компонента. оно дает то что до этого ммоента мы только 
скачали файл InRelease но этого мало. там нет всей инфо. пакеты в репозитории разбиты по группам.
эти группы называются компоненты. чтобы скачать хоть один пакет надо указать в какой группе мы будем
искать компоненты. так вот  main multiverse restricted universe это уже компоненты тоесть группы 
пакетов в репозитриии.

что по факту происходит с точки зрения apt когда мы указали имя компонента. дает то что он 
пытается скачать файлы 


http://ftp.ubuntu.com/ubuntu/dists/bionic/main/binary-amd64/Release
http://ftp.ubuntu.com/ubuntu/dists/bionic/main/binary-amd64/Packages.gz или Packages.xz

вот что для apt значит указание компонента.

тепрь мы полность расшифровали физ смысл строчки. как ее юзает apt что он делает с ней.


вот эти вот файлы InRelease, Release, Packages.xz это все толко списки пакетов украшенные PGP хэшами.
тоесть из этих хреней apt узнает про список файлов на том репозитории и где они там лежат.тоесьт это
некая индексная информация. 
вот что это по факту дает. сами пакеты сгруппирование по алфавиту лежат по факту в папке 

http://ftp.ubuntu.com/ubuntu/pool/

но это уже внутреняя кухная apt нам туда руками лазит ненадо. просто я хотел выразить то что в папках 
что мы рассмотрели выше там самих пакетов нет . там толко индексная ифнлморация.


также показывают как вглядит папка с компонентами main multiverse итд

путь = http://ftp.ubuntu.com/ubuntu/dists/bionic/
папка выгляидит как


[   ]	Contents-amd64.gz	2018-04-26 05:59	38M
[   ]	Contents-i386.gz	2018-04-26 07:25	37M
[   ]	InRelease	2018-04-26 23:38	236K
[   ]	Release	2018-04-26 23:38	236K
[   ]	Release.gpg	2018-04-26 23:38	819
[DIR]	by-hash/	2017-10-25 09:04	-
[DIR]	main/	2018-04-24 01:33	-
[DIR]	multiverse/	2017-10-25 13:33	-
[DIR]	restricted/	2017-10-24 22:44	-
[DIR]	universe/	2017-10-25 13:33	


я это к тому что если мы зашли в эту папку то визуально мы сразу можем определить названия компонентов
этого репозитория = main, multiverse, restricted, universe, by-hash


далее немножка как выглядит InRelease файл внутри что там в нем
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Origin: Ubuntu
Label: Ubuntu
Suite: bionic
Version: 18.04
Codename: bionic
Date: Thu, 26 Apr 2018 23:37:48 UTC
Architectures: amd64 arm64 armhf i386 ppc64el s390x
Components: main restricted universe multiverse
Description: Ubuntu Bionic 18.04
MD5Sum:
 32a92a5c20f378d42dd2d2f4f28f6637        628836439 Contents-amd64
 53c6a594819b51a5755f88b45d1eff7f         37766986 Contents-arm64.gz
 cd7bf6d50403da4348ee48138eace986        585939706 Contents-ppc64el

если репонеимеет файла InRelease то apt пытается в той же папке найти файл Release 
который выглядит примерно также



далее. вверху мы рассаотрели файл vasya.list
deb [arch=amd64]    http://ftp.ubuntu.com/ubuntu  bionic               main multiverse restricted universe

но ест и другой формат записи пути к репозиторию.  первое важнео отличие имя файла должно заканчиваться
не на .list а на .sources !!!! ЕЩЕ РАЗ ЭТО ОЧЕНЬ ВАЖНО. файл с алтернативной формой пути записи 
к репозиторию долже заканчиваться не на .list а на .sources

/etc/apt/sources.list.d/vasya.sources
# cat vasya.sources 

Types: deb
URIs: http://ftp.ubuntu.com/ubuntu
Suites: bionic
Components: main multiverse restricted universe
Architectures: amd64


далье уже нам выбирать какая форма записи пути к репозитори нам больше нравтся.

в заключении хочу сказать что man sources.list можно читать это не совсем сборище мусора как обычно.

также вот эта страница тоже раскрыла глаза = https://wiki.debian.org/DebianRepository/Format

из нее видно то же самое что я только что описал а именно
что строка в .list файле имеет вид:


deb uri distribution [component1] [component2] [...]


они дают пример

deb https://deb.debian.org/debian stable main contrib non-free


при этом 

https://deb.debian.org/debian  = называется uri
stable = называется distribution
main = называется компонент1


они говрят что 

Here deb specifies that this is source for binary packages, deb-src is for source packages.
The uri, in this case https://deb.debian.org/debian specifies the root of the archive. далее они называют его как  $ARCHIVE_ROOT

далее они гвоорят что distribution в нашем случае это stable описывает вот такую подпапку 
$ARCHIVE_ROOT/dists/$DISTRIBUTION которая должна существовать в которой apt ищет файл InRelease 
а если его там нет то он тамже ищет файл Release

длаее они переходят к компонентам и говорят что 
To download the index of the main component, apt would scan the Release file for hashes of files in the main directory. eg. https://deb.debian.org/debian/dists/testing/main/binary-i386/Packages.gz which would be listed in https://deb.debian.org/debian/dists/testing/Release as main/binary-i386/Packages.gz

вэтом примере они рассмотрели поиск пакетов для i386 архитерутуры. если же мы  вставили в нащу строчку
вот такую хрень [arch=amd64] то тоода поиск будет идти пактов 64битной архитекуры уже в другой папке

https://deb.debian.org/debian/dists/testing/Release as main/binary-amd64/Packages.gz




получается каждая строчка вида 

deb https://deb.debian.org/debian stable main contrib non-free

это отдльный репозиторий. в этом репозитории пакеты разделены на группы чем больше
мы справа добавляем тем больше мы групп пакетов включаем. имена групп можно узнать если 
зайти в по урл в папку https://deb.debian.org/debian/dists/stable 
и посмотреть названия папок в этой папке


еще пример файла .sources у котрого использован новый формат описания репозитория

# cat /etc/apt/sources.list.d/ubuntu-de.sources 

Types: deb
URIs: http://mirror.ip-projects.de/ubuntu
Suites: bionic
Components: main multiverse restricted universe
Architectures: amd64



хочк тпепрь подробно коснутся что хранится в InRelease файле.
значит как я уже сказал выше первым делом apt скачивает файл InRelease . тоесть
вот унас есть трочка в *.list файле

deb [ arch=amd64 ] http://us.archive.ubuntu.com/ubuntu/ bionic main restricted

значит тогда apt скачивает файл
http://us.archive.ubuntu.com/ubuntu/dists/bionic/InRelease

для начала вот как выглдяит папка http://us.archive.ubuntu.com/ubuntu/dists/bionic/



[   ]   Contents-amd64.gz
[   ]   Contents-i386.gz
[   ]   InRelease
[   ]   Release
[   ]   Release.gpg
[DIR]   by-hash/   
[DIR]   main/   
[DIR]   multiverse/ 
[DIR]   restricted/ 
[DIR]   universe/   


вот кусок того что внутри InRelease
MD5Sum:
 32a92a5c20f378d42dd2d2f4f28f6637        628836439 Contents-amd64
 53c6a594819b51a5755f88b45d1eff7f         37766986 Contents-arm64.gz
...
SHA1:
 2089b55f9d70613f3423aefda55ab022a9ee9d92        628836439 Contents-amd64
 c24a8a11fe53a979be1b7ac49e04bb79e26fb291         37766986 Contents-arm64.gz
 ...
SHA256:
 a52178aee3ae6a3eeb2d91269b3331cfa2b5d1d064f1998b1316040c47e61ba4        628836439 Contents-amd64
 d9c9c29c2a19d77794c3e887fed03fee7976ba012ca42fc422cd7803ece8c58c        37766986 Contents-arm64.gz


итого в нем указаны все файлы из текущей папки и папок 
main
multiverse
restricted
universe

и для каждого файла указан его MD5, SHA1, SHA256 хэш
в папках которые внутри самих пакето deb нет. там только файлы которые содержат некоторый список пакетов. не 
более того.
таким образом руководствуясь файлом InRelease наш apt скачивая файлы из этих папок может проверять достоверность
файлов  в них вычисляя md5 и сравнивая с тем хэшем что указан в InRelease. Но как проерить что сам файл InRelase
достоверный. тут приходит на помощь GPG.  в самом файле есть также кусок в котором укзана цифровая подпись GPG(именно цифровая подпись а не публичный ключ)

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJa4mMAAAoJEDtP5qzAsh8yCEAQALln+mZtZ8M/X0m8d/qgqXxD
urONP0FblVN95qLAxcUfDOKhkpfizmrSoZ5nH4gFNveqsU762gXR5fbHXnhW0fBW
pE3E1PUdOMLwEygPYNDuCV4RhNVxexWP5A+TxTeWjCJTFgY4LczzqHtSmphYXxV/
sZHSqidzA9mtjRFvsFzucsZDsCGm/Nv/xSsZ8MJTjt5PKNMnumpaxjolb0coxk24
r337QyWHfx9ZFaFdLdusqEmUNk3MINBfjyTqPsN/Y6RVEYhvaHNwNbWz9X9Vk7Gb
Tf1vOQy9NxIs1DNTYDrdPOovf6P87H06MRb+EsyKwp3iee5CpqcQewTd7O4h8bEs
AsSnq6dRgsnCHpY1SRcwsKgudQFrEfkYEr1IGNpsmjpTVxaR05z9F8nduuBvBKW7
y1e97eHgt/boMKVeB4TwQpeJ0IPao7QgWw9G+dK5V/oVUX7/+x93MgdRv0oTXSXn
ZMQIjymL3SGTd+23izASOuhiF+wemoifS4LHXf/OP1fcYc7ocq03B5rIvRYlKkdT
wXcaMr8kkDVY1tLVvXYTfOu/P+VWD25DYHsvYaSaBYNCwzks0Sr7qYsDbxZqNCXX
3TLygurN/NelH5N0L71hdkJKAHXSN0w2QLVNQ7S+7thOR5Mgd18VXp3UaNfeqgQ7
QU+FaXsLp77+R4ZjIybB
=3EBC
-----END PGP SIGNATURE-----

также эта эта цифровая подпись есть в отдельном фйле Release.gpg

так вот перед тем как качать файлы через apt с репозитория нам надо с репозитория 
скачать публичный GPG ключ.  










вот и все с этим ебучим apt-ом


=====
apt-file

если нужно найти пакет который содержит какойто файл по имени то юзаем apt-file.

фишка в том что мы ищем имя нетого пакета который уже установлен а имя пакета который
еще неустанвлен который бы содержал некоторый файл. 

-----


apt 
gpg



apt испольщзует такую фичу как gpg

gpg это как у ssh это несимметричное шифрование. 
в apt исоплзуется фича называемая цифровая подпись.

идея такая: есть приватный ключ и есть публинчный ключ. мы берем сообщение\дату\текст и вычисляем
от него хэш MD5. далее мы используя приватный ключ шифруем этот хэш - это называется цфировая подпись.
далее мы берем исходный текст и приклаываем к нему цифровую подпись . 
 клиент получает сообщение и цифровую подпись. клиет вычисляет самостоятельно хэш MD5 от текста. 
далее  клиент берет свой публичный ключ и используя его дешифрует
 цифроую подпись и получает хэш MD5. и сравниваем полученный нами самтсоятельно MD5 пуетем вычисления его 
 от текста и сранививаем с MD5 который мы получили дешифруя цифровую подпись. если  текст был изменен 
 либо цифровая подпись фальшика то наши MD5 несовпадут.

 в случае apt его репозитоиии используют цфировые подписи gpg.

 как щас выяснмм.

 пока что известно вот что для кажого пакета на хосте хранится md5 хэш. а точне даже получается для каждог
 файла из пакета хоанится его md5 хэш

вот например для файлов из пакета bash

$ cat /var/lib/dpkg/info/bash.md5sums 
557c0271e30cf474e0f46f93721fd1ba  bin/bash
b7a48bd96ff18a87f86613fa05675877  usr/bin/bashbug
0cc02aca10031ffe9875e6420d06ad55  usr/bin/clear_console
3f54cfae6ffbd0a555b0a5c86b02276d  usr/share/doc/bash/COMPAT.gz
ab78b78be766692463cb112b88d5a74f  usr/share/doc/bash/INTRO.gz
df07599f46e06a04d214eeb258b0b039  usr/share/doc/bash/NEWS.gz
f28edb636ee9c337aaa0bc144a700c4c  usr/share/doc/bash/POSIX.gz
172188e3a6fc5409d4f113485cc6d79f  usr/share/doc/bash/RBASH
8fde8d2d8baffee3ed5849e7c4b1bda9  usr/share/doc/bash/README
6bd7de8b98911613a536e83867e9b490  usr/share/doc/bash/README.Debian.gz
5dac7b9b6332d9845e315cf8fd50ea89  usr/share/doc/bash/README.abs-guide
007dea9b8141f038c602b23f78509e34  usr/share/doc/bash/README.commands.gz
a23c21b8dfa4d8c539512919f6da5185  usr/share/doc/bash/changelog.Debian.gz
9632d707e9eca8b3ba2b1a98c1c3fdce  usr/share/doc/bash/copyright
244319c9dd88c980910aacd76477b8d9  usr/share/doc/bash/inputrc.arrows
4574de6676d74019761f409168aa8e01  usr/share/lintian/overrides/bash
47f78a9a3e209eab17ac68993a0b02a8  usr/share/man/man1/bash.1.gz
ab8320c478c9d17caaa4d86e113cf0a2  usr/share/man/man1/bashbug.1.gz
0c912132bdbce02861669392deb3f84c  usr/share/man/man1/clear_console.1.gz
6ad61b838c1370d3bed5d4410644f34a  usr/share/man/man1/rbash.1.gz
b2fb88f251700c29d638d9202e89a693  usr/share/man/man7/bash-builtins.7.gz
0c05a14279f95fdb4618a4ccaa469681  usr/share/menu/bash



а вот как проверить что файлы после установки остались неимзенными

$ debsums bash
/bin/bash                                                                     OK
/usr/bin/bashbug                                                              OK
/usr/bin/clear_console                                                        OK
/usr/share/doc/bash/COMPAT.gz                                                 OK
/usr/share/doc/bash/INTRO.gz                                                  OK
/usr/share/doc/bash/NEWS.gz                                                   OK
/usr/share/doc/bash/POSIX.gz                                                  OK
/usr/share/doc/bash/RBASH                                                     OK
/usr/share/doc/bash/README                                                    OK
/usr/share/doc/bash/README.Debian.gz                                          OK
/usr/share/doc/bash/README.abs-guide                                          OK
/usr/share/doc/bash/README.commands.gz                                        OK
/usr/share/doc/bash/changelog.Debian.gz                                       OK
/usr/share/doc/bash/copyright                                                 OK
/usr/share/doc/bash/inputrc.arrows                                            OK
/usr/share/lintian/overrides/bash                                             OK
/usr/share/man/man1/bash.1.gz                                                 OK
/usr/share/man/man1/bashbug.1.gz                                              OK
/usr/share/man/man1/clear_console.1.gz                                        OK
/usr/share/man/man1/rbash.1.gz                                                OK
/usr/share/man/man7/bash-builtins.7.gz                                        OK
/usr/share/menu/bash                                                          OK


 а вот наконец я нашел то что в пакете который устанолвен прописано какой у него в целом MD5.
 посмтреть можно здесь



 $ head -n 30 /var/lib/dpkg/available 
Package: adduser
Architecture: all
Version: 3.116ubuntu1
Multi-Arch: foreign
Priority: important
Section: admin
Origin: Ubuntu
Maintainer: Ubuntu Core Developers <ubuntu-devel-discuss@lists.ubuntu.com>
Original-Maintainer: Debian Adduser Developers <adduser-devel@lists.alioth.debian.org>
Bugs: https://bugs.launchpad.net/ubuntu/+filebug
Installed-Size: 624
Depends: passwd, debconf (>= 0.5) | debconf-2.0
Suggests: liblocale-gettext-perl, perl, ecryptfs-utils (>= 67-1)
Filename: pool/main/a/adduser/adduser_3.116ubuntu1_all.deb
Size: 162684
MD5sum: 97dff943493ad5831c5bfa67e4b503ac
SHA1: 5f3a18ea4515c5afdbd54f326ffd2707ca571124
SHA256: d451eb00b2d0e2940e26028ea9f2fb1be4f5109010e997acfb2c46229ebd9ebe
Homepage: http://alioth.debian.org/projects/adduser/
Description: add and remove users and groups
Task: minimal
Description-md5: 7965b5cd83972a254552a570bcd32c93
Build-Essential: yes
Supported: 5y

в файле available хранится инфо обо всех устанволенных пакетах
кстаии в описании пакета нет gpg цифр подпист. тоесть скачанный пакет в плане достоерности прлверяется
не через gpg подпись а через его md5 хэш. а где же юзается gpg ? щас рассмотрим. 


но это было вручную а через команду

$ dpkg-query  -p bash
Package: bash
Essential: yes
Priority: required
Section: shells
Installed-Size: 1588
Origin: Ubuntu
Maintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
Bugs: https://bugs.launchpad.net/ubuntu/+filebug
Architecture: amd64
Multi-Arch: foreign
Version: 4.4.18-2ubuntu1
Replaces: bash-completion (<< 20060301-0), bash-doc (<= 2.05-1)
Depends: base-files (>= 2.1.12), debianutils (>= 2.15)
Pre-Depends: libc6 (>= 2.15), libtinfo5 (>= 6)
Recommends: bash-completion (>= 20060301-0)
Suggests: bash-doc
Conflicts: bash-completion (<< 20060301-0)
Filename: pool/main/b/bash/bash_4.4.18-2ubuntu1_amd64.deb
Size: 614184
MD5sum: bb172fdca61d926fe61d8e642876f369
Description: GNU Bourne Again SHell
Original-Maintainer: Matthias Klose <doko@debian.org>
SHA1: ff433274a20b8d832387d4a2fecaabd2786d98b1
SHA256: 5895e980d1fc874906d27823ab31eeb65cfe1d059936b9d6d304bfee02c8995c
Homepage: http://tiswww.case.edu/php/chet/bash/bashtop.html
Task: minimal
Description-md5: 3522aa7b4374048d6450e348a5bb45d9
Supported: 5y



скачанные deb файлы хрантся в /var/cache/apt/archives/ 
 если отолько не сделать apt-clean


значит можно проверить интегрити для пакета или все пакетов через

# dpkg -V basg
# dpkg -V 

  -V, --verify [package-name...]
              Verifies  the  integrity  of  package-name  or  all packages if omitted, by comparing information from the files installed by a package with the files metadata information
              stored in the dpkg database (since dpkg 1.17.2).  The origin of the files metadata information in the database is  the  binary  packages  themselves.  That  metadata  gets
              collected at package unpack time during the installation process.

              Currently  the  only functional check performed is an md5sum verification of the file contents against the stored value in the files database.  It will only get checked if
              the database contains the file md5sum. To check for any missing metadata in the database, the --audit command can be used.

              The output format is selectable with the --verify-format option, which by default uses the rpm format, but that might change in the future, and as such,  programs  parsing
              this command output should be explicit about the format they expect.


прикольно. как я понимаю эта опция берет MD5 ( берет отсюда /var/lib/dpkg/info/*.md5sums )для каждого файла кажого установленного из пакетов и сверяет с тем что на практкие вычисляет.
подчеркуну что вычисялется md5 не для пакета а для кажого файла котоорый был скопирован в системе
из пакета.


тоже самое делает debsums

# debsums bash
# debsums


далее.
 щас я хочу сам руками вычислить MD5 для отдельного пакета  с тем что 
заявлено в его орисании.

тут меня ожидал прикол dpkg и apt это совсем не связанные программы. тоесть это прогарммы которые друг 
с другом мало связаны. тоесть в базе данных dpkg по адресу /var/lib/dpkg/available записаны далеко
не все имена пакетов которые были установлены. хотя по факту они установлены. (https://unix.stackexchange.com/questions/653084/dpkg-p-is-not-working-for-some-packages-like-vim)
значит чтобы добавит в базу данных dpkg инфо об установлыенных пакетах в систему выполним 
команду

# apt-cache dumpavail | dpkg --merge-avail -
 

теперь запросим как md5 у пакета elasicsearch
# dpkg-query -p elasticsearch | grep MD5
MD5sum: b4d3d26b353e567ef231011b917fcdb2

а теперт вычислмм MD5 этого пакета руками
# md5sum /var/cache/apt/archives/elasticsearch_7.17.8_amd64.deb 
b4d3d26b353e567ef231011b917fcdb2  /var/cache/apt/archives/elasticsearch_7.17.8_amd64.deb

вывод они совпдаают


такми макарм мы науились искать MD5 для устанолвенного пакета.
научились искать где хранится скачанный пакет
научилис руками вычислять MD5 от файла
ура.


интеренаая вещь. если запросим инфо об устанолвеном пактее  то будет интересное поле Filename
оно указывает в какой папке в удаленном репозитории лежит этот пакет. прикольно
# dpkg-query -p vim
...
Filename: pool/main/v/vim/vim_8.0.1453-1ubuntu1.9_i386.deb


как раз видим папка pool про которую я говорил что именно она и содержит все пакеты


здет мжно найти InRelease наши репозриориев
/var/lib/apt/lists/...

----

как посмотреть информацию о deb пакете до установки

# dpkg-deb --info <deb file>


====
[root@lenovo apt]# dpkg-query -s bash
Package: bash
Essential: yes
Status: install ok installed
Priority: required
Section: shells
Installed-Size: 1588
Maintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
Architecture: amd64
Multi-Arch: foreign
Version: 4.4.18-2ubuntu1.2
Replaces: bash-completion (<< 20060301-0), bash-doc (<= 2.05-1)
Depends: base-files (>= 2.1.12), debianutils (>= 2.15)
Pre-Depends: libc6 (>= 2.15), libtinfo5 (>= 6)
Recommends: bash-completion (>= 20060301-0)
Suggests: bash-doc
Conflicts: bash-completion (<< 20060301-0)
Conffiles:
 /etc/bash.bashrc 3aa8b92d1dd6ddf4daaedc019662f1dc
 /etc/skel/.bash_logout 22bfb8c1dd94b5f3813a2b25da67463f
 /etc/skel/.bashrc 1f98b8f3f3c8f8927eca945d59dcc1c6
 /etc/skel/.profile f4e81ade7d6f9fb342541152d08e7a97
Description: GNU Bourne Again SHell
 Bash is an sh-compatible command language interpreter that executes
 commands read from the standard input or from a file.  Bash also
 incorporates useful features from the Korn and C shells (ksh and csh).
 .
 Bash is ultimately intended to be a conformant implementation of the
 IEEE POSIX Shell and Tools specification (IEEE Working Group 1003.2).
 .
 The Programmable Completion Code, by Ian Macdonald, is now found in
 the bash-completion package.
Homepage: http://tiswww.case.edu/php/chet/bash/bashtop.html
Original-Maintainer: Matthias Klose <doko@debian.org>
[root@lenovo apt]# 


====


# apt-get update
получаем ошибку
 GPG error: https://ppa.launchpadcontent.net/ondrej/php/ubuntu jammy InRelease: 
 The following signatures couldn't be verified because the public key is 
 not available: NO_PUBKEY 4F4EA0AAE5267A6C

нужно импорторвать gpg ключ

# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4F4EA0AAE5267A6C
# apt-key list
# apt-key export 14AA40EC0831756756D7F66C4F4EA0AAE5267A6C | sudo gpg --dearmor -o /usr/share/keyrings/ondrig-launchpad-php.gpg


теперь редактируем репозитрий прописываем ключ:
# cat ondrej-ubuntu-php-jammy.list 
deb  [arch=amd64 signed-by=/usr/share/keyrings/ondrig-launchpad-php.gpg]      https://ppa.launchpadcontent.net/ondrej/php/ubuntu/ jammy main
deb-src [arch=amd64 signed-by=/usr/share/keyrings/ondrig-launchpad-php.gpg]   https://ppa.launchpadcontent.net/ondrej/php/ubuntu/ jammy main

теперь apt-get update продйет без ошибок

====

вобще получается интересная тема.
если хочешь узнать устанолвен ли пакет то 

# dpkg -i bash

а если хочешь почитать описание к нему то

# dpkg-query -s bash


=====
еще одна очень интересная тема.
вот у нас есть строчка в sources.list

deb [ arch=amd64 ] http://us.archive.ubuntu.com/ubuntu/ bionic main restricted

или такая строчка

deb [ arch=amd64 ] http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted

эти строчки они опысывают репозиторий разбитый на отдельные куски так вот мы хотим знать 
а к какому куску относится тот или иной пакет. например есть у нас пакет bash или gnumeric 
вот какая строчка из указаных выше привелет к тому что данный пакет будет достуен для установки

ответ лежит в этом каталоге
/var/lib/apt/lists

ищем для пакета gnumeric
# export name="gnumeric" && grep "$name" -Ri /var/lib/apt/lists | grep "Package: $name$" | grep binary | grep "ubuntu.com"
/var/lib/apt/lists/ftp.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages:Package: gnumeric


смотрим глазами на эту строку что получили
ftp.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages

я щас покажу ответ из какого репо в итоге можно закачать gnumeric
# grep "ubuntu.com" -Ri /etc/apt | grep "bionic universe"
/etc/apt/sources.list:deb  [ arch=amd64 ] http://us.archive.ubuntu.com/ubuntu/ bionic universe

тоесть файл /etc/apt/sources.list
и строка в нем 
deb  [ arch=amd64 ] http://us.archive.ubuntu.com/ubuntu/ bionic universe
это и ест то что мы искали

 а теперь обьясню как расшифровать строчку
ubuntu_dists_bionic_universe
слово ubuntu относится к  http://..../ubuntu/
слово dists мы инориуем
слово bionic_universe это вот в этой строке
deb  [ arch=amd64 ] http://us.archive.ubuntu.com/ubuntu/ bionic universe
последние два слова



# export name="bash" && grep "$name" -Ri /var/lib/apt/lists | grep "Package: $name$" | grep binary | grep "ubuntu.com"
/var/lib/apt/lists/ftp.ubuntu.com_ubuntu_dists_bionic_main_binary-amd64_Packages:Package: bash
/var/lib/apt/lists/ftp.ubuntu.com_ubuntu_dists_bionic-security_main_binary-amd64_Packages:Package: bash
/var/lib/apt/lists/ftp.ubuntu.com_ubuntu_dists_bionic-updates_main_binary-amd64_Packages:Package: bash

# grep "ubuntu.com" -Ri /etc/apt | grep "bionic main"
/etc/apt/sources.list:deb [ arch=amd64 ] http://us.archive.ubuntu.com/ubuntu/ bionic main restricted 

 


====
вот у нас есть файловы бэкап. как узнать версию установленногопакета
например весию пакета для mariadb.

идем в /var/lub/dpkg/info

/var/lib/dpkg/info# ls -1 | grep mariadb-server
mariadb-server-10.1.conffiles
mariadb-server-10.1.config
mariadb-server-10.1.list
mariadb-server-10.1.md5sums
mariadb-server-10.1.postinst
mariadb-server-10.1.postrm
mariadb-server-10.1.preinst
mariadb-server-10.1.prerm
mariadb-server-10.1.templates
mariadb-server-core-10.1.list
mariadb-server-core-10.1.md5sums
mariadb-server.list
mariadb-server.md5sums


уже понятно чтоверсия 10.1  но нас интереусует и третья цифра.
смотрим внутрь этих файлов и видим что  пакет вуключает файлы которые лежат в  /usr/share/doc/mariadb-server-10.1

идем туда и читаем что там написанр.

$ zcat changelog.Debian.gz | head
mariadb-10.1 (1:10.1.45+maria-1~bionic) bionic; urgency=medium

  * Automatic build with MariaDB build.

 -- Buildbot <buildbot@ubuntu-bionic-amd64>  Fri, 08 May 2020 03:55:54 -0400

mariadb-10.1 (10.1.0) unstable; urgency=low

  * Initial release.

ага! значитверсия пакета 1:10.1.45  
гоча !

