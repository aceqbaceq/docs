poetry

цели и задачи статьи
poetry описать
	  	описать то как его поставить.
	  	как создать файлы в которых указаны модули и как потом имея эти файлы
	  	их куда то скопироват чтобы там уже поставить. существенный момент в том что 
	  	поетри создает виртуальное окружеени питона   в папку ~/.cache/... 


итак:
poetry это утилита для установки модулей питона из репозитория https://pypi.org/

для этого вобще то есть уже утилита pip проблема ее в том что во первых эти придурки сломали у нее
опцию чтобы можно было посмотреть список доступных версий пакета хотя поетри тоже это недает сделать
по человечески(об это пожже) во вторых с помощью pip надо мудить чтобы создать virtual environment а с поетри мудежа вобще то нет. что такое virtual env: пакеты питона имеют версии и также как у 
apt пакетного менеджера изменения в системе версии одного пакета влечет за собой изменнеие версий
кучи других пакетов. так часто бывает что одной программе на питоне нужна одна версия пакета
а другой программе нужна другая версия. так вот условно говоря можно в папке создать минимальный 
набор питона и туда пихать версии пакетов которые будут видны только прогам из этой папки. таким 
образом для некоей программы на питоне можно конкретно дляя нее напихать видные тлько ей нужные только ей версии пакетов питона неломая версии пакетов которые видны всему линуксу. это можно сделать
с помощью pip. проблема с ним такова что в это виртуальное окружение нужно переклчаться это неудобно
это дополриельный мудеж. поетри тоже работает с виртальным пространством но делает это для юзера 
прозрачно, то есть мы создаем папку, в нее кладем конфиг поектри в котором написано какие модули
питона надо поставить. запускаем поетри указываем ему папкку с конфигом, поетри автоматом создаем
виртуальное пространство для нас это все прозрачно, устанавливает в это виртуальное простраснотво
заказнные модули, далее если мы будем запускать через поетри из данной папки любую программу то 
поетри автоматом для этих программ актиирвует виртуальное окружение без какой либо необходимости
в явном виде переклбчаться в это виртуальное простанство. вэтом удобство. вот коода был pip то мы скажем берем папку и в ней запускаем прогу на питоне, еслимы до этого не перключились в виртуальное
окружение то был виде питоне общесистемный так как мы забыли перкклчться в виртуальное окрежние
а вот с поетои такой проблемы нет. мы пишеи poetry run /home/vasya/01/2.py и поетри автоматом проверяет был ли до этого для папки /home/vasya/01/ установлено виртуальное окружение и если да
то поетри его автомтом актиирвует. тоесть убириетася человеесеский фактор когда ты забыл 
что для данной папки надо прердварительно активироваь виртуальное окржение питона.

зачем вообще вся этф фигня и мудеж с поетри нужен. а нужен он из за ансибля.ансибль это ничто иное 
как питон программа, питон модуль. вот у нас питон плейбук и он написан под какую то версию ансибля
если мы хотим сделать плейбук более автономным более переносимым более гарантированно что он будет
работать на какомто линуксе то выгоднее всего использовать не тот ансибль который установлен на хосте
вообще в целом а удобнее создать виртуальное питон окружение в него поставить конкретный нужный нам
версию ансибля которая точно работает с нашим плейбуком и уже испольщуя именно эту версию ансибля
натравливать ее на плебук. также гораздоб проще поставить самую последнюю версию ансибля как питон пакет через менеджер пакетов питона (поетри или pip) чем пытатться установить последнюю версию 
ансибля через линуксовский apt менедже пакетов. вот зачем нам нужно научиться юзать poetry.

установка 
$ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -


создать новый проект под управлением поетри 

$  poetry new proj1

при этом будет создана папка ./proj1

переходим в папку

$ cd ./proj1

там куча файлов но по факту нам важен только один 

pyproject.toml

в нем будет прописано какие пакеты питона с сайта pypi.org мы хотим поставить через поетри.

[tool.poetry.dependencies]
python = "^3.6"

[tool.poetry.dev-dependencies]
pytest = "^5.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


точнее там даже будет отдельная секция для этого 

[tool.poetry.dependencies]
python = "^3.6"


в данном случае прописано что мы хотим чтобы поетри установил один пакет это 
python = "^3.6"

значит когдмы мы перешли в папку проекта то можно запустить установку
пакетов.

$ poetry install
Creating virtualenv proj5-2agzOIF--py3.6 in /home/vasya/.cache/pypoetry/virtualenvs
Updating dependencies
Resolving dependencies... (3.6s)

здесь важно заметить что при установке пакетов поетри автоматом ставит и активирует
вируальное окржение по пути
Creating virtualenv proj5-2agzOIF--py3.6 in /home/vasya/.cache/pypoetry/virtualenvs

это происходит прозрачно для нас. специально входит и активироват это окружение ненужно как 
в pip. получается конфиг покетов которые мы хооим установить лежит в папке proj1 а сами
пакеты будут установлены в папку /home/vasya/.cache/pypoetry/virtualenvs/proj5-2agzOIF--py3.6

ходить в папку venv /home/vasya/.cache/pypoetry/virtualenvs/proj5-2agzOIF--py3.6 нам никогда
не придется вся работа идет только в папке proj1.

так ну установка модуля питона нас неинтересует нас интересует установка модуля ансибль.
добавит его можно либо руками в pyproject.toml но лучше добавлять через командун строку
поетри а именно заходим в папаку proj1  и запускаем команду

$ poetry add ansible@* --dry-run
либо
$ poetry add ansible=* --dry-run

ansible@* либо ansible=* означает что мы хотим добавить модуль ансибль любой версии 
которая совместима с текущими версиями уже установленных пакетов. у нас на данный момент
пока усатановлен только питон 3.6 тоесть поетри бует искать такую версию ансибля которая 
совмстима с версией питона установленной на компе.  это очень уобно потому что обычно 
по дефолту петри пыстется поставить послебнюю самую версию пакета которая обычно требует 
ту версию питора которой на компе нет. dry-run означает чтобы протестировать всю эту шарманку
но ничего по факту не ставть. если команда проша успешно то можно запускать уже без dry-run

запускает команду

$ poetry add ansible@* 
при этом у нас установится модуль ансибль в папке с venv /home/vasya/.cache/pypoetry/virtualenvs/proj5-2agzOIF--py3.6

а в папке с когфигом поетри в файле pyproject.toml появтся запись

[tool.poetry.dependencies]
python = "^3.6"
ansible = "*"


сидя в папке proj1 можно теперь зпускать ансибль который мы поставили

$ poetry run ansible --version
ansible [core 2.11.11] 


вообще сидя в папке с конфигом proj1 мы можем запускать любую программу которая лежит в этой 
папке через 

$ poetry  run vagrant up

и при этом запущенная программа будет видеть то окружние питона которое лежит в виртуальном
окружении поетри.

в этом и фишка

итак еще раз сами пакеты питона поетри ставиит в папку ~/.cache/... но нам туда даже
дазить не придется. конфиг лежит в папке proj1 в ней мы и должны находиться.
конфигурационный файл поетри имеет имя pyproject.toml лежит в proj1. внем указаны 
пакеты питона которые мы хотим иметь в виртуальном прстранстве.

новыый проект активруется через 

$ poetry new proj1

переходим в папку proj1

если мы хотим добавить новый пакет то 

$ poetry add ansible=4.10

если мы хотим добавит пакет версию которго незнаем но чтобы она была совместима 
с уже устарновлеными версиями пакетов то 

$ poetry add ansible=*

показать установленные пакеты и их версии

$ poetry show
ansible            4.10.0  Radically simple IT automation
ansible-core       2.11.11 Radically simple IT automation
attrs              21.4.0  Classes Without Boilerplate

проверить что с venv все коректно

$ poetry check 


pyproject.toml луше руками нередактирровать  лучше юзать poetry add

вот зашли мы в папку с pyproject.toml как узнать где лежит venv от него
$ poetry env list --full-path
/home/vasya/.cache/pypoetry/virtualenvs/proj4-JiRtrKSA-py3.6 (Activated)

когда мы поставили пакеты через poetry add то в папке proj1 появляется также файл
poetry.lock
в нем более подробно расписаны версии пакетов установленных.

как нам перенести проект в другую папку или на другой комп.
берем файл pyproject.toml а еще лучше плюс к нему poetry.lock  и кладем в любую папку
и запускаем 

$ poetry install

все готово. при этом poetry создаст новое виртуальное окружение в новой папке по пути ~/.cache/...

вместо poetry new proj1 также можно заюзать poetry init это чуть более интерактивная форма
создания нового проекта плюс poetry init кладет pyproject.toml  в текущую папку а poetry new proj1
создает новую папку ./proj1 и уже туда кладет pyproject.toml 

есть одна досадная и дебильная недоработка - совершенно нет взможности посмотреть какие версии
пакета доступны для установки . например мы хотим узнаь какие версии ансибля мы можем через 
поетри поставить.  вот нихера они нам эттго не дают показать. надо идти на сайт pypi и руками 
там смотреть. это полный дебилизм. полчается с помощью поери можно либо поставить версию пакета
номер который мы уже знаем, либо закзать постаить ту версию пакета которая совместима с уже 
устарновлленными на данынй момнт пакетами либо самую последнюю версию пакета.


итак еще раз алгортм работы с поетри в плане установки ансибля.

если уже есть pyproject.toml ( также желателен но необьязателен poetry.lock) то кладем 
их в текущую папку и запускаем

$ poetry install

если таких файлов нет то в текущй папке пишем

$ poetry init

далее 

$ poetry add ansible=*

все готово.

посмтреть какие версии пакетов в том числе и ансибля через

$ poetry show

узнать по какому пути находится venv (так чисто для справки ибо лазить туда непридется)
$ poetry env list --full-path

еще раз нафига нам нужен этот поетор. с его поомщью можно поставить на комп любую версию ансибля
вне зависимости от версии ансибля установленной через apt , эта версия ансибля будет чисто 
локальная для данной папки не ломая и невлияя на ансибль компа вцелом.







