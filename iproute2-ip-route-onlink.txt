| ip 
| route 
| onlink

что за хрень onlink в маршруте
наример 


# ip -c r sh
default via 172.16.100.1 dev enp0s3 onlink 



ищем что значит этот onlink
поищем это в справке из пакета в котором лежит 
команда ip


# dpkg -S ip | grep '/ip$'
iproute2: /bin/ip
bash-completion: /usr/share/bash-completion/completions/ip
iproute2: /sbin/ip

итак ip принажеит пакету iproute2
посмотрим какие есть справки у этого пакета

$  dpkg -L iproute2 | grep man | grep route
/usr/share/man/man8/ip-mroute.8.gz
/usr/share/man/man8/ip-route.8.gz
/usr/share/man/man8/routel.8.gz
/usr/share/man/man8/tc-route.8.gz


приколно что выясрислос что вместо команды

  ip -c r sh

можно заюзать команду

  routel


далее прикол в том что когда мы назначем ip адрес
для порта то это нам не позволяет ничего отправлять
с компа!! это нам только пзволяет принимать входящий
трафик на комп. тоеть в порт прилетате пакет. 
и ядро смотрит совпдаает ли dest IP у входящего
пакета с IP адресом порта. тогда он такой пакет
неотбрасывает. вот что дает назначение ип адреса
порту! а чтобы отарапвлять трафик наружу то для
этого нужна совсем другая хрень - нужна таблица
маршрутизации! вот такой пиздец

чтобы продолжить дальше   я порассуждаю.
вот у нас есть порт. когда его настраиваем то мы 
обычно указываем

  ИП адрес 
  маску
  гейтвей
  днс сервер

например 


iface enp0s3 inet static
	address 172.16.100.25
    netmask 255.255.255.0
    scope global
    gateway 172.16.100.1
    dns-nameserver 172.16.100.1


возникает вопрос какие настройки из этих реаьно
относятся к настройкам порта? оказывается не все
из этих настроек относятся к настройкам порта.
ип адрес действительно явлеяется настройкой порта.
что он дает? казалось бы он дает то что если мы
его зададим то потом можем ОТСЫЛАТЬ пакеты во вне.
но это нетак. присовение порту ип адреса этого не 
позволяет. вместо этого оно позволяет нечто совсем
другое. оно позволяет ядру принимать ВХОДЯЩИЕ пакеты
которые приелетели к нам из сети. к нас влетатет
пакет и ядро сравнивает какой ип адрес назначен 
порту с тем dest IP который записан внутри пакеты.
и так ядро понимает предназначен пакет нам или кому
то другому. итак ип адрес позволяет принимать входящий
трафик. но никак не отправлять обратно!
итак эту настройку я разобрал

	address 172.16.100.25


далее переходим к такой настройке как маска

    netmask 255.255.255.0

что она дает. мы должны наложит маску на ип адрес
порта через битовый AND


  172.16.100.25  AND
  255.255.255.0  
 ----------------
  172.16.100.0

и что же нам это дает? это так называемый Network ID
что он дает?  он обьясняет ядру какие ип адреса
имеют компьютеры в сети сидящие ЗА(ВОВНЕ) портом enp0s3

тоесть эта характиристика она не явялется характери
стикой нашего компа и нашего порта. эта хараектери
стика описывает нашему ядру об окружающем мире.
если ип адрес сообщает нашему ядру какой адрес
имеет наш комп наш порт. то маска\network id 
сообщает ядру о том какие ип адреса имеют другие
компы. там. вовне. за сеетевой картой.
а что физически сообщает нам нетворк ид. он сообщает
нам часть ип адреса которая у всех компов там 
во внешней сети одна и таже. тоесть. 
вот этот нетворк ид 

     172.16.100.0

он на самом деле выглядит вот так

   172.16.100.x

тоесть 0 на самом деле шифрует под собой X
где X это любой набор битов возможный. ведь
у нас ип адрес на самомо деле это набор битов
числом 32 штуки. а запись A.B.C.D это всего лишь
нотация которая позволяет людям более легко
понимать этот набор. то есть пофаку ип адрес
физически выглядит вот так

  1010 1010   1010 1010    1010 1010   1010 1010 

так вот X обозначает что в данном блоке битов
длиной 8 штук у нас биты могут быть любые

  1010 1010   1010 1010    1010 1010   xxxx xxxx

так вот НЕТВОРК ИД утверждает что какой бы комп мы не взяли в сети за нашим портом то у этого компа будет
ИП выглядеть так что первые 24 бита у него всегда
будут равны

     172.16.100.


эта часть ип адреса у этих компов будет одна и таже.
вот в чем смысл нетворк ид. и только оставшаяся
часть в размере 8 бит уже будет у этих компов 
индивидуальная.

тоесть в чем суть. у нас компы в сети имеют разыне
ип адреса. мы их выписываем на бумажке

     172.16.100.5
     172.16.100.10
     172.16.100.100
     172.16.100.16
     172.16.100.20



и начинаем анализировать их.
и замечаем что у всех у них оказывется есть общая
часть.  172.16.100.
вот этот факт и утверждает нетворк ид.
тоесть когда мы сообщаем нашему компу нетворк ид.
то этим способом мы сообщаем нашему компу о том
как выглядят ип адреса копов во внешней сети.
а именно мы сообщаем что у всех этих компов ип
адрес имеет некую общую часть. которая одна и таже
у них у всех. и только оставашаяся часть у этих
компов индивидуальная для кжаого компа. соотвевтеннно
чтобы сообщаить нашему компу нетворк ид мы должны
знать все ип всех компов во внешней сети. выписать
их на бумажку. найти у них общую часть. и только 
тогда ее сообщаить нашему компу.

и тут важно понять что сам по себе порт компа
в качестве индентификатора имеет только ИП адрес.
это идентификатор. он самодатдостаточный. больше 
кнему ничего ненадо. дейстиеитльно в ип пакете
в его заголовке в качестве идентификатора дестинейшен
компа стоит только ип адрес и там нет никакой
маски сети нет никакого нетворк ид. нетворк
ид это некая внешняя хрень которая позволяет 
нашему компу обьяснить какие ип адреса имеют компы
во внешней сети в более короткой форме. тоесть
мы могли бы на нашем компе составить таблицу
в которую вписать каждый ип адрес компов из внегней
сети


     172.16.100.5
     172.16.100.10
     172.16.100.100
     172.16.100.16
     172.16.100.20

но очевидно что это очень громоздкий способ.
и тогда придумали другой способ - давайте анализирова
ть все эти ип адреса и искать в них некую общую часть.
которую будем называть нетворк ид. хотя в природе
никакого нетворк ид с точки зрения заголовка ип
пакета НЕТ! это чисто искуственная абстракция!
которая позволяет вболее короткой форме нам на компе
зашифровать таблицу адресов всех компов. в данном
случае это будет 

    172.16.100.х


исходя из этой записи наш комп понимает все множество
как выглядят ип адреса компов сидящих за нашим портом.

    172.16.100.1
    172.16.100.15
    172.16.100.125


итак с точки зрения идентификации порта. есть только
ип адрес. и нет никаких ни масок. ни нетворк ид.
ест просто куча компов каждый из которых имеет 
ип адрес и все. окей.

а что дает на практике эта таблица


    172.16.100.1
    172.16.100.2
    ...  
    172.16.100.254

или в форме нетворк ид

    172.16.100.х

она дает вот что - зная ее ядро создает запись
(маршрут) в таблице маршрутизации


 172.16.100.0/24 ..... dev em1


тоесть замечаем сразу что маска в итоге эта хрень
которая влияет не на настройку порта а на другую
сущность  - на таблицу маршрутизации. окей поняли
зафискифровали осознали.
а что нам даеттаблица маршрутизации? а она нам помогает при формаировании ИСХОДЯЩЕГО трафика!
она нам помгает если мы хотим ПОСЛАТЬ пакет.

тоесть еще раз. ИП адрес назначенный порту он 
помогает ядру ПРИНЯТЬ пакет. 
а таблица маршутизации помогает ядру ОТПРАВИТЬ 
пакет. 

это соверщенно разные ситуации. хотя в рамках связи
с другим компом как раз таки мы имеем сумму двух
событий - прием пакета и отправка пакета. но 
обеспечение работы этих двух событий совершенно
разное!
если в наш комп влетает пакет то ядро не смотрит
в таблице маршурутиацзии. это тут ненадо. ядро
смотрит имеет данный порт такойто ип адрес который
заисан в грфае dest ip у влееиевшего пакета.
если есть совпадение то ппакет принимается. вот 
что дает и зачем нужен ип адрес на порту.

если же комп хочет отравить пакет вовне то он в целом
пофиг какой ип адрес назначает порту. он делает
чтото совсем дургое. ядро леезет  в таблицу маршути
зациию там ищет запись. исходя из нее ядро ищет
название порта в который нужно исодящий пакет
тиснуть. и также ядро ищет в записи маршрута номер
ип адреса который нужно вствить в пакет исходящий
в графу src ip.
дело в том что вот моя прога говорит ядру отправь
пакет по адресу 172.16.10.100
ядру для этого нужно знать три вещи.

 dest IP - мы его уже знаем. это ядру собщила
 программа. он равен  172.16.10.100

далее ядру нужно знать в какой порт сунуть пакет.
и ип пакет должен иметь поле src ip который ядру
приложение несообщает это ядро должно само както
оределить. ядро оба этих параметра ищет в таблице
маршрутизации!! вот зачем она нужна. вот что она
дает. замечу что при этом чему равен ип порта
в который будет сунут пакет неимеет никакого значения!
это никак не влияет ни на отправку пакета ни на 
паарметры этого пакета!

вот таким образом ип адрес порта и таблица маршру
тизации играют две совершенно разные роли. одна
хрень нужна для приема пакета а вторая для отправки
пакета. и это совешенно разные вещи. и их работу
обеспеивают два разых мехагизма.

на самом деле ип адрес порта может играть роль в 
мехаизме отправки пакета. в том случае если 
маршрут в талцеи маршуртизации неимеет в себе
парметра src ip. если он не указан например вот 
два случая
вот тут src ip в маршрут указан

172.16.80.0/24 dev bondV2.2 proto kernel scope link src 172.16.80.1 metric 400


все круто

а вот тут 

default via 172.16.10.1 dev enp0s3 proto static

параметр src ip не указан.

так вот если он в маршруте не указан то ядру нужно
все равно опрееддить src ip каким то другим способом.

тогда вступает в силу другой алгоритм. кажоый 
маршрут имеет параметр SCOPE. он может быть 
указан в явном виде в маршруте
как вот здесь


172.16.80.0/24 dev bondV2.2 proto kernel scope link src 172.16.80.1 metric 400


а может быть не указан  как здесь

default via 172.16.10.1 dev enp0s3 proto static

тогда он автоматом подразуметвается что он равен
GLOBAL.

так вот ядро смотрит какой скоуп есть у маршрута.
потом ядро смотрит какой порт указан в маршруте.
в данном случае enp0s3
далее ядро лезет на этот порт и сканирует список
ип которые этому порту назначены. а дело в томчто
один порт может иметь дохрена наанченных ему ип 
адресов. 
так вот когда мы назанчаем порту ип то также 
мы при этом назначаем какой SCOPE имеет этот ип!
мы это можем сделать в явном виде а если мы этого
не делаем то ядро это делает за нас автоматом само!
но это всегда происходит. узнать какой список ип
имеет порт и какой у них скоуп очень просто

   $ ip -c a sh dev enp0s3


2: enp0s3: ... 
    link/ether ba:ec:24:5c:00:05 ...
    inet 172.16.100.25/24 brd 172.16.100.255 scope global enp0s3

вот видно что у нас ип  172.16.100.25 и что
есть скоуп равен  global

вот я добавлю еще один ип на этот порт с другим
скоупом

# ip addr add 192.18.10.25/24 scope link dev enp0s3 

вот мы получим

2: enp0s3: ...
    inet 192.18.10.25/24 scope link enp0s3
    inet 172.16.100.25/24 brd 172.16.100.255 scope global enp0s3

получается у нас порт имеет два ип. один имеет
скоуп глобал а второй имеет скоуп линк.

так вот еще раз. мы через программу говррим ядру -
пошли пакет на комп с ип=172.16.100.100
это с точки зрения ип пакета dest ip
ядро леезет в таблицу маршртуизации и ищет в
ней маршрут в котором будет написано - в какой порт
сунуть исходящий пакет. и какой срс ип в этот пакет
нужно записать. параметр src ip может отстусотвать
в маршруте. выходной порт как я понимаю (чтобы 
точно узнать нужно читать man ip-route) всегда
указан в маршруте. 
так. если ядро знает срс ип, выходной порт, из маршру
та и знает дест ип из инфо от программы. то ядро
знает как составить ип пакет и знает в какой порт
его сунуть. ядро все знает. так вот если срс ип
остсутвует в марррте то ядро смотрит какой скоуп
ест у маршурта. потом идет на порт который указан 
на маршуртуе и берет список ип этого порта.
иначинает по нему идти. и выбирает тот ип который
имеет тот же самый скоуп что и у маршрута.
если у маршурута указано что скоуп равен глобал

2: enp0s3: ...
    inet 192.18.10.25/24 scope link enp0s3
    inet 172.16.100.25/24 brd 172.16.100.255 scope global enp0s3

то среди этих двух ип ядро выберет ип=172.16.100.25
и именно этот ип ядро вставит в исходящий пакет
в качеств src IP !!!!! тоесть при данном стечении
обстоятельств ип назначенный для порта уже играет
роль не только для входящих пакетов но также и
начинает играть роль для исходящих пакетов! 
а что если в списке ип у проорта нет такого ип
котоырй бы имел тот же самый скоуп что и у маршрута?
в этом случае ядро всавит в исходящий пакет

   src ip = 0.0.0.0 

соовсвтенно такой пакет долетит до удаленного компа.
но получается тот комп не сможет нам ответить потому
что обратный ип неимеет никакого смысла!

исходя из того что я сказал - получается чтобы небыло
ебалы лучше всего чтобы в маршруте всегда был 
указан src ip. тодга все будет четко и ясно и не будет
никакой нежданной ебалы.

что касается какие бывают виды скоупов
читаю в man ip-route

scope SCOPE_VAL
the scope of the destinations covered by the route prefix.  SCOPE_VAL may be a num‐
ber  or a string from /usr/share/iproute2/rt_scopes or /etc/iproute2/rt_scopes (has
precedence if exists).  If this parameter is omitted, ip assumes scope  global  for
all  gatewayed  unicast  routes, scope link for direct unicast and broadcast routes
and scope host for local routes.

смотрим что в этих файлах

$ cat /usr/share/iproute2/rt_scopes  | grep -v '#'
0	global
255	nowhere
254	host
253	link
200	site

$ cat /etc/iproute2/rt_scopes | grep -v '#'
cat: /etc/iproute2/rt_scopes: No such file or directory

чтобы понять разницу между скоупами (тоесть почему
в  одном случае нужно назначить такой то скоуп
этому ип адресу и этому маршруту и в другом случае
другой скоуп ) нужно вначале поговриить в целом
про таблицу маршрутизации. пока что будем считать
что маршрут имеет src ip указанный и в этом случае
можно сразу забыть про скоупы. их можно игнорировать
они ни на что не влияют. и вернуься к ним потом.

так вот я возвращаюсь к нетворк ид.
когда я сообщаю ип адрес порта и маску в нетворк
менеджер то нетворе менеджер это всего навсего
автоматизатор надстройка который за нас делает
часть ручной работы. по факту он всего навсего
за нас запускает автоматом команду 

  $ ip ....

из пакета iproute2
тоесть никакой магии в нетвор менедже нет.
просто он за нас при загрузке компа запускает
команду 

  $ ip ...

и подставляет в нее значения указанные в конфиге
нетворе менеджера.
так вот  если я буду руками добавлять ип адрес
на порт например вот так


# ip addr add 192.18.10.25/24 scope link dev enp0s3 

то при этом ядро нетолько добавит ип адрес на порт
НО! ядро также автмоатом создаст +1 маршрут!
(можно добавить опцию noprefixroute 
   (см man ip-addresses)  )

и вэтот маршурут ядро впишет нетворк ид. 
в терминах таблицы маршрутизации он зовется ПРЕФИКС.
тоеть маршрут выглядит так


  ПРЕФИКС ..... выходной порт

например 


   192.18.10.0/24 .... dev enp0s3


итак в "префиксе" маршрута на самом деле зашифрован
нетворк ид. 

когда мы указываем маску вместе с ип мы таким
макаром передаем увтерждение ядру о том  что 
вот такой то дипазон ип есть у компов которые сидят
в сети за данных портом. 
тоесть когда я пишу

# ip addr add 192.18.10.25/24 scope link dev enp0s3 

то я говорю ядру. данный порт имеет ип=192.18.10.25
и за этим портом сидят компы которые имеют
ип лежащие в диапазоне 192.18.10.1-192.18.10.254
или другими словами что все эти ип имеют общую 
часть 192.18.10.

комп информацию об компах котоыре сидят за портом
запмывает в виде маршрута в таблице маршрутизации


   192.18.10.0/24 .... dev enp0s3

эта запись как раз обозначает то что мы собщили
компу. что за портом enp0s3 у нас сидят компы
которые имеют ип такие что каждый их ип
имеет общую часть    192.18.10.
и уже оставшаяся часть у таких ип явлесятся индивиду
альной для каждого того компа

         192.18.10.N

вот какой смысла у маршрута как такоовго
и вот какой физ смысл у префикса 192.18.10.0/24 
в маршруте
эта наша овтественность чтобы сообщить ядру 
коректный префикс. 

как на праактике ядро испольщует маршрут.
если мы в программе пишем что хотим достучаться
до ип=192.18.10.120  тоесть мы собщаем ядру 
что dest ip = 192.18.10.120 то далее ядро
идет в таблицу маршрутизации и начинает шерстить
маршруты. ядро берет маршрут у которого самый 
длинный префикс. имеется ввиду тот у котрого
самая большая длинная маска. в данном случае
у нас всего один маршрут в таблице поэтому еще проще

   192.18.10.0/24 .... dev enp0s3


далее ядро берет dest ip  192.18.10.120 который
мы задали ему и проверяет совпадает ли у этого 
ип адреса та часть нетворк ид которая указана
в этом маршруте. тоесть вот у нас префикс
192.18.10.0/24
что в себе шифрует нетворк ид

   192.18.10.

и он смортрит есть такие же биты в нашем ип
192.18.10.120
видим есть.

значит комп с данным ип лежит сидит как раз в той
сети которая лежит за портом enp0s3 который
указан в маршрруте!
тоесть наше ядро узнает за каким портом сидит
комп с тем ип что мы указали в программе.
тоесть табица машртутизации по своей сути
содержит инфо о том какие компы с каким ип сидят
за какими портами нашего компа. нашему ядру
нужно знать за каким портом находится тот комп
до  которого мы хотим досттучаться отправить пакет.
информация эта зашифрована в маршруте за счет 
того что в префиксе маршрута указана часть ип адреса
дестинешн компа. есть эта часть ип адреса совпдадает
с нашим ип адресом то комп делает вывод что нужный
нам комп сидит за портом указанным в маршруте.

это похоже вот на что ип адрес это полный адрес
например  ип = чикаго, ул сидорова 17, кв 40.
так вот префикс в маршруте он хранит часть этого 
адреса. та часть которая общая для некоторой группы
ип адресов.
тоесть 
  ип1 = чикаго, ул сидорова 17, кв 40
  ип2 = чикаго, ул иванова  40, кв 15

и в префиксе мы указыаем "чикаго" тоесть

 чикаго .... dev enp0s3

тогда если я хочу отправит пакет на ип1 = чикаго, ул сидорова 17, кв 40  ядро лезет в табице маршрутиацзии
видит там строку

 чикаго .... dev enp0s3


видит что ип1 в себе содержит "чикаго" и понимает
что пакет нужно сунуть в порт  enp0s3

скажем префикс=нетворк ид = 01010101010101010110
а наш дест ип = 01010101010101010110 010101010

соовесвтенно вот у нас маршрут

01010101010101010110  .... dev enp0s3

я хочу отправить пакет на ип = 01010101010101010110 010101010

ядро видит что нетворк ид 01010101010101010110
содержится в ип. и делает вывод что данный комп
сидит в сети за dev enp0s3 и что выходной пакет
нужно пихать в этот порт.

если бы не было мудежа с нетворк ид то 
таблица маршрутизации в себе содрержаала бы 
записи к кадому кокнрертному компу вот в таком 
виде

   192.18.10.120 .... dev enp0s3

было бы так просто.  я укыва в программе что
дест ип = 192.18.10.120
ядро лезет в табл маршуртиз. видит там

   192.18.10.120 .... dev enp0s3

и понимает что этот комп сидит за портом enp0s3

нетворк ид эта такая искусственная хрень чтобы
размер таблицы маршрутизации был поменьше.
вместо полного ип дест компа мы указываем только
часть его ип. а оставшаяся часть может быть какой
угодно. 

от чего же зависит выбор network id. он зависит
от архитектуры сети. тот кто проектирует сеть
должен решить скоько будет в сети компов и какие
у компов будут ип адреса. можно конечно взять кучу
компов и выдать кажому рандомные ип адреса тоесть


 комп1 порт ем1  ип=1.1.1.1
 комп2 порт ем1  ип=2.2.2.2
 комп3 порт ем1  ип=3.3.3.3
 ...
 компN порт ем1  ип=254.254.254.254


тогда получается чтобы я с компа1 мог связаться
со всеми компами я должен буду в таблицу маршру
тизации записать дохрена маршрутов

 2.2.2.2/32 ... dev em1
 3.3.3.3/32 ... dev em1
 ...
 254.254.254.254/32 ... dev em1

но этовсе мудеж. 

более разумано выдать компам в сети такие ип
адреса которые будут между собой иметь некую
общую часть
  
 комп1 порт ем1  ип=192.168.10.1
 комп2 порт ем1  ип=192.168.10.2
 комп3 порт ем1  ип=192.168.10.3
 ...
 комп254 порт ем1  ип=192.168.10.254


тогда на компе1 я могу записать всего один 
маршрут


192.168.10.0/24 .... dev em1


он сообщает моему ядру что комп с любым ип 
в которого часть в себе содержит кусок 192.168.10.
лежит за портом em1

таким образом если у меня есть сеть то я могу 
назначить раздать компам в сети рандонмые ип адреса
окей. но это сделает таблицы машрутизации очень
большого размера что плохо для скорости тупо.
вместо этого можно раздать компам ип адреса которые
имеют некую общую часть. на суть дела не влияет
зато этот трюк позволяет сделать талицу машрутизации
очень маленкую! 

этим я все пытаюсь передать какой смысл у маски,
нетворк ид. и как оно работает  в связке с таблицей
маошрутизации. 

это чтото типа нумерации домов в городе. можно
кажодому дому назначить свою улицу личную и номер.
но это накладно. выгоднее обьединить дома в 
группы в которой все дома в группе принадлежат
одной улице. это существено сократить таблицу
адресов домов в городе. 

в итоге получается что чисто физически нетворк ид который якобы идентифицирует некую "сеть" - то
это не так. нет никакой "сети" на уровне ип на 
самом деле. каждый хост имеет свой ип который его
однозначно идентифицирует.  по факту все эти
хосты с точки зрения ип адресации являются НЕЗАВИСИ
МЫМИ и не входят ни в какую "сеть". еще раз 
хосты имеют ип адреса которые их однозначно
идентифицируют друг между другом. и эти хосты
они все незавиисимые и не входят ни в какую "сеть".
нет никакогой сети. нет никаого обьединения в сеть.
все хосты незавиисимые.

я хочу скзаать что сам по себе протокол IP ни о 
каких обтединениях группы айпи адресов в сети 
понятия не имеет! в нем этого нет!
это все придумка таблицы маршрутизации! для того
чтобы можно было сокраить в ней колчесво записей!
вот еще пример. у меня есть куча людей. они все
чужие друг другу. так получилось что все эти люи
имеют фамилии которе начинаются на две теже
самые буквы 

  Иванов
  Ивугод
  Иваров
  Ивытуп
  Ившаков


От того что все эти люди имеют фамиллии такие что
они имеют две одинакоые буквы не делаеет этих
людей родствтенниками НИРАЗУ!! 
От того что я возьму карточки с этим фаимлиями
и положу их в ящик и напишу на ящике "Ив*"
несделает этих людей родсвтениками или както
свзанными друг с другом по факту. 

тоже самое с кучкой компов котоыре имеют такие 
ип адреса котоые так совпало имеют некую общую часть.

  1.1.1.1
  1.1.1.2
  1.1.1.3
  1.1.1.4

с точки зрения ип технологии все эти хосты независимые
не входящими ни в какую "айпи сеть". такого нет!
с точки зрения протокол айпи у них нет никакой
ни маски ни нетворк ид - нихуя этогонет. с точки
зрения проокола ип такого не сущестует. что четко
видно в заголвке ип пакета. там есть только 
ип адрес назначения и  ип адрес источника и все !!!
нет ни маски , ни нетворк ид , нихуя этого нет!

маска, нетворк ид - это все придумка таблицы 
маршрутизации! которая прямого отношения к айпи
протоколу не имеет никакого отношения!
таблица маршрутизации это локалная для ос удобншяка
инсрумент для того чтобы хранить информацию о том
за каким портом якобы лежит комп с таким то айпи!

дефлотолыая табица маршрутиацзии выглядела бы так
я укаываю полный айпи удаленного компа (его иденти
фикатор с точки зрения айпй) и порт за которым он 
лежит.


  1.1.1.1   .... dev em1
  2.3.4.5   .... dev em1
  1.1.1.10   .... dev em1
  1.1.1.17   .... dev em1


и при таком подходе нужны табоицы громадного 
размера. что тупо и нудобно. и решили этот
моент ИСКУССТЕВЕННО оптимизировать.

мы проанализруем полный список всех хостов
о которых мы знаем. потом искусственно обьединим
их в несколко списков(чисто только на бумаге).
в кажом списке будут компы у которых их ип адреса
имеют какойто кусочек общий для них всех.
тоест



  1.1.1.1   .... dev em1
  1.1.1.10   .... dev em1
  1.1.1.17   .... dev em1

  2.3.4.5   .... dev em1


далее мы выделяем в каждом списке эту общую часть
ее мы чисто толко с тчоки зрения таблицы маршру
тизации назовем нетворк айди. далее мы заменем
классические записи в таблице маршрутизации 
в модернизированные. заменяя несклько записей 
в одну. в ней я вместо полного ип хоста встваляю
только куосочек от полного ип адреса который
представляет собой ту общую часть ип адеса которая
есть во всех этих хостах.
тоесть было


  
  1.1.1.1   .... dev em1
  1.1.1.10   .... dev em1
  1.1.1.17   .... dev em1


стало

  1.1.1.0/24   .... dev em1

рабтает это так. я беру ип

   1.1.1.0

потом я от него отрезаю слева столько бит
сколко указано в маске
тоесть полный ип

  0000 0001. 0000 0001. 0000 0001. 0000 0000

обрезаю 24 бита слева


  0000 0001. 0000 0001. 0000 0001.

и это значит что за портом em1 лежат хосты
такие что все их ип имеют одинаковую часть
такую что первые 24 бита слева имеют

  0000 0001. 0000 0001. 0000 0001.

ну а оставшиеся биты уже могут быть какие угодно
любые.

тоесть такая запись она кодирует вот такой
набор полных ип

  1.1.1.1   .... dev em1
  1.1.1.2   .... dev em1
  ...
  1.1.1.254   .... dev em1

нет нкиакой айпи сети в реланости. это всего
навсего мат подход трюк удобняшка со стороны
таблица маршртизации. которая всего навсего
является обычно таблицей которая хранит в себе
информацию за каким портом какой ип адрес лежит.

итак нет в релаьности никакой ай пи сети.
есть всего навсего  некая договренность в системе
обозначений внутри таблицы маршрутизации которая
позволяет в сокраенной форме в одной строке
зашифрвовать сразу целую кучу отдельых полных ип
адресов. вот и все.


от того что у меня есть хосты с ип адресами

  1.1.1.1
  1.1.1.2
  1.1.1.3

неделает их никак связанными. никоми образом.
это все назвисимые сущности.

вот еще аналогия
от того что у меня есть люди с именами  маша, саща, даша, глаша неделает этих людей связанными друг с другом никоми образом. я могу все их имена засунуть в ящик на котором написать "*ша" но это никак по факту в жизни неделает их связанным друг с другом.  от того что их карточки лежат в шкафу в одном ящике неделает между ними никакой связи. 

есть только связь их карточек на уровен шкафа. вот ивсе


я вот щас докажу что нет никаких айпи сетей.
и что нет никакой проблемы связать хост 1.1.1.1
и хост 2.2.2.2 напрямую. без всяких гейтвеев и 
прочее.

хост1
его айпи
inet 1.1.1.1/32 scope global enp0s3

хост1
его айпи
inet 2.2.2.2/32 scope global enp0s3

на хосте1
маршрут
2.2.2.2 dev enp0s3 scope link src 1.1.1.1


на хосте2
маршрут
1.1.1.1 dev enp0s3 scope link src 2.2.2.2


далее я на хосте2 делаю пинг
# ping 1.1.1.1
PING 1.1.1.1 (1.1.1.1) 56(84) bytes of data.
64 bytes from 1.1.1.1: icmp_seq=1 ttl=64 time=2.34 ms
64 bytes from 1.1.1.1: icmp_seq=2 ttl=64 time=1.52 ms


все заебись!

логика такая. на хосте2 я говорю кинь 
пакет на 1.1.1.1
ядро идет в маршруты и находит такой маршрут
1.1.1.1 dev enp0s3 scope link src 2.2.2.2


тогда ядро создает пакет с 
срс ип=2.2.2.2 дест ип=1.1.1.1 и кидает его
в порт enp0s3

тот легко долетает до хоста1
то его принимает.
и формирует обратный пакет.
дест ип=2.2.2.2
идет в маршруты
видит там
2.2.2.2 dev enp0s3 scope link src 1.1.1.1
и подстлавяет срс ип=1.1.1.1
и кидат пакет в enp0s3

поэтому пинги работаютт отлично между 1.1.1.1
и 2.2.2.2








ксати можно заметить что линукс при показе ип
адреса у порта показыает нетолько ип адрес но 
и маску. нахера? она ведь не имеет отношения к
парамтру порта!

default префикс

скоупы


