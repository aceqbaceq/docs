| conntrack

тут я хочу расказать про коннтрак.

значит есть такая подсистема в ядре.
она срабатывает при обработке пакета до его
попадаия в иптбейлс.
что она делает - она в итоге назначает
пакету один из статусов

 NEW
 RELATED
 ESTABLISHED
 INVALID


и потом когда пакет передается в иптбейлс
то можно в правилах использовать этот статус
для принятия решений

значит как это работает. 
во первых нужно постаить пакет conntrack
во вторых эта подсистема она активируется ТОЛЬКО
если в таблице правил иптейблс  унас есть хотя
бы есть одно правило которое анализиует пакет
исходя из коннтрак статусов. тоесть
напрмиер 

-A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT


так вот коннтрак это такая таблица "конектов"
конект именно в понимании самого контрака. 
конекты можно увидеь в табллице контрака вот так

# conntrack -L
udp      17 28 src=127.0.0.1 dst=127.0.0.1 sport=46389 dport=53 [UNREPLIED] src=127.0.0.1 dst=127.0.0.1 sport=53 dport=46389 mark=0 use=1


либо где то в /proc или /sys  в какомто файле

так вот как работает коннтрак.
у нас в ядро прилетает пакет. он попдпает в коннтрак.
то смотрит входит ли пакет в какойто существущий
конект контрака. если такого конекта нет то 
пакету прсиваивается статус NEW
если же тако конект есть то пакету присрваивается
статус ESTABLISHED
вот так все просто. 
если ему чтото неравтся то пакет получит статус INVALID
я не знаю как это смоеделирвовать.

еще пакет может получить статус RELATED.
но для этого нужно чтобы был запгружен в ип тббейлс
модуль так называеомго хелпера. который анализрует
уже существующий поток и в нем там чтото ищет.
например ftp хедпер который наализирует пакеты
идущие на 21 порт tcp компа. и там он ищет 
когда в потоке появится ип адрес и порт на который
либо клиент либо серерве должен позонить. тогда
при прилете первого пакета из этого потока он 
первому пакету в этом потоке присовит статус RELATED
а всем соатльным пакетм из этоо потока он уже
будет прсиваивтаь статус ESTABLISHED.

а вот как применить этот хелпер на практике
для этого нужно сделать две вещи.
первое нужно загрузить модуль 

 # modprobe nf_conntrack_ftp ports=21

второе нужно добавить в таблицу RAW 
особое правило

*raw
:PREROUTING ACCEPT [99:6441]
:OUTPUT ACCEPT [98:6761]
-A PREROUTING -p tcp -m tcp --dport 21 -j CT --helper ftp
COMMIT

вот эта комбинация из двух шагов заставит этот
хелпер работать как надо. иначе он нихуя не будет
работать. 

теперь чтобы наш фтп сервер мог работать нам
нужно два правила

*filter
:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [152:10184]

-A INPUT -p tcp -m tcp --dport 21 -j ACCEPT
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT


первое правило нам откроет стандарттыный постоянный
порт 21. а второе правило нам позволит чтобы
наш иптбейлс используя тот момент что коннтрак
за счет хелпера присвоит пакету из второго тцп
конекта статус RELATED. и мы пакет с этим статусом
пропустим. и за счет этого в коннтрак создастся
конект, тоесть запись. тогда обратный пакет
уже полетит со статусом ESTABISHED  и он вылетит
из файрволла за счет дефолтового правила
:OUTPUT ACCEPT
и третий пакет который прилетит снаружи уже будет
иметь по мнению коннтрака уже статус ESTABLISHED
поэтому он будет пропущен за счет этого правила

-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED 

и в итоге у нас этот второй тцп конект успешно 
заработает.

вот как выглядит строка в conntrack
таблице если у нас фтп поток анализируется
фтп хелпром

tcp  src=172.16.5.1 dst=172.16.5.2 sport=42948 dport=21 [UNREPLIED] src=172.16.5.2 dst=172.16.5.1 sport=21 dport=42948 helper=ftp

тоесть обращаю внимание на helper=ftp


а вот как выглядит лог этих пакетов в иптебйлс


[RELATED] SRC=172.16.5.1 DST=172.16.5.2 PROTO=TCP SPT=33892 DPT=50100 SYN 

[ESTABLISHED] SRC=172.16.5.2 DST=172.16.5.1 PROTO=TCP SPT=50100 DPT=33892 ACK SYN 

[ESTABLISHED] SRC=172.16.5.1 DST=172.16.5.2 PROTO=TCP SPT=33892 DPT=50100 ACK 


вот мы видим первый пакет SYN влетел снаружи
в систему и коннтрак за счет хелпера ему прсивоил
статус RELATED(а без хелпера он бы ему присовил
статус NEW)
за счет того что мы разрешаем в цепочке INPUT
проходить пакетам со статусом RELATED то он проходит.
у нас создается запись в таблице контрак.
если пакет не пропускается файрволом то заппись 
в таблице контрак не будет создана.
за счет того что зааись создана то все остальные
пакеты в рамках этого контрак конекта будут им
автоматом помечаться как ESTABLISHED
и вот мы видим что пакет который летит в обратку
наружу уже ему контрак присвоил статус ESTABLISHED
и получается уже третий пакет который второй 
входящий ему коннтрак система уже прсиваеиывает
не RELATED а ESTABLISHED статус. 

тонкий момент в аспекте модуля

 # modprobe nf_conntrack_ftp ports=21

состоит в том что этот модуль работает нетолько
если я использую на бекенде nft подсистему но
он рабтает и  если я использую на бекенде legacy
xtables(iptables) подсистему! это удивтельно но 
это так. более того модуля ip_conntrack_ftp его
прсто нет среди модулей ядра. зато в алиасах
модуля nf_conntrack_ftp укаано что у него алиас
это ip_conntrack_ftp, не знаю что это значит но
это так 

# modinfo nf_conntrack_ftp | grep alias
alias:          nfct-helper-ftp
alias:          ip_conntrack_ftp

поэтому не знаю включает ли он в себя код
из ip_conntrack_ftp, но по факту получается 
что у меня мои правила суюся в xtables бекенд
а при этом я загружаю модуль формльно для nft 
бекенда. и он  все равно работает как в связке
с xtables.

чтобы увидеть логи захвата пакетов то нужно 
вставить правила

-A INPUT -p tcp -m tcp -m conntrack --ctstate RELATED -j LOG --log-prefix "[RELATED] "
-A INPUT -p tcp -m tcp -m conntrack --ctstate NEW -j LOG --log-prefix "[NEW] "
-A INPUT -p tcp -m tcp -m conntrack --ctstate ESTABLISHED -j LOG --log-prefix "[ESTABLISHED] "

-A OUTPUT -p tcp -m tcp -m conntrack --ctstate RELATED -j LOG --log-prefix "[RELATED] "
-A OUTPUT -p tcp -m tcp -m conntrack --ctstate NEW -j LOG --log-prefix "[NEW] "
-A OUTPUT -p tcp -m tcp -m conntrack --ctstate ESTABLISHED -j LOG --log-prefix "[ESTABLISHED] "


итак еще раз скажу чтобы фтп хелпер 
сработал то нужно вот эти два шага сделать
загрузить модуль

 # modprobe nf_conntrack_ftp ports=21

добавить в таблицу RAW особое правило

*raw
:PREROUTING ACCEPT [99:6441]
:OUTPUT ACCEPT [98:6761]
-A PREROUTING -p tcp -m tcp --dport 21 -j CT --helper ftp
COMMIT

таким макаром мы "включили " фтп хелпер.
и теперь добавляем правила по пропусканию собственно
пакетов фтп сервера

*filter
:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [152:10184]

-A INPUT -p tcp -m tcp --dport 21 -j ACCEPT
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT


где 
вот это правило
:OUTPUT ACCEPT [152:10184]

оно нам позволит любые пакеты от нашего фтп сервера
выпускать наружу

где
вот это правило
-A INPUT -p tcp -m tcp --dport 21 -j ACCEPT
оно нам позволит пропустить входящий пакет из 
первого тцп конекта от клиента к фтп серверу

а вот это правило
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

оно нам позволит пропустить первый входящий 
пакет от клиента из его второго тцп конекта
к фтп серверу когда ему коннтрак присвоит статус
RELATED
а всем остальным входйщим пакетам из этого второго
тцп конекта коннтрак будет прсиваивать
статус ESTABLISHED
и вот это правило нам позволит эти пакеты успешно
принимать пропускать через наш файрволл при этом
не здавая в явном виде тцп порт на нашем хосте.

тоесть еще раз логика какая.
наш фтп клиент стучит на наш хост на порт 21
создавая так назавыемый control канал с фтп
сервером.
мы его впустили. мы с нашего клиента через этот
тцп конект мы даем команду на фтп сервер PASV
и нам фтп сервер через этот тцп конект сообщает
ИП+порт через который наш фтп клиент должен 
создать второй тцп конект через который фтп сервер
далее будет пихать данные и который является
так называемым data каналом. путсть это 
ip=172.16.5.2 и порт 50000, хелпер читает поток
на порту 21 и ловит параметры этого сокета 
и тогда когда клиент стучит снаружи на этот сокет
через тцп пакет то коннтрак понимает что это 
непросто новый пакет в рамках нвого тцп содеиненеия
а он понимает что этот пакет в рамках того самого
второго тцп содеинения которое связано с перым
тцп содеиененим. и коннтрак присвоит этому
пакету статус REALATED, и попав уже далее в 
талцу фильтр иптбейлс там у нас стоит праивло
чтобы мы пропускали пакеты со статусом RELATED
в цепочке INPUT. и он успешно проходит файрволл.
за счет этого прхода коннтрак создает запись
(конект) в таблице коннтрака.
это дает то что когда наш фтп срвер шлет 
пакет наружу в ответ то коннтрак этот пакет поме
чает как ESTABLISHED ну в приницпе это нам пока
мало важно так как пакет вылетает наружу не за счет
проверки статуса а потому что у нас стоит
дефолтовое правилов в цепочке OUTPUT что выпускать
все пакеты. когда фтп сервер шлет свой следущий 
пакет в ответ то коннтрак видит что этот пакет
принадллежит конекту (записи) в коннтрак 
таблице. поэтому он этот пакет ему прсиваивает
статус ESTABLISHED и поэтому он попав в файрволл
проходит его потому то у нас там стоит правило чтобы
пакеты в INPUT цеопчке пропускались если у них
сатус ESTABLISHED.

вот такая схематехника.

я еще раз разьясню важную вещь. если у нас
влетел пакет в ядро. то он попдает вначале в 
подсиистему коннтрак. и там этому пакету полллюбому
присвываеся один из статусов

 NEW
 RELATED
 ESTABLISHED
 INVALID


далее этот пакет преедется уже в иптбейлс\nftables
тоесть попадает в файровлл там где правила.
так вот если пакет в итоге проходит файррвол
тоесть попадает в правило -j ACCEPT то тогда
толко в этом случае коннтрак создает новую 
запись в своей таблице!!! а если пакет не проходит
правила фарволла тоесть попадает на правило -j DROP
то тогда коннтрак несоздает запись в таблице
коннтрак. это важно понять. 
а он важен потому что если запись создана и в
ядро влетает пакет котый удоволяетворяет параметрам
этой записи то такому пакету коннтрак присваеивает
статус ESTABLISHED. это важно. а если влетает
пакет а записи нет то он опять получит статус NEW
а это уже другой колнекор! потому что если конннтрак
присвоил пакету статус ESTABLISHED это для фарволла
значит то что когда то уже даный файрвоол пропустил
первый пакет из этой коннтрак записи значит 
данный ESTABLISHED пакет это усвлоно говооря
пакет который явлется ответным пакетом и его
можно спокойно пропускать. что это не чужой пакет
неновый. это связаный пакет. именно благодаря
этому коннтарк механизму я могу вот так 
записать на файрволле

-A OUTPUT -p tcp -j ACCEPT
-A INPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT

и вот второе правило за счет системы коннтрак
нам заменяет тучу правил если бы коннтрака бы
не было а именно. 

-A OUTPUT -p tcp -j ACCEPT
-A INPUT -p tcp --sport 80 j ACCEPT
-A INPUT -p tcp --sport 443 j ACCEPT
...
-A INPUT -p tcp --sport N j ACCEPT


тоесть нам бы пришлось создавать кучу правил
чтобы мы могли успешно получать ответные
пакеты с извстным веб сервисов.
а так у нас только одно правило 

-A INPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT


возвращаюсь к фтп хелперу
таким оразом нам ненужно будет открывать порты
в явном виде. у нас порт будет нужный откртваться
"динамически" и потом автоматом закрываться.
это аутально длф протокла фтп например. где у нас
два тцп конкта испольуется. вот здесь про фтп
можно поииать ftp-iptables-nat-vsftpd.txt


таким образом у нас по сути чаще всего пакеты
из под коннтрака вылезают либо в статусе NEW
либо в статусе ESTABLISHED  . и самое редкое
это в статусе RELATED


без этих
статусов со стороны коннтрака 
у нас файрволл будет satteless. 
а так он становится statefull.

еще раз
напрмиер мы разрешили все исходящие пакеты
и по дефолту запретили все вхоядящи пакеты


*filter
:INPUT DROP [12:750]
:OUTPUT ACCEPT [12:750]


и  у нас улетел пакет на dport 80
в ответ нам прлетит  пакет с sport 80
и по дефолту он не будет пропущен. потому что 
деофлтроврое правило запрещает. и иптейсл он 
понятия неимеет что прилетевшйи ответный пакет
это ответный пакет а не какйто новый пакет 
нвоого содеиенеия. 
и вот тут на помощь и приходит conntrack
мы добавляем правило

-A INPUT -p tcp -m tcp -m conntrack --ctstate ESTABLISHED -j ACCEPT


оно говорит что если в питейлс влеетел пакет
у кторого коннтрак статус ESTABLISHED
то такой пакет пропустить. 
без системы коннтарк нам нужно было бы вручную
разрешать кучу правил для всех изветнх сервисов 
их отвтные паккты которые к нам приелтят на 
наш запрос туда

-A INPUT -p tcp -m tcp --sport 80 -j ACCEPT
-A INPUT -p tcp -m tcp --sport 21 -j ACCEPT
-A INPUT -p tcp -m tcp --sport 443-j ACCEPT


итд итп.

а так у нас все ответные ппакеты разрешаются на
нашем компе одним правилом

-A INPUT -p tcp -m tcp -m conntrack --ctstate ESTABLISHED -j ACCEPT

более того это правло будет вспускать только 
овтетные пакеты с этих портов. а если сервер
снаружи будет иниировать конект то для таких 
пкетов наш файрволл закрыт. что круто




далее
теперь я покажу как происодит рождение конекта
в таблце контрак. это можно отслдить в живую 
через ключ -E


# conntrack -E

# conntrack -E -p tcp
 [NEW] tcp      6 120 SYN_SENT src=172.16.100.1 dst=172.16.5.2 sport=33938 dport=21 [UNREPLIED] src=172.16.5.2 dst=172.16.100.1 sport=21 dport=33938
 [UPDATE] tcp   6 60 SYN_RECV src=172.16.100.1 dst=172.16.5.2 sport=33938 dport=21 src=172.16.5.2 dst=172.16.100.1 sport=21 dport=33938
 [UPDATE] tcp   6 120 FIN_WAIT src=172.16.100.1 dst=172.16.5.2 sport=33938 dport=21 src=172.16.5.2 dst=172.16.100.1 sport=21 dport=33938 [ASSURED]
 [UPDATE] tcp   6 60 CLOSE_WAIT src=172.16.100.1 dst=172.16.5.2 sport=33938 dport=21 src=172.16.5.2 dst=172.16.100.1 sport=21 dport=33938 [ASSURED]
 [UPDATE] tcp   6 30 LAST_ACK src=172.16.100.1 dst=172.16.5.2 sport=33938 dport=21 src=172.16.5.2 dst=172.16.100.1 sport=21 dport=33938 [ASSURED]
 [UPDATE] tcp      6 10 CLOSE src=172.16.100.1 dst=172.16.5.2 sport=33938 dport=21 src=172.16.5.2 dst=172.16.100.1 sport=21 dport=33938 [ASSURED]


значит я стучу на сервер 172.16.5.2 на 21 порт
значит в комп влетает первый пакет.
и для него конекта на коме еще нет. поэтому
коннтрак ему прсивывает статус NEW

 [NEW] tcp      6 120 SYN_SENT src=172.16.100.1 
 dst=172.16.5.2 sport=33938 dport=21 [UNREPLIED] 
 src=172.16.5.2 dst=172.16.100.1 sport=21 dport=33938

правда наебка коннтрак таблица в ТОМ что
она НЕ ПОКАЗЫВАЕТ в своей строке статусы каких 
либо пакетов которые протекают через этот 
конект!  вот эта хрень

[NEW]

она покзывает статус самого конекта. тоесть это
значит что в этой таблице появился новый конект.
а пакетах ни слова 
ну вот это SYN_SENT означет чере этот тцп конект
прошел тцп пакет с флагом SYN
ну вот это [UNREPLIED] показывает что через данный
конект пока что в ответ не получили ничего

смотрим далее

 [UPDATE] tcp   6 60 SYN_RECV src=172.16.100.1 ...
 [UPDATE] tcp   6 120 FIN_WAIT src=172.16.100.1 ...

вот это [UPDATE]  показыает то что данный конект
в таблице конектов тоько что поменял свой статус
тоесть в нем чтото изменилось. это нужно чтобы
проверилвечь внимние. поменялось понятно что
вот у нас что приоизошло SYN_RECV тоесть через 
этот конект пролетел пакет с SYN+ACK
ну и дальше [UPDATE] очердное изменние ситуции
с этим конектом  FIN_WAIT . вобшето тцп 
конект по классике различает два состояние 
FIN_WAIT_1 и FIN_WAIT_2 . какой из них различает
коннтрак хрен знает. не хочу копать.
главное что в этих строках никкогй сататситки
по статусам именно пакетов мы не увидим!
эти статусы нужно ловить уже внутри иптбейлс
правил

-A INPUT -p tcp -m tcp -m conntrack --ctstate RELATED -j LOG --log-prefix "[RELATED] "
-A INPUT -p tcp -m tcp -m conntrack --ctstate NEW -j LOG --log-prefix "[NEW] "
-A INPUT -p tcp -m tcp -m conntrack --ctstate ESTABLISHED -j LOG --log-prefix "[ESTABLISHED] "

-A OUTPUT -p tcp -m tcp -m conntrack --ctstate RELATED -j LOG --log-prefix "[RELATED] "
-A OUTPUT -p tcp -m tcp -m conntrack --ctstate NEW -j LOG --log-prefix "[NEW] "
-A OUTPUT -p tcp -m tcp -m conntrack --ctstate ESTABLISHED -j LOG --log-prefix "[ESTABLISHED] "



ксатти замечу что --log-prefix "[RELATED] " нужно
ставить только после -j LOG , в других местах
он выдаст ошибку!



так вот теперь я ппокажу как у нас меняется коннтрак
логи ипббейлс про пакеты и тцпдамп


172.16.100.1.40270 > 172.16.5.2.21: Flags [S] (тоесть SYN -->)

172.16.5.2.21 > 172.16.100.1.40270: Flags [S.] (тоесть SYN+ACK <--)

172.16.100.1.40270 > 172.16.5.2.21: Flags [.] (тоесть ACK -->)

теперь посмотрим что покажет коннтрак
тут порты будут не совпдаать потому что 
я на одном экране запускал вначале одно потом
другое потом тетье. но суть не меняется.


[NEW] tcp     6 120 SYN_SENT src=172.16.100.1 dst=172.16.5.2 sport=45130 dport=21 [UNREPLIED] src=172.16.5.2 dst=172.16.100.1 sport=21 dport=45130
[UPDATE] tcp  6 60  SYN_RECV src=172.16.100.1 dst=172.16.5.2 sport=45130 dport=21 src=172.16.5.2 dst=172.16.100.1 sport=21 dport=45130
[UPDATE] tcp  6 432000 ESTABLISHED src=172.16.100.1 dst=172.16.5.2 sport=45130 dport=21 src=172.16.5.2 dst=172.16.100.1 sport=21 dport=45130 [ASSURED]

из чего можно сделать вывод что флаг SYN_SENT в
таблице коннтарк означает что через ядро 
пролелет SYN пакет
этот флаг SYN_RECV означает что через данный конект
проеетел пакет SYN+ACK ответный
вот этот флаг ESTABLISHED означает что пакет ACK
пролетел и заверщил трехтсторонний хандшейк.

вот этот вот флаг  [ASSURED] тоже означает что 
для тцп конекта произошел трехсторонний хендщейк.

тепер посмотрим логи иптейлс. вплане как раз 
статуса пакетов
напимнаю праила итейлс

-A INPUT -p tcp -m tcp -m conntrack --ctstate RELATED -j LOG --log-prefix "[RELATED] "
-A INPUT -p tcp -m tcp -m conntrack --ctstate NEW -j LOG --log-prefix "[NEW] "
-A INPUT -p tcp -m tcp -m conntrack --ctstate ESTABLISHED -j LOG --log-prefix "[ESTABLISHED] "

-A OUTPUT -p tcp -m tcp -m conntrack --ctstate RELATED -j LOG --log-prefix "[RELATED] "
-A OUTPUT -p tcp -m tcp -m conntrack --ctstate NEW -j LOG --log-prefix "[NEW] "
-A OUTPUT -p tcp -m tcp -m conntrack --ctstate ESTABLISHED -j LOG --log-prefix "[ESTABLISHED] "


итак в логах я увижу

[NEW] SRC=172.16.100.1 DST=172.16.5.2 SYN  

[ESTABLISHED] SRC=172.16.5.2 DST=172.16.100.1  S ACK SYN 

[ESTABLISHED] SRC=172.16.100.1 DST=172.16.5.2  ACK 


соттсвтенно здесь видно какой коннтрак статус
имел именно пакет и именно какой него был контрак
статус. тоесть первый пакет имел коннтарк
статус [NEW] второй уже имел статус  [ESTABLISHED]
и третий пакет имел статус [ESTABLISHED]
соовтасвтенно сточки зрени тцп флагов первый
пакет был SYN , второй SYN+ACK а трейти ACK
также видно какой из них в какулю сторнону 
елетел.

так вот этот лог он подтветждает что первый пакет
полуаетс статус NEW а все сотальные уже 
ESTABLCISHED. это именно статус с тчоки зрения
системы коннтрак. ее собственная система 
оценки статуса. она неимеет отншения к протоколу
тцп как таковому. просто если первый пакет
пролетел то это NEW а все осталные это 
ESTABLSIED



соовтасвтенно сточки зрени тцп флагов первый
пакет был SYN , второй SYN+ACK а трейти ACK
также видно какой из них в какулю сторнону 
елетел.

покажу как выгдяит для icmp

всталяю правила



-A INPUT -p  icmp -m conntrack --ctstate RELATED -j LOG --log-prefix "[RELATED] "
-A INPUT -p icmp  -m conntrack --ctstate NEW -j LOG --log-prefix "[NEW] "
-A INPUT -p icmp  -m conntrack --ctstate ESTABLISHED -j LOG --log-prefix "[ESTABLISHED] "


-A OUTPUT -p  icmp -m conntrack --ctstate RELATED -j LOG --log-prefix "[RELATED] "
-A OUTPUT -p icmp  -m conntrack --ctstate NEW -j LOG --log-prefix "[NEW] "
-A OUTPUT -p icmp  -m conntrack --ctstate ESTABLISHED -j LOG --log-prefix "[ESTABLISHED] "



смотрим логи


[NEW]  SRC=172.16.5.1 DST=172.16.5.2 PROTO=ICMP TYPE=8 CODE=0 ID=47072 SEQ=1 

[ESTABLISHED SRC=172.16.5.2 DST=172.16.5.1 PROTO=ICMP TYPE=0 CODE=0 ID=47072 SEQ=1 

тоесть опять же . пакет первый это NEW 
а второй уже ESTABLISHED

вот как запись о конекте выглядит в контрак

# conntrack -E -p icmp

[NEW] icmp     1 30 src=172.16.5.1 dst=172.16.5.2 type=8 code=0 id=33712 [UNREPLIED] src=172.16.5.2 dst=172.16.5.1 type=0 code=0 id=33712

[UPDATE] icmp     1 30 src=172.16.5.1 dst=172.16.5.2 type=8 code=0 id=33712 src=172.16.5.2 dst=172.16.5.1 type=0 code=0 id=33712


понятно что с тчоки зрения icmp пртокла нет
нкиаких конектов. потому что это конект чисто
с тчоки зрения самого контрака.

вот как выглядит коннтрак конект для udp

[NEW] udp      17 30 src=127.0.0.1 dst=127.0.0.53 sport=43291 dport=53 [UNREPLIED] src=127.0.0.53 dst=127.0.0.1 sport=53 dport=43291

[UPDATE] udp      17 30 src=127.0.0.1 dst=127.0.0.53 sport=43291 dport=53 src=127.0.0.53 dst=127.0.0.1 sport=53 dport=43291


тоест с тчоки зрения udp нетнкиаких конектов.
но с тчоки зрения контрака есть!
итак строка конектат в таблице контрака это
чисто его класифичекация пакетов в группы.


теперь вот что важно! - новый конект в тадлице 
контрак будет доабвлен ТОЛЬКО если пакет будет
пропущен в таблице filter iptables. если 
пакет будет отброшер в иптбейлс то конекта в 
контрак не будет создано! это важно!

тперт посмотрим как выгдядит конект

[NEW] udp      17 30 src=127.0.0.1 dst=127.0.0.53 sport=43291 dport=53 [UNREPLIED] src=127.0.0.53 dst=127.0.0.1 sport=53 dport=43291


он имеет две части. 
первая часть

src=127.0.0.1 dst=127.0.0.53 sport=43291 dport=53

и вторая часть

src=127.0.0.53 dst=127.0.0.1 sport=53 dport=43291

значит первая часть это вид пакета самого первого
который влетел контрак (неважно снаружи из
сети  или изнутри из ядра). тоесть 
первый пакет этого конекта имел вид

src=127.0.0.1 dst=127.0.0.53 sport=43291 dport=53

из чего мы можем понять откуда данный пакет 
прелел. изнутри компа или снаружи из сети.
в даном сулчае он влеелтел изнутри.

на основе этого пакета его анализа коннтрак сам
соамтяотельно формирует вторую часть

src=127.0.0.53 dst=127.0.0.1 sport=53 dport=43291

это какой вид должен по меннению контрака 
должен иметь пакет который прилетит обратно! 
в овтетку! этот пакет еще не прилетел но коннтарк
пытается предсказать его вид! это дает то что
если имено такой пакет прилетит то для контрака
это будет не сорешенно новый пакет а ожидамеый. 
ответный. и он такой пакет пометит не как NEW 
а как ESTABLISHED. и эта штука и делает из иптбелйс
стейтфул файрволл. тоесть он умеет свзыать одни
пакеты через другие. в случае udp\tcp 
пакета легко предсзкаать отвтеный. а вот в случае
icmp уже посложнее

[NEW] icmp     1 30 src=172.16.5.1 dst=172.16.5.2 type=8 code=0 id=13049 [UNREPLIED] src=172.16.5.2 dst=172.16.5.1 type=0 code=0 id=13049



если у нас реаьный пакет первый имел type=8
то согласно ожиданиям от контаркта оарный 
пакет должен иметь другой тип! type=0
и толко такой пакет будет считаться пранадлежащим
этому конекту. тоесть ему будет присвоеее
статус ESTABLISHED

именно это и дает нам возможность пропускать
обрытные пакеты из интенена на основе правила


-A INPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT




еще раз хочу обозначить самые важные
моменты про коннтрак:
пакет влетает в ядро и первым делом он 
попдает в коннтарк подсистму. а уже потом после
нее он передатеся в иптбейблс.
коннтрак его задача присовить пакету коннтрак
статус. это все что он должен сделать. 
далее  в правилах иптблейс мы можем анализировать
эти статусы. коннтрак по любому присовоиит пакету
статус. а вот будем ли создана запись в таблице
коннтрак завсит от того - был ли даный пакет
в иттоге пропущен иптбейлсом или он был 
отброшен. если он был пропущен то коннтрак
создает запись в своей таблице.
что дает запись. если пакет влетает в коннтрак
то он ищет его парамтры в записях своей таблицы.
если пакет не подпадает под параметры в записях
то пакет получается статус NEW либо RELATED (если
он подпадает под паарметры которые лежат в 
хелпере). а если пакет подпадает под параметры
какой либо записи в таблице то коннтрак ему
дает статус ESTABLISHED. тоесть как это выглядит
с нуля.
у нас влетеле новый пакет в ядро. он попал в
коннтрак. то смотрит есть ли записи у него в 
таблице. их нет. значит он прсиваиывает 
пакету статус NEW.  далее пакет предеается
в ипбтейблс. там скажем написано что если дест
порт 21 то пакет пропусттить. в целом поулчается
мы в ипббейлс вобще насрали на статус NEW мы 
его на анализровали. но так как паакет был пропущен
то коннтрак создает в таблице запись


tcp  src=172.16.5.1 dst=172.16.5.2 sport=42948 dport=21 [UNREPLIED] src=172.16.5.2 dst=172.16.5.1 sport=21 dport=42948 helper=ftp

которая состоит из двух важных частей
в первой части указаны параетры пакета котрый
реально проетеле только что через нашу систему

src=172.16.5.1 dst=172.16.5.2  sport=42948 dport=21

а во второй части коннтрак рисует параметр
пакета который он ожидает увидеть прилетевшим
в ответ

src=172.16.5.2 dst=172.16.5.1 sport=21 dport=42948


эту вторую часть коннтрак пытается вычислить
заранее самостоятельно. в реальности этот пакет
он еще не видел. 


соовсвтенно когда у нас полетит обратный пакет
с параметрами src=172.16.5.2 dst=172.16.5.1 sport=21 dport=42948
то коннтрак найдет что его параетры входят
в состав конекта который у него уже прописан
и тогда контрак присвоит пакету статус ESTABLISHED
и данный пакет поступает  в иптбейлс фильтры.
и там мы можем уже можем это статус остледить
и пропускать пакеты если у них статус ESTABLISHED
по физ смыслу пакет ESTABLISHED означает что 
через нашу систему уже успешно до этого пролетел
пакет из этого же "конекта" и был нашим файрволлом
пропущен. а данный пакет условно говоря это уже
"ответный" пакет. поэтому его можно и нужно 
пропустить не анализируя порты и прочее. 


а вот есть еще такой модуль

  nf_nat_ftp.ko

что он делает. нахер он нужен - я пока не знаю.
осталвяю этот вопрос без ответа




вот такая кухня с этим контраком!




ссыылки:

именно вот эта статья мне помогла наконецто
завести фтп хелпер! я там тоже вставил свой
ответ
https://serverfault.com/questions/887309/iptables-nf-conntrack-ftp-not-working


conntrack мануал
https://conntrack-tools.netfilter.org/manual.html


если мы гвоорим про nft
то вот статья про работу с коннтраком в nft
https://wiki.nftables.org/wiki-nftables/index.php/Matching_connection_tracking_stateful_metainformation
но я ее не проработал

вот серия статей про коннтрак
https://thermalcircle.de/doku.php?id=blog:linux:connection_tracking_3_state_and_examples
но я ее не проработал


ипбейлс старый мануал
https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html
