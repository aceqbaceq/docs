| console
| terminal
| font
| glyph
| psftools
| screen
| display
| stty
| VT
| VT100
| VT102
| VT220


смотри вот я читаю манул про vt220 
да я знаю что ядрерный эмулятор эмулирует vt100
но теме неменее я читаю

24 rows × 80/132 columns
7 × 10 dot matrix in a 10 × 10 cell for 80 columns
7 × 10 dot matrix in a 9 × 10 cell for 132 columns

800 (horizontal) × 240 (vertical) pixels (80 columns)
1188 (horizontal) × 240 (vertical) pixels (132 columns)

смотри как понимать эти строки.
я пнял что термина может работть в двух режима
80 стобков на 24 строки либо 132 солбца на 24 строки.

возьмем режим 80c x 24r
я пытаьсь понять как он рабоает на уровне точек.
я понял что экран это 800 по ширине на 240 по высоте
так вот каждый глиф это картинка NxM точек.
причем важно еще вот что. у нас между глифами на экране нужно создаь небольшой зазор как по вертикали так и по горизоонтали. иначе соседние строки и сосдение символы будут перетиратт друг друга. насколко я понимаю в этом режиме 
экран делится на квадарты размером 10х10 прчем эти квадраты сопикрасатся друг с другом как по вертикали так и по горизотали

****************************
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
****************************
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
*        *        *        *
****************************

по горизонтали будет 80 ячеек что дает нам 800 точек
по горизонали.  
по вертикали 24 ячейки. что в точности нам дает
240 ячеек по вертикали . что нам дает 80 символов на 24 символа.

так вот как я понимаю внутри каждой такой 
ячейки глиф занимает не всю ячейку а толко 
7 по высоте и 10 по ширине. 

вот  я обозначил через * это внешнаяя ячейка 10х10
а внутри нее уже ячейка которая содержит сам глиф 7х10


**********
++++++++++
+        +
+        +
+        +
+        +
+        +
++++++++++
*        *
**********

при это возникат проблема сколько отступить сверух
толи один пикель толи два пикселя. я отступил один 
пиксель
вот для примера я нарисовал букву "Е"
плюсами показан сам глиф а звездами невидимая
ячейка вокруг него.

**********
++++++++++
+        
++++      
++++      
+        
+        
++++++++++
*        *
**********

при такой конфигацрии макс размер глифа это 7х10 точек

при такой конфигуации унас глифы не будут пертирать
друг друга в соседних строках но будут перетирать
немного друг друга в соседних ячейках в одной строке.
а если я этого не хочу то мой глиф должен по горизон
тали занимать 8 точек тоесть быть 7х8 
вот так


**********
*++++++++*
*+       *
*++++    *
*++++    *
*+       *
*+       *
*++++++++*
*        *
**********

ттгда небудет затирания ни горизонтали ни по 
вертикали


*******************
*++++++++*++++++++*
*+       *+       *
*++++    *++++    *
*++++    *++++    *
*+       *+       *
*+       *+       *
*++++++++*++++++++*
*        *        *
*******************
*++++++++*++++++++*
*+       *+       *
*++++    *++++    *
*++++    *++++    *
*+       *+       *
*+       *+       *
*++++++++*++++++++*
*        *        *
*******************

если убрать невидимые точки внешней ячейки 
то на экране это будет выглядеть вот так


 ++++++++ ++++++++ 
 +        +       
 ++++     ++++    
 ++++     ++++    
 +        +       
 +        +       
 ++++++++ ++++++++
        

 ++++++++ ++++++++
 +        +       
 ++++     ++++    
 ++++     ++++    
 +        +       
 +        +       
 ++++++++ ++++++++

то есть вот четко видно что у нас нет затирания
сиволов ни в одной строке ни в соседниих


таким образом я что хотел показать.
если у нас экран рабоатет в режиме 24х80
то макс размер одного глифа может занмиать 7х10
но при таком размере у нас будут частично затирать
символы соседние в одной строке. а если я ъочу чтобы
у меня небыло затираний то нужно использовать
глифы 7х8  . формально они по прежнему будут 7х10
но активированные точки будут в пределах 7х8
вот пример 
сам глиф 7х10
но в нем активированные точки сидят внутри
7х8
нулями я указал выключенные точки
а плючами включенные


0++++++++0
0+00000000
0++++00000
0++++00000
0+00000000
0+00000000
0++++++++0


таким образом еще раз. 
если термнал радотает в режиме 24х80 то ему подходит
шрифт в котором размер глифа формально 7х10
но по факту внутри точки должны не выходить за клетку
размером 7х8 чтобы небыло затираний на экране.


тепер к режиму

24 rows × 132 columns
7 × 10 dot matrix in a 9 × 10 cell for 132 columns

1188 (horizontal) × 240 (vertical) pixels (132 columns)

по вертикали у нас одна ячейка это 9 точек 
и по горизотали 10 точек


**********
*        *
*        *
*        *
*        *
*        *
*        *
*        *
**********

по идее при горионтальном размере экрана 1188 точек
это бы нам даавало возомжность для размещение
в одной строке 118 ячеек но создатели терминала
ограничили размер строки на 113 ячеек. видимо они 
просто сделаи отступ слева и справа на экране 
1188-1130=53 точки. скажем отсупили 26 точек слева
и 27 точек справа. такая мертвая зона.

при верт размере ячейки 9 точек это нам дает 
в теории возможность для размещения 26 ячеек
друг на другом но создатели огранили до 24 ячеек.
итак при размере экрана 1188  × 240 у нас по факту
используется 1130 х 240 точек

внутри ячейки 9х10 у нас содержится ячейка с глифом 
размером 7х10
тоесть размер глифа в этом режиме остался такой же
самый как он был в режиме 800х240 но отличие втом
что глиф сидит внутри ячейки более симетрично. 
он от верхней части ячейки и от нижней имеет симметр
ичный отступ 1 пикесель. 
показываю

вот как выглядит размешение области глифа внутри
ячейки в режиме 1188х240


**********
++++++++++
+        +
+        +
+        +
+        +
+        +
++++++++++
**********

а вот для срарвения как выглядит размеение глифа
внутри ячейки в режиме 800х240

**********
++++++++++
+        +
+        +
+        +
+        +
+        +
++++++++++
*        *
**********

что на мой взгя приводит к тому что в режиме 1188х240
визуально расстояние между глифами на экране будет
меньше. тоесть оно будет выглядеть более плотно.


вот как выглядит взаимное расположение глифов 
в режиме 800х240

*******************
*++++++++*++++++++*
*+       *+       *
*++++    *++++    *
*++++    *++++    *
*+       *+       *
*+       *+       *
*++++++++*++++++++*
*        *        *
*******************
*++++++++*++++++++*
*+       *+       *
*++++    *++++    *
*++++    *++++    *
*+       *+       *
*+       *+       *
*++++++++*++++++++*
*        *        *
*******************



а вот как оно будет выгдяеть по мне в режиме 1188х240


*******************
*++++++++*++++++++*
*+       *+       *
*++++    *++++    *
*++++    *++++    *
*+       *+       *
*+       *+       *
*++++++++*++++++++*
*******************
*++++++++*++++++++*
*+       *+       *
*++++    *++++    *
*++++    *++++    *
*+       *+       *
*+       *+       *
*++++++++*++++++++*
*        *        *
*******************


насколко я понмаю шрифт который использвался на терминале в обоих режимах требовал чтобы размер одного глифа в шрифте был 7х10 пикселей. 



насколко я понимаю визуально для глаз режим 800х240 оличаться от 1188х240 тем что сами пиксели были БОЛЬШЕ по размеру. потому что физически рзмер дисплея
оставляс тот же самый. менялось лишь маппинг между
куском физ пространства на дисплее в логический
пиксель.
условного говоря в режиме 1188х240 один пиксель на экране выглядел вот так

*

а врежиме 800х240 один пиксель на экране выгдядел вот так

**
тоесть пиксель был более вытянут по горизонтали чисто визуально

поэтому условно говория в режиме 1188х240 буква Е выгляела как

 ++++++++  
 +              
 ++++        
 ++++        
 +              
 +              
 ++++++++ 
 
а в режиме 800х240 букве Е визуально выглядела вот так


 ++++++++++++++++  
 ++              
 ++++++++        
 ++++++++        
 ++              
 ++              
 ++++++++++++++++ 


оно и понято по врертикали ничего не меняется. а
по горизонтали мы одну и туже длинну мапим в разное
колиетво точек условно говоря отрезков. поэтому
меняется длина отрезка то есть горизонатльная длина
логического пикселя.

поэтому в обих случаях у нас шрифт имеет одинаковые
в пикслеях глифы но в режиме 800х240 буквы визуально
становиились более ШИРЕ. а при перкключении в режим
1188х240 у нас та же самая буква становилась УЖЕ.



теперь перейдем к эмулятору терминала который в
ядре.

можно поменять число строк столбцов
через 


  # stty --file=/dev/tty2 cols N rows M


но он зависает порой если число меньше минимального
штатного для терминала режима 80 столбцов на 24 строки
он зависает. я его еле отвис. через 

  # reset >/dev/tty2 </dev/tty2
  # tput reset >/dev/tty2 </dev/tty2


если у нас физ терминал имел всего два режиме
80х24
113х24

то наш ядерный терминал имеет дохера режимов.
дело вот вчем. физ терминал исипользовал всю поверх
ность дисплея мапя ее в разное число точек. а точнее
мапя ее в два режима точек
80х24
113х24

так вот яденый терминал работает совсем по другому.
размер точки осатется в точности одинаковый для лю
бого режима. при имзееннеиии режима меяется только 
то что у нас визуаьно используется либо бОльше 
пространства на дисплеее либо меьше. тоесть
визуаьный размер символа неменется. менсятся 
лишь то скокьо символвов теперь встроке либо в 
столбце тоесть в режиме 

80х24

у меня буде

ЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕ - 80 букв в строке
Е
Е
Е
Е
Е
Е
Е
и 24 буквы столбце.

если поставлю режим 113х24
то у меня будет 24 буквы в столбце и 113 букв 
в строке. разница в двух режимов виуалльно будет
выгдять вот так  ( окантовка показывает размер
физ дисплея)

режим 6х3
_________________________________
|ЕЕЕЕЕЕ                          |
|ЕЕЕЕЕЕ                          | 
|ЕЕЕЕЕЕ                          |
|                                |
|                                |
|________________________________|
 

режим 3х3
__________________________________
|ЕЕЕ                             |
|ЕЕЕ                             | 
|ЕЕЕ                             |
|                                |
|                                |
|________________________________|
 

тоесть если физ термиал растяигивает либо 
сжимает картинку натяигивая ее на полную площадь
физ дисплея. то ядерный терминал так совсем не делает.
у него размер пикселя одинаовый во всех режимх.
поэтому размер глифа одинаковый на всех режимах.
и каждый режим отичатеся тем сколько % от площади
экрана занимает "экран" терминала.

это нам дает то что ядерный терминал поддерживает
дохрена режимов. начиная от в теории 1х1 символ
до ???? щас будем выяснять.
и тут важно вот что. во первых это завсиит от 
размера видеорежима текущего в пикселях.
во вторых это зависит от размера глифа в шрифте 
который щас загржуен в драйвер этого терминаала!
если сижу в граф режиме и перкключаюсь в текст 
косноль Ctrl+Alt+F2 то ядро начинает использовать
драйвер экрана FRAMEBUFFER и можно в этот момент
узнать разршенеи через 

 $ sudo fbset

mode "1920x1080"
    geometry 1920 1080 1920 1080 32
    timings 0 0 0 0 0 0 0
    rgba 8/16,8/8,8/0,0/0
endmode

ксати узнать текущее разощешение в граф режиме
можно через 

 # xrandr


из чего я выяснил что при перкючении из граф режима
(X server) в тектосвую косноль ядро неменяет разршение
на видеокарте. оно у меня как было так и есть "1920x1080"

возможно сидя в текст косносли можно через fbset 
поменять налету разрешение на какоето другое. но
хрени с ним я оставлю как есть.
итак мое разершение в консоли это 1920х1080
размер глифа в шрифте котоыйр загружен в косооль
эту равен 8х8 пикслелей. как это проверить.
во первых название шрифта

$ ls /usr/share/kbd/consolefonts/Cyr_a8x8.psfu.gz

во вторых можно вскрыть этот шоифт и уедиться
в этом глазами

 $ gunzip Cyr_a8x8.psfu.gz 
 $ psf2txt Cyr_a8x8.psfu  > Cyr_a8x8.txt


$ head -n30 Cyr_a8x8.txt 
%PSF2
Version: 0
Flags: 1
Length: 256
Width: 8
Height: 8
%
// Character 0
Bitmap: -------- \
        -------- \
        -------- \
        -------- \
        -------- \
        -------- \
        -------- \
        --------
Unicode: [0000fffd];


вот видно что 8х8


так вот драйвер темринала он автоматом пыатеся
подобрать такой режим (колонки х строки) чтобы 
глифами текущего шрифта маскимльно можно было запол
нить вест физ экран.
для шрифта 8х8 дарайвер терминала устанвливает
режим 240x135

$ sudo stty --file=/dev/tty2 -a | grep rows
speed 38400 baud; rows 135; columns 240; line = 0;

для напомню экрана  1920x1080 

интересно как выглядят активаированные точки
внутри глифа
вот для цифры

Bitmap: -#####-- \
        ##--###- \
        ##-####- \
        ####-##- \
        ###--##- \
        ###--##- \
        -#####-- \
        --------

мы видим что внизу оставлена пустая строчка и справа
тоже. 
а вот еще цифра
Bitmap: -#####-- \
        ##---##- \
        -----##- \
        ----##-- \
        --##---- \
        -##----- \
        #######- \
        --------

а вот буква
Bitmap: -#####-- \
        ##---##- \
        ##---##- \
        #######- \
        ##---##- \
        ##---##- \
        ##---##- \
        --------

суть получается я думаю в чем. в том что в физ терми
нале там защита от перетирования символами друг друга
соседей в одной строке или соседей из разных строк
обеспечена тем что глиф заключен снаружи в CELL
(то что я рассматривал выше) поэтому так как глиф
меньше чем CELL то символы небудут гарнтированно
перетирвать друг друга.  яедерный терминал как я пони
маю по крайней мере что касается размещения глифов
в одной строке никакой внешей CELL вокруг них не создает поэтому условно говоря глифы шириной 8 точек
8x8 = 240x135 (шир х выс)

дальше я выяснил вот что. беру болванку шрифта,
тоесть конвертррую psf шрфит в его txt вид

  $ psf2txt name.psf > name.txt

уменьшаю число глифов  в этом фаайле
и обратно превращаю в psf файл

  $ txt2psf  name.txt > name.psf
далее скармилвают ядру
  # setfont -C /dev/tty2 ./name.psf 

ТАК ВОТ! если у нас шрифт имеет ширину 8 пикселей
то я могу умньшить число глифов в наборе вплоть до 
ОДНОГО и ядро успешно его всосет! никаких ошибок!
а если у нас глифы имеют ширину оличную от 8 пиксеей
то ядро требует чтобы в наборе было минимум 256 
глифов! иначе setfont пошлет нахер. один из ioctl()
вернет ошибку.

еще - при загрузке шрифта его можно прпороить ядро
увелчиить в 2 раза. но невсе шрифты так можно
вот я беру шрифт 16х32 и он ругается

# setfont -C /dev/tty2 ./ter-v32n-mod.psf  -d
setfont: ERROR setfont.c:72 do_loadfont: Cannot double 16x32 font (limit is 16x16)


(!!) Есть такой момент - при загрузке в драйвер 
терминала он использует ГЛИФ с номером 32(dec)
или 0x20 hex для того чтобы ЗАПОЛНИТЬ ФОН терминала!
неважно какйо при этом маппинг на юникод поинт 
стоит в этом файле (если конечно в  этом файле есть
юникод маппинг), его это вобще не волнует! вот 
какой глиф будет стоять на 32-м месте в файле такой
он будет использовать для заднено фона всего термина
ла!!! если у нас глифы имеют ширину 8-бит то как 
я уже сказал то в этом случае файл шрифта не обязан
иметь 256 или 512 символов и вэтом случае елси глфиов
мало и нет глифа с номером поркдовым 32 то тогда
дрйавер терминала будет юзать черный фон на заднем
фоне. если 32-йы глиф не выглядит как черный квадрат
то setfont напшиет что для заденнго фона мол 
будет прмиенен стреныйн глиф который не черный квадрат. это все большой прикол!

физ экран 1920х1080
размер глифа 
   Width: 48
   Height: 50

в итоге  у меня на экране умещается глифов
----> 40
|
|
\/
21 

посмтрим что stty покажет
 $ sudo stty --file=/dev/tty2 -a
 rows 21; columns 40; 

показал тоже самое.

1920/48=40 делится нацело. что мы и увидели. 
по горизонтали влезло 40 глифов. причем под завязку
на правой стороне экрана.

1080/50=21.6
что визуальано и видно. 21 глиф по вертикали влезает
и еще внизу чуть остается хвостик.


у меня при нажатии на F печатается глиф который не
имеет никаких ВЫКЛлюченных пикселей по каемке.

Bitmap: ################################################ \
        ###############################################- \
        ###############################################- \
        ################################################ \
        ###-----------------------------------------#### \
        ###-----------------------------------------#### \
        ###------------------------------------------### \
        ###------------------------------------------### \
        ###------------------------------------------### \
        ###------------------------------------------### \
        ###-----------------------------------------#### \
        ###----------------------------------------##--# \
        ###---------------------------------------#----# \
        ###--------------------------------------------# \
        ###--------------------------------------------# \
        ###--------------------------------------------# \
        ###--------------------------------------------# \
        ###--------------------------------------------# \
        ###--------------------------------------------# \
        ####------------------#------------------------# \
        #####---------------##-------------------------# \
        #######------------###-------------------------# \
        ######################-------------------------# \
        ######################-------------------------# \
        ######################-------------------------# \
        ######################-------------------------# \
        ######################-------------------------# \
        ######################-------------------------# \
        ######-------------###-------------------------# \
        #####---------------##-------------------------# \
        ####-----------------#-------------------------# \
        ###--------------------------------------------# \
        ###--------------------------------------------# \
        ###--------------------------------------------# \
        ###---------------------------------------#----# \
        ###----------------------------------------##--# \
        ###-----------------------------------------#### \
        ###------------------------------------------### \
        ###------------------------------------------### \
        ###------------------------------------------### \
        ###------------------------------------------### \
        ###------------------------------------------### \
        ###------------------------------------------### \
        ###-----------------------------------------#### \
        ###---------------------------------------###### \
        ###-------------------------------------######## \
        ################################################ \
        ################################################ \
        ################################################ \
        ################################################



 и на
экране видно что эти глифы неимеют просветов ни когда
они стоят ряядом в строке ни когда они друг над другом
в соседних строках. 




при нажатии на E у меня вылезает глиф который имеет
по своей окантовке 1 пиксель ВЫКЛеченный по толщине
по всей окаемке

Bitmap: ------------------------------------------------ \
        -##############################################- \
        -##############################################- \
        -##############################################- \
        -##-----------------------------------------###- \
        -##-----------------------------------------###- \
        -##------------------------------------------##- \
        -##------------------------------------------##- \
        -##------------------------------------------##- \
        -##------------------------------------------##- \
        -##-----------------------------------------###- \
        -##----------------------------------------##--- \
        -##---------------------------------------#----- \
        -##--------------------------------------------- \
        -##--------------------------------------------- \
        -##--------------------------------------------- \
        -##--------------------------------------------- \
        -##--------------------------------------------- \
        -##--------------------------------------------- \
        -###------------------#------------------------- \
        -####---------------##-------------------------- \
        -######------------###-------------------------- \
        -#####################-------------------------- \
        -#####################-------------------------- \
        -#####################-------------------------- \
        -#####################-------------------------- \
        -#####################-------------------------- \
        -#####################-------------------------- \
        -#####-------------###-------------------------- \
        -####---------------##-------------------------- \
        -###-----------------#-------------------------- \
        -##--------------------------------------------- \
        -##--------------------------------------------- \
        -##--------------------------------------------- \
        -##---------------------------------------#----- \
        -##----------------------------------------##--- \
        -##-----------------------------------------###- \
        -##------------------------------------------##- \
        -##------------------------------------------##- \
        -##------------------------------------------##- \
        -##------------------------------------------##- \
        -##------------------------------------------##- \
        -##------------------------------------------##- \
        -##-----------------------------------------###- \
        -##---------------------------------------#####- \
        -##-------------------------------------#######- \
        -##############################################- \
        -##############################################- \
        -##############################################- \
        ------------------------------------------------

так вот если ставлю эти два глифа в одной стоке то
видно чо между ними пояялется зазор из 2 пикселей.
почему два? потом что один пиксель от правой части 
одного глифа а второй пикслеь от левой части друггго
пиксела. тожесамое если глифы стоят друг над другом!

ИЗЧЕГО я делаю вывод что драйвер терминала он никакой
доп CELL вокруг глифов не делает как это делал физ
терминал! драйвер терминала тупо берет глиф и рисует
на экране! поэтому они примыкают друг к другу непоср
едственно! без каких либо доп зазоров со стороны
драйвера терминала. они друг друга не затиарают. нет.
но между ними не будет просвета если мы в глифе сами
не оставим просвет из выклюенных пикселей по окантовке.
таким образом слегка пожертвоовав размером видимой 
части символа.

тоесть рисуя глиф в составе шрифта чтобы потом его
сунуть на драйвер терминала можно небояться что
соседний глиф у нас немножко потрет соседний глиф
этоо не будет. вот как это схематично будет
выглядеть. если у нас глиф имеет вид

  +++++
  +   +
  +   +
  +++++

то когда мы их напечатаем два рядом то они будут
стоять вот так

  ++++++++++
  +   ++   +
  +   ++   +
  ++++++++++
  ++++++++++
  +   ++   +
  +   ++   +
  ++++++++++


тоесть они незатирают друг друга но между ними 
единсвтенное что не будет просвета. у меня на схеме
просвет между строками только потму что текстоый
редактор непозвяолет строки делать вплотную.

то есть вот так вот. меня интерсовала создет ли 
дрйавер терминала просвет между глифами. но нет.
он его не создает. и также он незатирает краешком
глифа другой глиф.

а теперь для сраврния я еще раз наомню как рисует глифы
на экране физ терминал. он экран как бы заполняет
штуками CELL. они невидимые. 
в режиме 80 столбцов на 24 строки. 
тоесть 800точек х 240 точек
он  на экране как бы всталяет невидимые 
CELL 10х10 точек и прикол втом что он эти CELL
лепит и по горизонтали по верткали ВНАХЛЕСТ!

*******************
*        *        *
*        *        *
*        *        *
*        *        *
*        *        *
*        *        *
*        *        *
*        *        *
*******************
*        *        *
*        *        *
*        *        *
*        *        *
*        *        *
*        *        *
*        *        *
*        *        *
*******************

ну и что??!?!?
А ТО ЧТО глиф он рисует внутри этой CELL
глиф имеет размером 10x7 точек
10 ширина и 7 высота.  

вот как глиф суется внутри каждой CELL


**********
++++++++++
+        +
+        +
+        +
+        +
+        +
++++++++++
*        *
**********

так как по верткали CELL имет размер 10 точек
а размер глифа по верткиа 7 точек то неизвестно
точно как он ровняет глиф внутри целл по верткали.
он должен отступить от верхенго края либо один
пиксель тодга снизу будет два .либо сверху отсвтует
два тога снизу один. 
на картинке   я сверху остутил один пиксель.
это дает то что если глиф у нас целиком ссотоит
из включенных точек тоест белый прямоугольник то
символы стоящие друг на другом  в соседних строках
затират друг дргуга не будут!!
НО!!! так как ширина глифа равна 10 и ширина целл
равна 10 и он эти целлы ставит на экране внахлест
то если у нас глиф слева и справа имеет влюенные точки
то глифы стоязие в одном ряду по седстсву будут на
один пиксель затирать друг друга!! поэтому в
шрифтах обычно как миниус с одной стороны слева 
ил спава остлавляб один вертикальный пиксель.
показываю

 $ cat lat9u-08.txt  | grep 0033 -A10
Unicode: [00000033];
%
// Character 52
Bitmap: ---###-- \
        --####-- \
        -##-##-- \
        ##--##-- \
        #######- \
        ----##-- \
        ---####- \
        --------


вот! так как мы точно знаем что сверху и снизу
физ терминал добавит промежуток то на верхней линии
глифа и на нижней мы можем спокойно зажгать точки.
хотя они на ниней перстраховались и выключили.
а вот что касается слева и справа как я сказал
физ терминал (именно физ терминал! а не виртуальный
термиа линукса. у него проблем с этим нет) внахлест
всталяет глиф по горизонтали. поэтому српава они 
оставли вертикальную линию пустую! чтобы незатирать
символ стоящий справа на один пиксель!


И в свете сказанного я щас даю суперценный материал.
ядро до 2024 года позволяло совать глифы размером
максимум 32х32 пикселя. и в 2024 они докрутили 
и тепер можно совать в ядро глифы размером
64х128 пикслеелй.
64 это ширина. 128 это высота. 
я нашел инфо об этом  вот злест

	https://www.phoronix.com/news/Linux-6.9-Larger-FBCON-Fonts

и вот здесь

  https://manpages.opensuse.org/Tumbleweed/consoleet-utils/vfontas.1.en.html

цитирую
The fbdev driver in the Linux kernel accepts 
console font glyphs of at most 32x32 in size. 
Starting with commit 152609795dbf [expected to 
be included in Linux 6.9-rc2], the limit is 64x128.

тоесть 64 это именно ширина и 128 это высота.

к сожаению готовые .psf  ширифты они идут в пакетах
макимум 24х32 чтото в этом роде. а хочется
посмтреть на счет зазоров на примерер больших
глифов. тогда я вот что придумал.
как я уже писал выше можно взять готовый psf 
шрифт прерврить его в текстовый файл

  # psf2txt  name.psf

отредактировать его перериросваав там руками
глифы на размер большего размера.
обратно превратить в psf и сунуть в ядро

  # txt2psf  name.txt
  # setfont -C /dev/tty2  name.psf

однако! в чем проблема. в том что если я суюу
в ядро шрифт с глифами шириной 8 писклей то тога
мой шритфт может стсооять даже из всего одного 
глифа!! а если я пытассь сунуть в ядро шритф 
где глиф имеет размер боьше 8 пикслей то ядро
откажется принимать шриф если в нем нет по креней
мере 256 глифов! а перерисвать по бстрому 256
гифов это не вариант!
поэтому план такой - берем векторый шрифт. 
перращваем его в растровый. нужного размера. 
и потом его конвертиим в psf который тоже растровый
но самый примтивный. тогда можно бует в консоли
наслдаиться глифами большого размера.
как это надо сделать. а вот такк
нам нужен ккойнибудь векторный .otf шрифт.
(otf это значит freetype ttf)

и нам его надо преврартиь в .bdf (bdf это растровый
шрифт BDF Bitmap Distribution Format преаназнченый 
для X сервера)

спрашиваетс нахрен на bdf . потому что напрямую 
прерваить .OTF в .PSF нет такой утилииыты!

итак прервщааем OTF ---> BDF

 $ otf2bdf -r 100 -p 36 -c M ./FreeMono.otf | sed -e "s/AVERAGE_WIDTH.*/AVERAGE_WIDTH 480/" > inconsolata-12.bdf

что значат здесь цифры.
-r 100   
  это dpi монитора. на что он влияет не знаю
-p 36
  это желаей размер глифа
-c M
  это укзаывает что глиф будет одинаковый по ширне
  и высоте. по факту этот параметр потом в PSF 
  файл нина что не влияет. мы легко можем получить
  в psf файле глиф неквадртаный

причем нам обяталеьно нужно bdf файл обработать седом
чтобы все строки с AVERAGE_WIDTH имели непустое
значение. потому что слеующая утилита неможет без 
этого работать. 
следующая утилита первращает BDF ---> PSF

AVERAGE_WIDTH 480 
   в psf файле который мы получим потом цифра 480
   даст то что ширина глифа будет 48 пикселей

-p 36 она влияет на высоту будушего в psf файле
глифа. сколко точно будет высота глифа - незисвенино
надо менять это число и смореть что полчается.


 $ bdf2psf --fb  inconsolata-12.bdf   /usr/share/bdf2psf/standard.equivalents  /usr/share/bdf2psf/ascii.set+   256 FreeMono.psf 


я не стал разибиартся что значат ее парамтеры ибо 
это какая то мура. знаю только что 256 это
сколко глифов в итоге у нас будет в PSF файле.
можно поставит 512

так вот если в bdf файле будут пустые AVERAGE_WIDTH
то bdf2psf вылетит с ошибкой 

	bdf2psf: Inconsolata12.bdf: the width is not integer number.


поэтому там и идет обработка bdf через sed


по идее наш PSF файл готов. 
его можно ракрыть и убедиться сколько символов
мы получили. и какой их гео размер.

  $ psf2txt FreeMono.psf > FreeMono.txt

у меня получилось вот так

# head FreeMono.txt 
%PSF2
Version: 0
Flags: 1
Length: 256
Width: 48
Height: 50
%
...
...

тоесть размер глифа вышел в итоге 48x50
где 48 это в точности AVERAGE_WIDTH 480  поделить
на 10. 
а 50 это цифра пропорциоанлая -p 36

есои на чтот редактиуреуем. и обратно пеероздаем
psf 


  $ txt2psf FreeMono.txt > FreeMono.psf

суем этот файл в драйвер термиала


   # setfont -C /dev/tty2  FreeMono.psf

и насадждаемся. 
я откорктировал "E" и 'F' загланвые.
файл можно найти в git репо.


на счет полезных комбианци на терминале
  

  ESC c   
    очимттить экран от символов

  ESC # 8
    заполнит весь экран символом 'E'


вот такая история с глифами их размерами.
и все такое.

драйвер терминала как я понмаю у него точка 0.0
на экране это левый верхний угол. тесть вот так


0.0 
*--------------------------------------->
|
|
|
|
|
\/

як  тому что если глифы както кратно не влезают
в физ дислей то это будет выглять вот так


0.0 
*--------------------------->
|EEEEEEEEEEEEEEEEEEEEEEE
|EEEEEEEEEEEEEEEEEEEEEEE
|EEEEEEEEEEEEEEEEEEEEEEE
|EEEEEEEEEEEEEEEEEEEEEEE
|
\/

тоесть будут оставться черный кусок справ 
и снизу.

это легко проверить если задать размер 
терминала поменьше. тоесть

 #stty --file=/dev/tty2 cols 10 rows 10 

и сразу танет все поняно.

  
  