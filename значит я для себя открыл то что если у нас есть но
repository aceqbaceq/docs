значит я для себя открыл то что если у нас есть новый pid namespace
это нам никак не мешает пробросить между процессами в разных pid 
немспессах pipe аноимный.
логика такая. берем наш парент процесс. создаем в нем пару пайпов.
потом клоиниурем новый процсс в новый пид нейспейс. нам в целом похеру.
потому что да в новом пид нейсмейсе не будет других прцоссов но нащ то
вторй процесс будет! причем у него будут открытвы в точности все те 
файл десрипторы fd которые открыты  у парента! поэтому у чайлда есть та же 
пара пайп файлов. далее все стандартно. нужно скажем на паренте закрыть 
конец 0 а на чайлде закрыть конец 1. и вуаля  у нас  между процессами
есть интерконнет связь в одну сторону!
я проерил все рабтаеь. за основу взял этот файл


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main(void)
{
        int     fd[2], nbytes;
        pid_t   childpid;
        char    string[] = "Hello, world!\n";
        char    readbuffer[80];

        pipe(fd);
        
        if((childpid = fork()) == -1)
        {
                perror("fork");
                exit(1);
        }

        if(childpid == 0)
        {
                /* Child process closes up input side of pipe */
                close(fd[0]);

                /* Send "string" through the output side of pipe */
                write(fd[1], string, (strlen(string)+1));
                exit(0);
        }
        else
        {
                /* Parent process closes up output side of pipe */
                close(fd[1]);

                /* Read in a string from the pipe */
                nbytes = read(fd[0], readbuffer, sizeof(readbuffer));
                printf("Received string: %s", readbuffer);
        }
        
        return(0);
}



вырезал из него что надо 
и в итоге вставил в другой файл 
и вот резульата


/* pidns_init_sleep.c

   Copyright 2013, Michael Kerrisk
   Licensed under GNU General Public License v2 or later

   A simple demonstration of PID namespaces.
*/
#define _GNU_SOURCE
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <sys/mount.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <signal.h>
#include <stdio.h>





/* A simple error-handling function: print an error message based
   on the value in 'errno' and terminate the calling process */



    pid_t child_pid;
    int finished = 0;

        int     fd[2], nbytes;
        char    string[] = "Hello, world!\n";
        char    readbuffer[80];





void zombie_hunter(int sig)
    {
    int status;
    wait(&status);
    printf ("got  SIGCHLD \n");
    printf("parent: Got status %d from child\n",status);

    }



void kill_child(int sig)
    {

     printf("parent: SIGINT is catched \n" );
      int sigk = 9;
      kill(child_pid, sigk);
     finished = 1;

    }


void sigt (int sig)
    {
    pid_t p2 = getpid();
    printf ("pid=l%d, got  SIGTERM ... shutdown\n", p2);
    exit(0);

    }




#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \
                        } while (0)


static int              /* Start function for cloned child */
childFunc(void *arg)
{


    printf("child  PID  = %ld\n", (long) getpid());
    printf("child PPID = %ld\n", (long) getppid());


               /* Child process closes up input side of pipe */
                close(fd[0]);

                /* Send "string" through the output side of pipe */
                write(fd[1], string, (strlen(string)+1));


    int mnt1;


    mnt1 = mount("none", "/", NULL, MS_REC|MS_PRIVATE, NULL);
    if (mnt1 == -1)
    errExit("mount");



    mnt1 = mount("none", "/proc", NULL, MS_REC|MS_PRIVATE, NULL);
    if (mnt1 == -1)
    errExit("mount");



    mnt1 = umount("/proc");
    if (mnt1 == -1)
    errExit("umount");


    mnt1 =  mount("proc", "/proc", "proc", MS_NOSUID|MS_NODEV|MS_NOEXEC, NULL);
    if (mnt1 == -1)
    errExit("mount");






   char* argv[] = { "sleep", "1200", NULL };
   char* envp[] = { NULL };
   if (execve("/bin/sleep", argv, envp) == -1)
    perror("Could not execve");
   return 1;

   exit(EXIT_SUCCESS);
}


#define STACK_SIZE (1024 * 1024)

static char child_stack[STACK_SIZE];    /* Space for child's stack */





int
main(int argc, char *argv[])
{

    signal(SIGCHLD,zombie_hunter);
    signal(SIGINT, kill_child);
    signal(SIGTERM,sigt);


        pipe(fd);




    printf("parent  PID  = %ld\n", (long) getpid());



    child_pid = clone(childFunc,
                    child_stack + STACK_SIZE,   /* Points to start of
                                                   downwardly growing stack */
                    CLONE_NEWPID|CLONE_NEWNS|SIGCHLD, argv[1]);

    if (child_pid == -1)
        errExit("clone");

    printf("PID returned by clone(): %ld\n", (long) child_pid);

//    if (waitpid(child_pid, NULL, 0) == -1)      /* Wait for child */
//        errExit("waitpid");


               /* Parent process closes up output side of pipe */
                close(fd[1]);

                /* Read in a string from the pipe */
                nbytes = read(fd[0], readbuffer, sizeof(readbuffer));
                printf("Received string: %s", readbuffer);




  while(!finished)
        {
        //printf("parent:i am running...\n");
        sleep(20);
        }



    exit(EXIT_SUCCESS);
}






gcc -o pipe.exe pipe.c

C# ./pipe.exe 
parent  PID  = 4041
PID returned by clone(): 4042
child  PID  = 1
child PPID = 0
Received string: Hello, world!


доказательство того что пайпы сработали -  чайлд шлет паренту строчку Received string: Hello, world!
видим на экране.

также вот fd этих процессов

root@docker1:~# ls -1al /proc/4041/fd
total 0
dr-x------ 2 root root  0 Apr 26 23:28 .
dr-xr-xr-x 9 root root  0 Apr 26 23:28 ..
lrwx------ 1 root root 64 Apr 26 23:28 0 -> /dev/pts/4
lrwx------ 1 root root 64 Apr 26 23:28 1 -> /dev/pts/4
lrwx------ 1 root root 64 Apr 26 23:28 2 -> /dev/pts/4
lr-x------ 1 root root 64 Apr 26 23:28 3 -> 'pipe:[28947]'
root@docker1:~# 
root@docker1:~# ls -1al /proc/4042/fd
total 0
dr-x------ 2 root root  0 Apr 26 23:28 .
dr-xr-xr-x 9 root root  0 Apr 26 23:28 ..
lrwx------ 1 root root 64 Apr 26 23:28 0 -> /dev/pts/4
lrwx------ 1 root root 64 Apr 26 23:28 1 -> /dev/pts/4
lrwx------ 1 root root 64 Apr 26 23:28 2 -> /dev/pts/4
l-wx------ 1 root root 64 Apr 26 23:28 4 -> 'pipe:[28947]'
 
