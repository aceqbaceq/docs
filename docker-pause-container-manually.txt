докер сдеать под с пауз контейнеро руккми 

поехали
docker pull registry.k8s.io/pause:3.6 
docker create -t --name=pause1 --restart=always --net=bridge  registry.k8s.io/pause:3.6
docker start pause1

ключ -t нужен потому что без него для некотоых программ происходит то что процесс 
плюет инфо на stdiut но нихрена вдокере ничего не видно ни в ataach нив logs!
а с влючеом -t все видно!

как убт конейтенр. можно найти его pid через
docker top c1
или 
docker inspect c1 | grep -i pid

а потом 

kill -SIGKILL $pid

или чтобы не искать pid вот так

docker kill --signal SIGKILL pause1

далее что я обанружил. 
если я конененер грохаю чреез

kill -SIGNAL* pid
то докер этот контейнер АВТОМАТОМ перезапускает (при увсловии что мы его создали
с флагом --restart always) а если контенер грохать чреез
docekr kill -SIGNAL* 
то докер контейнер НЕРЕСАТУРУТЕ ! даже если стоит --ploicy=always!!!!
ксатти ссылка про разные другие полиси = https://docs.docker.com/config/containers/start-containers-automatically/#restart-policy-details
кстати контейнер исчттается что он успешно стартунул если он прорабтал 10с хотя бы

ксати после того как мы создали конейнер то у него можно откоректировать 
только чуть чуть парраметров. в осгновом про цпу лимиты и вот такое

 -m, --memory bytes               Memory limit
      --memory-reservation bytes   Memory soft limit
      --memory-swap bytes          Swap limit equal to memory plus swap: -1 to enable unlimited swap
      --pids-limit int             Tune container pids limit (set -1 for unlimited)
      --restart string             Restart policy to apply when a container exits

осталное уже не имзеить!



так вот я возвразащаст к основной теме - что итерсно. вот мы застопили контенер
либо щтатно через docker stop что пофакту аналогично docekr kill -SIGTERM 
либо через kill
так вот что делает докер - файл который отечает за сетеой неймсейс ранится в 

	ls -1 /var/run/docker/netns

так вот докер сохрнаяет файл отечтственный за сетевой немспейс! тоесть докеруничего не
ещает создать новый процесс на том же сетеовом неймспейсе!!! но! он создает нрвый процесс
на новом сетевом нейспейсе! почему? не знаю. старый файл он сохраняет! а точнее 
если два раза застовить то он сохоаняет два преддыдущих файла сетвых неймспйеса !
и только потом он их удалет! почему так не знаю! итого - если процесс контйенера
остановится то при старте докер подимает новый пройесс в НОВОМ СЕТЕВОМ НЕЙМСПЙЕСЕ!
у контейнера схрнатяся только его ID и IP!
а это значит что если ест друной конейтненер который создавался в нейспйесе
сеетевом первого контейнера - окажется без сети!
провверю каие неймпейсы сохарнсяются у процесса при стоп\старт

root@docker1:~/docker# docker inspect pause1 | grep \Pid
            "Pid": 28796,
            "PidMode": "",
            "PidsLimit": null,
root@docker1:~/docker# docker inspect pause1 | grep \"Pid:\"
root@docker1:~/docker# docker inspect pause1 | grep \"Pid:
root@docker1:~/docker# docker inspect pause1 | grep \"Pid\"
            "Pid": 28796,
root@docker1:~/docker# 
root@docker1:~/docker# ls -1al /proc/28796/ns/
total 0
dr-x--x--x 2 65535 65535 0 Apr 28 08:09 .
dr-xr-xr-x 9 65535 65535 0 Apr 28 08:09 ..
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 cgroup -> 'cgroup:[4026532404]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 ipc -> 'ipc:[4026532353]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 mnt -> 'mnt:[4026532351]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:09 net -> 'net:[4026532355]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 pid -> 'pid:[4026532354]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 pid_for_children -> 'pid:[4026532354]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 time -> 'time:[4026531834]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 time_for_children -> 'time:[4026531834]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 user -> 'user:[4026531837]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 uts -> 'uts:[4026532352]'
root@docker1:~/docker# 
root@docker1:~/docker# 
root@docker1:~/docker# 
root@docker1:~/docker# docker stop pause1
pause1
root@docker1:~/docker# docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
root@docker1:~/docker# docker start pause1
pause1
root@docker1:~/docker# 
root@docker1:~/docker# docker inspect pause1 | grep \"Pid\"
            "Pid": 29038,
root@docker1:~/docker# ls -1al /proc/29038/ns/
total 0
dr-x--x--x 2 65535 65535 0 Apr 28 08:22 .
dr-xr-xr-x 9 65535 65535 0 Apr 28 08:22 ..
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 cgroup -> 'cgroup:[4026532404]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 ipc -> 'ipc:[4026532353]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 mnt -> 'mnt:[4026532351]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:22 net -> 'net:[4026532355]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 pid -> 'pid:[4026532354]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 pid_for_children -> 'pid:[4026532354]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 time -> 'time:[4026531834]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 time_for_children -> 'time:[4026531834]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 user -> 'user:[4026531837]'
lrwxrwxrwx 1 65535 65535 0 Apr 28 08:23 uts -> 'uts:[4026532352]'
root@docker1:~/docker# 

страннно!! после тоогго как я сделал стоп а потом старт у контейнера
сохранились все его нейсмейсы! при том что его файл оотчечаюзщий
ха сет неймспйс тал другим! яеще раз проверил и та и есть!
netns файл изменисля! а сеетвой немпейс и все остатолные неймпейссы режние!
как это взмоножно!?!Г!?!?!?!?!?!

я сделал kill -SIGKILL 
но все тоже самое. процесс имеет все неймсейсы очно такиеже как у него были!
хотя netns файл стал дргой! классно! но бред!

итак если конейтенер умер неавнжно как и перезапущен то у него
сохоаняется:
 все его немпйесы и цгруппа
 id
 IP

тоесть вобщем то все важные харарктретсики у него прежние!
не сохраняется:
имя netns /var/run/docker/netns/* файла



теперь пробую создать увязанные конетйнеы ! как под
кстати вот пример
 grep -- "-P"
без "--" греп думает что -P это параметр а не паатттерно поиска!

значит я посомтреона опцияю --link но она лежает хрень! она не помещает контейнры
в один неймспйес нет! вот тчо она делате = https://docs.docker.com/network/links/


далее я обнаружил поразительный парадокс.
значит докер дает создать контейнер с такой же сетью (сетевым неймсейсом) как 
у другого контейнера

$ docker create -ti --name=bash1  --net=container:pause1  --stop-signal=SIGHUP   ubuntu  /bin/bash

здесь фишка в опции --net=container:pause1
слово container это просто болванка  а вот pause1 это уже название того контейнера
к чьему сетевому стеку мы хотим подключиться. 
кстати баш игнориует сигнал SIGTERM зато отлично прекращает работу при поступлении
сигнала SIGHUP поэтому я его и заменил. 
в свойствах контйеера про сеть будет вот такая запись
		"NetworkMode": "container:38ef3c7c3c..."
тоесть все выглядит круто. так как я ранее уже выяснил что при стоп\старт контенера
у него НЕМЕНЯЕТСЯ   container_id

так вот далее я беру контейнер pause1 и начинаю его стор\старт или рестарт
и смотрю что происходит с сетью в контейнере bash1  и я четко вижу что стоит мне
стоп\старт или рестарт контейнера pause1 и сеть в bash1 ПРОПАДАЕТ!
но какого хрена? я ведь ранее уже выяснил что при стоп\старт контйенера у него 
не меняется сетевой нейпспейс. да файл за него отвечающий меняется но сам неймсеейс
не меяенсся! так вот практика показала что по крайней мере в данном случае когда
на контейнер pause1 указыаывает контейнер bash1 то при стоп\старт контйнера pause1 
у него ВСЕГДА меняется сетевой неймспейс! точнее не совсем выглядит это так - вот мы
запустили pause1 , далее заусстили bash1. в bash1 сеть есть. далее я стоп\старт pause1
, далее выяняется что у pause1 изменился сетеовй неймсейс. поэтому у bash1 пропадает 
сеть потому что у  bash1 указывает на сет нейсейс котоого уже нет. далее я еще раз 
стоп\старт pause1 и сет неймспейс НЕМЕНЯЕТСЯ. при этом понятно у bash1 сети нет.
далее я перезапускаю bash1 он обновляет свою инфо и у него появляется сеть.
далее я стоп\старт pause1 у него меняется сет неймсейс, в bash1 пропадает сеть.
далее я стоп\стпрт pause1 - сет неймсейс  у него не меняется. далее я стоп\старт bash1
 у него появлется сеть. далее я стоп\старт pause1  у него меняется сетевой неймспейс.
 и так до бесконечности! откуда такая логика я не понимаю. ясно одно - если у нас 
 один контейнер смотрт в сеть другого контейнера то если мы рестартанули основной
 контейнер от котороо пляшет сеть для других - в данном случае это pause контенер - то 
 у всех контейнеров сеть отвалится! и их все придется перезапускать! вот!
а выгдядело так многгобещающе! выглядело все так что рестарт pause конейнера не должен 
был у него менять сет неймспейс и значит сеть в зависимых контйнеов не должна 
была исчезать и их перезагружать было бы ненужно . УВЫ!!!!
d



<==================================


какой лимит памяти по деолту?  на лимит на свап?

интересно как у к8 с сохранением параметром процесса при рестарте конейтра?

вот еще интерсная оациця
   --stop-timeout int                 Timeout (in seconds) to stop a container


вот это тож иентерсно
как по дефолту докер проеряет здорвоье конейтенар! то что он просто жив?
docker create --help
      --health-cmd string                Command to run to check health
      --health-interval duration         Time between running the check (ms|s|m|h) (default 0s)
      --health-retries int               Consecutive failures needed to report unhealthy
      --health-start-interval duration   Time between running the check during the start period (ms|s|m|h) (default 0s)
      --health-start-period duration     Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)
      --health-timeout duration          Maximum time to allow one check to run (ms|s|m|h) (default 0s)


еще вот это 
--init



про мемори лимиты: - 



убиение конейрера меняет его ip или id у докера и к8?
podman composer есть ? 
podman как докер выставляет конейнеры наружу?