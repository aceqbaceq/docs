| lock
| locks
| flock

я начинаю эпопею по локам  в линуксе

пока что первый набросок.

если утилита floсk 	из пакета util-linux
		$ man 1 flock

там кстати дохрена всяких козырных утилит

$ dpkg -L  util-linux | grep bin/
/bin/dmesg
/bin/findmnt
/bin/lsblk
/bin/more
/bin/mountpoint
/bin/su
/bin/wdctl
/sbin/agetty
/sbin/blkdiscard
/sbin/blkid
/sbin/blkzone
/sbin/blockdev
/sbin/chcpu
/sbin/ctrlaltdel
/sbin/findfs
/sbin/fsck
/sbin/fsck.cramfs
/sbin/fsck.minix
/sbin/fsfreeze
/sbin/fstrim
/sbin/hwclock
/sbin/isosize
/sbin/mkfs
/sbin/mkfs.bfs
/sbin/mkfs.cramfs
/sbin/mkfs.minix
/sbin/mkswap
/sbin/pivot_root
/sbin/runuser
/sbin/sulogin
/sbin/swaplabel
/sbin/switch_root
/sbin/wipefs
/sbin/zramctl
/usr/bin/addpart
/usr/bin/choom
/usr/bin/chrt
/usr/bin/delpart
/usr/bin/fallocate
/usr/bin/fincore
/usr/bin/flock
/usr/bin/getopt
/usr/bin/hardlink
/usr/bin/ionice
/usr/bin/ipcmk
/usr/bin/ipcrm
/usr/bin/ipcs
/usr/bin/last
/usr/bin/lscpu
/usr/bin/lsipc
/usr/bin/lslocks
/usr/bin/lslogins
/usr/bin/lsmem
/usr/bin/lsns
/usr/bin/mcookie
/usr/bin/mesg
/usr/bin/namei
/usr/bin/nsenter
/usr/bin/partx
/usr/bin/prlimit
/usr/bin/resizepart
/usr/bin/rev
/usr/bin/setarch
/usr/bin/setpriv
/usr/bin/setsid
/usr/bin/setterm
/usr/bin/taskset
/usr/bin/uclampset
/usr/bin/unshare
/usr/bin/utmpdump
/usr/bin/whereis
/usr/sbin/chmem
/usr/sbin/ldattach
/usr/sbin/readprofile
/usr/sbin/rtcwake
/sbin/getty
/usr/bin/i386
/usr/bin/lastb
/usr/bin/linux32
/usr/bin/linux64
/usr/bin/x86_64


как эта утилита работает:
мы ей указваем файл (например balance.dat). она на этот  файл в ядре регситриует lock.
если мы запустим еще одну утилиту flock и ей укажем этот файл balance.dat 
то flock увидит что этот файл имеет lock и не будет трогать его
пока этот лок не исчезнет. вот этот lock который будет установлен он 
имеет типа advisory это знчит что в целом доступ  к файлу не блокируется.
просто если программа сама сделает запрос на счет того что а не имеет ли 
balance.dat лок то она получит эту инфо и исходя из этого будет понимать
что ктот друой работает  с файлом. но это выбор программы что она будет делать 
дальше. 

показываю на прмиере
(терминал1)		$ flock  --verbose ./balance.dat  -c "sleep 100"
				flock: getting lock took 0.000006 seconds
				flock: executing /bin/bash


(терминал2)		$ flock  --verbose ./balance.dat  -c "cat ./balance.dat
				
и во втором терминале нихрена не произойдет.
потому что первый flock устанвоил lock
а второй flock при загрузке проверил нет ли лока. нашел его поэтому
он сидит и ждет когда лок исчезнет.


первый flock накладывает лок через сисколл
		flock(3, LOCK_EX)

при наложнии лока его можно найти вот так
$ lslocks  | grep -E "SIZE|balance"
COMMAND           PID   TYPE   SIZE MODE  M      START        END PATH
flock           77158  FLOCK     4B WRITE 0          0          0 /home/vasya/balance.dat

или через proc напрямую. только вначале нужно узнать иноду файла balance.dat
$ stat ./balance.dat  | grep Inode
Device: fd00h/64768d	Inode: 280269458   Links: 1

$ cat /proc/locks | grep 28026945
30: FLOCK  ADVISORY  WRITE 77229 fd:00:280269458 0 EOF

тоеть в /proc/locks лок на файл можно найти только зная иноду файла

возникает вопрос а как второй flock делает проверку что файл
залочен.
сммотрим

(терминал2) $ strace flock  --verbose ./balance.dat  -c "cat ./balance.dat"
              openat(AT_FDCWD, "./balance.dat", O_RDONLY|O_CREAT|O_NOCTTY, 0666) = 3
              flock(3, LOCK_EX
и вот тут она замирает. тоесть
заметим что open() работает без проблем со стороны второго флока. тоесть
наложеннй первым флооком лок он никак не блокирует open() со стороны
других процессов.
далее что такое 
	flock(3, LOCK_EX) 
это на саомм деле просьба к ядру чтобы ядро создало лок на данный файл для данного
процесса. 
флаг LOCK_EX  Place an exclusive lock.  Only one process may hold an exclusive lock for a given file at a given time
и так как у нас лок уже создан первым процессом то ядро увидев от вторго процесса
этот запрос оно "блокирует" второй прцоесс. то есть оно сует второй процесс в S стейт.
до тех пор пока ядро несможет исполнить этот запрос. тоесть до тех пор пока первый
процесс не уберет лок.
вот  как это работтает!
вот как выглядит дерево процессов для флок с первого терминала
(terminal1) ....----bash(71523)---flock(77333)---sleep(77334)

71523 это баш в которомы мы сидели
77333 это флок который мы запустили. он выполнил сисколл
	flock(3,LOCK_EX)
далее он себя fork() +execve (sleep)
соовсвтенно флок он создал лок а потом дальше дал начать работать той команде
которую мы указали как аргумент в даннмо случае это sleep.
вместо него можно было укзаать баш скрип или любой бинарник типа cat или echo которрый
бы начал работать непосредственно с файлом

тоесть лоика такая. начинает работать флок он пытается наложить лок на файл. 
если лок на этот файл уже есть то ядро недаст флоку наложить этот лок а засунет
флок в S стейт. если же флоку удатеся наложить лок это значит что большге никто
этот лок неналожил и значит можно выполнять последующую команду которая
работает с этим файлом. в целом команла необязана раобтать с этим файлом. но инче
нахрена тогда огород городить? просто sleep\echo\cat они понятия не имеют о локах
поэтому флок служит как бы проверяльщиком. и устаналивальщиком. 

кога мы налоижили лок так как он рекомендательный то ничего немешает лббому другому
процессу начать раобтать с этим же файлом. тоесть flock он не для того чтобы бокивароть
доступ к файлу а чтобы наладить с ним посоедовательную работу для тех кто хочет
ДОБРОВОЛЬНО это сделать!
то что у нас sleep\echo\cat указываются как арнумент у флока дает то что 
когда они отработают то обратно проснтся флок и он автоматом этот лок снимет. 
это позволяет избежать ситуации что мы с файлом закочнили а в ядре лок на него
бесхозный оставили!!!


	 $ flock --verbose ./balance.dat   -c ./001.bash
суть такая
флок откроет файл и сделает на него lock.
потом можно в другом терминале запустить через flock 
еще какойой то баш скрипт или бинарник

	 $ flock --verbose ./balance.dat   -c cat ./balance.dat

так вот втор

