prometheus


$ docker run --rm -d -p 8080:8080 --name app1 --net net1  christianhxc/gorandom:1.0

$ cat << EOF > ./prometheus.yml
global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.
  evaluation_interval: 15s # Evaluate rules every 15 seconds.

  # Attach these extra labels to all timeseries collected by this Prometheus instance.
  external_labels:
    monitor: 'scalyr-blog'

rule_files:
  - 'prometheus.rules.yml'

scrape_configs:
  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:9090']

  - job_name:       'golang-random'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['app1:8080']
        labels:
          group: 'production'

EOF



$ docker run --rm -d  -p 9090:9090 --name promet1 --net net1 -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus



запускаем их в кастомной сети и с явными хостнеймами потому что иначе 
тогда не будет работать такая штука чтобы они могли пинговать друг друга по имени хоста

проверяем что это работает

$ docker run -it --rm --net net1 alpine sh
/ # ping -c 3 app1
PING app1 (172.20.0.2): 56 data bytes
64 bytes from 172.20.0.2: seq=0 ttl=64 time=0.817 ms

/ # ping -c 3 promet1
PING promet1 (172.20.0.3): 56 data bytes
64 bytes from 172.20.0.3: seq=0 ttl=64 time=0.588 ms

порядок


запускаем графану

$ mkdir ./data

$ docker run -d -p 3000:3000 --name=grafana \
  --user "$(id -u)" \
  --volume "$PWD/data:/var/lib/grafana" \
  --net net1 \
  grafana/grafana-oss


docker run -d -p 3001:3000 --name=grafana2 \
  --volume "graf-vol:/var/lib/grafana" \
  --net net1 \
  grafana/grafana-oss