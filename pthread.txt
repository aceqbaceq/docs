| c 
| thread
| pthread

простой вопрос - можно ли послать сигнал в многотредовый процесс так чтобы в итоге умер 
именно конкнретный тред а не все треды нахрен?
ответ - вот так предварительно - нихрена это невозможно. максимум что получисллось это 
умирает главный тред а остальные работают и сигнал шлется не снаружи а из самого процесса.
но это нам нхер ненужно. если мы хотим убит тред изнутри процесса - там есть нормальный
механизм через сисколл  и никакие сигналы ненужны. 

поэтому пока вывод такой -- если мы шлем сигнал снаружи к многотредовому процессу то в итоге
умрет весь процесс со всеми тредами. и нихрена с этим не сделать. если мы хотим закрыть
конкетный тред то делать это нужно изнутри самого этого процесса через сисколл. 

вопрос программа kill она шлет сигнал к треду или к процессу? 
ответ - число которое мы указываем для kill это номер треда. в  него сигнал и 
прилетает.

вот программа
значит что она делает - она изменяет хендлер для сигнала SIGINT и пишет на экране
номер тред TID в коотором это хендлер сигнала работтает.



 $ cat thread2.c
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <pthread.h>
#include <sys/syscall.h>



void signal_handler(int signum, siginfo_t *info, void *extra)
{
    printf("Handler thread ID: %ld\n", syscall(SYS_gettid));
}




void set_signal_handler(void)
{
    struct sigaction action;

    action.sa_flags = SA_SIGINFO;     
    action.sa_sigaction = signal_handler;
    sigaction(SIGINT, &action, NULL);

}




void *task(void* argv)
{
    printf("Thread ID: %ld, pid=%i\n", syscall(SYS_gettid), getpid());
    for(;;) {
        sleep(1);
    }
}




void main(void)
{
    pthread_t t1, t2, t3;
    
    set_signal_handler();
    printf("Thread ID (main thread): %ld\n", syscall(SYS_gettid));

    pthread_create(&t1, NULL, task, NULL);
    pthread_create(&t2, NULL, task, NULL);
    pthread_create(&t3, NULL, task, NULL);

   for(;;) {
       sleep(1);
   } 
}




далее я выяснил что за сисколл используется при вызове коносльной программмы kill 
оказалось что есть такой сисколл

	kill(2977007, SIGTERM)                  = -1 


в итоге запускаю комаду

	$ strace -e kill kill -SIGINT  2978344

у нас срабатывает сисколл 

	kill(2978344, SIGINT)                   = 0


а на экране программы мы видим
 4   $ ./thread2.exe 
Thread ID (main thread): 2978342
Thread ID: 2978343, pid=2978342
Thread ID: 2978344, pid=2978342
Thread ID: 2978345, pid=2978342
Handler thread ID: 2978344   <======  !!!

тоесть строка 
	Handler thread ID: 2978344
она указывать на то что сигнал был пойман в рамках треда 2978344
итак в kill мы в итоге указываем номер  треда.  а если процесс состоит из одного треда
то в итоге мы указываем получается номер главного треда. итак аргументом у kill является 
не номер процесса а номер треда.  ксатти номер процесса это всего навсего номер первого треда.

так что с помощью стандартнго kill послать сигнал конктнтому треду - нет проблем. однако
толку от этого мало потому что в итоге ядро завершит ВСЕ треды которые работают и полуается
неважно ккаакому ты треду послал сигнал.


хотя нет никаких проблем послать через kill() сигнал к треду но почему то есть еще
один сисколл чтобы сделат тоже самое tgkill() зачем он нужен неясно

  $ cat  thread6.c
#include <sys/syscall.h>
#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])   {

    pid_t pid = atoi(argv[1]);  // Идентификатор процесса
    pid_t tid = atoi(argv[2]);     // Идентификатор потока
    
    // Вызов tgkill через syscall
    syscall(SYS_tgkill, pid, tid, SIGINT);

    return 0;
}







