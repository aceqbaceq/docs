| iptables beginning

начало 

https://en.wikipedia.org/wiki/Netfilter

можно прочитать для общего ознакомления




| iptables beginning

для начала прочитай вот это 

    iptables-nfttables-сосуществование.txt


исходя из этого внизу могут быть ошибки
потому что ниже более старый материал
теперь поехали
значит iptables написала контора netfilter
проект iptables состоит из двух кусков:
	первый кусок это юзер спейс утилиты такие как
		iptables
		iptables-save
		iptabls-restore
	второй кусок это модули ядра от того же самого нетфильтра


утилиты служили вот для чего
	iptables - для ввода правил в ядро
	iptables-save для считывания правил из ядра и записи их  в файл
	iptables-restore для считывания правил из файла и сования их  в ядро



более того . на самом деле юзер утилиты было больше, были еще утилиты

   arptables
   ebtables


дело вот в чем iptables подсистема (утилита + ее модули ядра) она отвечает за обработку
потока уровня L3 ( я об этом будут потом дальше говорить) тоесть мы работаем с пакетом который
снаружи уже раздет до IP. также эта подсистема она работает только с трафиком который вошел в
ядро из L3 порта. (это тоже я буду расматвать пожже). поэтому эта  штука она не работает с 
потоком который вошел в ядро из порта L2 (хотя это тоже неверно так как при загрузке модуля br_netfilter это правило нарушается . об этом тоже пожже.)  . так вот для работы с потоком который 
влетел из L2 порта в ядро и работы с ним на уровне L2  была придумана утилита ebtables. ееные
правила там распостраняются. и совесвтенно ее правила не имеют нкиакой силы для потока который
влелтел в ядро из L3 порта. вот для чего и зачем была придумана ebtables. 
утилитй arptables придумана для работы с ARP протоколом - тут я даже и не разбирвал что она 
такого умеет делать чего не умеет ebtables. хотя arp протокол он же хитрый. он имет уровень L2.5
поэтому возможно она играет рояль и для потока который вошел в ядро чрез L3 поррт и через L2 порт

но теперь поговоирим про другой аспект:
эти юзер спейс утилиты как в целом работают - они  обращаются через сокет с типом netlink к модулям которые написали эти же самые ребята из нетфильтр фирмы. и програмируют эти модули. а уже модули
делают работу с потоками сетевыми. есть еще модуль conntrack который как бы автоматом работает.
и он делает файрволл на базе иптбейлс как statefull. тоеть мы орабывам не просто отдельные пакеты
а мы их гурппиируем в сессии ( или как я назыаю в потоки).

так есть еще один прикол как это все работает. 
раньше работало так - утилита ipables обращается к модулям. считывает полный список правил.
потом она его редактиррует. и оптравляет обратно весь клубок. а модули перенакатывают этот
весь клубок с нуля. полчаеся как пишут в инете это проблема когда правил много.
сами модули от нетфильтра идут в поставке кода самого ядра. а юзер утилиты идут в поставке
пакета iptables


ТАК ВОТ  далее проект изменился. вот как. поменялись названия у файлов тоесть у утилит, у модулей ядра и поменялся принцип работы всей этой шарманки.
они изменили принцип. теперь утилита может совать в модуль чисто одно правило. ненужно
скачивать весь клубок. а потом обратно писать в ядро весь клубок. и модулям ядра перенакатыать
весь клубок. также наприме поменялся логинг. раньше он работал вот как - в ядре есть буфер
называтся кернел ринг. он перезаписывается по кругу. и логи от событий писались туда. а юзер
приложение может его считать через чтение /dev/kmsg
в новой системе можно настроит чтобы логи писались по другому. ну типа как это работает. 
можно сдедать так что логи не будут писать в кернел ринг а они пишутся в некий буфер тоже в ядре
но к этому буферу можно подключаться через сокет netlink и считать из этого буфера в юзер спейс.
спрашивется в чем разница приницпиальная? да хрен знает об этом потом. 

а сейчас я хочу скзаат что утилита новая всего одна которые умеет делать все и называется 

	nft

модули под нее идут с кодом ядра. а сама она идет в пакете nftables.


а дальше прикол. вот этот nft придумали в 2014 году. и после этого начали городиь огород. 
потому что нужно было обеспечить переход со старой системы на новую. выпустли пакет 

	iptables-nft

(в дебиане это пакеты iptables и nftables,
модули ядра входят в состав самого ядра а в пакетах
лежат только юзер спейс утилиты. )
который позволяет вводит в него правила старого образца а он их модфиицирует и скармливает 
уже ноовому бекенду в ядре. новым модулям ядра по факту.

еще раз - правила от старой системы
вводим а по факту на бекенде уже новая система. тоесть там есть встроенный коневертер. 
ну и потом чел переучивыается потихоньку на новое. а так как правила сконертированы то их 
можно увидеть и в новом виде и уже поставиьт в линукс новый юзер пакет nftables и продолжит
работать дальше.  тоесть это такой гибрид. мы вводим правила старого образца как бутто у нас
на компе стоит старая ситема а по факту под капотом уже рабтает новая. праивила в нее конвертит
из старого образца в новый вот  эти юзер утилиты  сами. 

и получается вот что - в ядре присутвуют
модули и старого иптбейлс системы и новой. и в этом пакете приствутствуют юзер утилиты и чисто 
старые и вот эти переходные. и те и другие утдилиты в пакете принимают праивла старого оразца
но старые уатилиы их пихают в старые модули а новые утилтиы эти правила преобарзуют на лету
и пихаю в новые модули. 

при этом старые утилититы их перименовали. все старые утилиты засуули 
в один бинарник

		/usr/sbin/xtables-legacy-multi

а новые переходые утилиы заснули тоже в один бинарник

		/usr/sbin/xtables-nft-multi

но запускать эти бинарники напрмую БКСПОЛЕЗНО!!!.
если запустить такой бинакрник вот что он 
выдаст

# /usr/sbin/xtables-legacy-multi 
ERROR: No valid subcommand given.
Valid subcommands:
 * iptables
 * main4
 * iptables-save
 * save4
 * iptables-restore
 * restore4
 * iptables-legacy
 * iptables-legacy-save
 * iptables-legacy-restore
 * iptables-xml
 * xml
 * ip6tables
 * main6
 * ip6tables-save
 * save6
 * ip6tables-restore
 * restore6
 * ip6tables-legacy
 * ip6tables-legacy-save
 * ip6tables-legacy-restore

тоесть он шлет нахуй. и говорит нам о том
что его нужно вызывать по другому. нужно создать
симлинк например с именем  

  iptables-save --> /usr/sbin/xtables-legacy-multi


когда мы запустим симлинк  то тогда бинарник
xtables-legacy-multi поймет что от него хотят
и отработтает как старая утилита iptables-save
в пакетах собрано дохрена этих симлинков. они
запиывтся на диск.
симлинки 

  iptables
  iptables-save
  iptables-restore

если через них вызывать /usr/sbin/xtables-legacy-multi
то он отработает как старые утилиты одноименные

симлинки

 * iptables-legacy
 * iptables-legacy-save
 * iptables-legacy-restore

ненаю нахуй они были придумыны но под ними 
вызываить  xtables-legacy-multi то он отрабтает
в точности также как 

  iptables
  iptables-save
  iptables-restore

тоесть просто идет заебываение мозгов на пустом
месте


таким обраом еще раз. когда я запускаю бинарник
через симлинк то бинарник смотрит какое имя
у смилинка и активирует в себе нужный кусок
фунционала.

и таким макаром когда его вызывают он смотрит через какой смилинк его вызывали и понимает 
чего от него хотят. 

тоже самое и для переходных утилит сделано. и все это содежится в пакете iptables
и вот как оно на праткие на ФС выглядит (в МАНЖАРО ОС)


	# ls -1al /usr/sbin/iptables* | awk '{print $9 $10 $11}'

/usr/sbin/iptables->xtables-legacy-multi
/usr/sbin/iptables-apply
/usr/sbin/iptables-legacy->xtables-legacy-multi
/usr/sbin/iptables-legacy-restore->xtables-legacy-multi
/usr/sbin/iptables-legacy-save->xtables-legacy-multi
/usr/sbin/iptables-nft->xtables-nft-multi
/usr/sbin/iptables-nft-restore->xtables-nft-multi
/usr/sbin/iptables-nft-save->xtables-nft-multi
/usr/sbin/iptables-restore->xtables-legacy-multi
/usr/sbin/iptables-restore-translate->xtables-nft-multi
/usr/sbin/iptables-save->xtables-legacy-multi
/usr/sbin/iptables-translate->xtables-nft-multi
/usr/sbin/iptables-xml->xtables-legacy-multi

тоесть
/usr/sbin/iptables->xtables-legacy-multi
/usr/sbin/iptables-save->xtables-legacy-multi
/usr/sbin/iptables-restore->xtables-legacy-multi

все они смотрят на один бинарник

можно заметть что созданы симлиники вот такого вида
/usr/sbin/iptables-legacy->xtables-legacy-multi
/usr/sbin/iptables-legacy-restore->xtables-legacy-multi
/usr/sbin/iptables-legacy-save->xtables-legacy-multi

ну я не знаю зачем. я в том плане что разницы от того что  я запущу


   $ iptables-save
   $ iptables-legacy-save

нет нкиакой с точки зреия результата. ну мы просто для бинарника котоырй читает имена
файлов через котоыре мы его взывли лишний раз еще раз ему говорим что мы хотми работать со 
старыми модулями. так он с другими работть и не умеет. 


тоже самое для преехождных утилит
/usr/sbin/iptables-nft->xtables-nft-multi
/usr/sbin/iptables-nft-restore->xtables-nft-multi
/usr/sbin/iptables-nft-save->xtables-nft-multi



	# ls -1al /usr/sbin/arptables* | awk '{print $9 $10 $11}'
/usr/sbin/arptables-nft->xtables-nft-multi
/usr/sbin/arptables-nft-restore->xtables-nft-multi
/usr/sbin/arptables-nft-save->xtables-nft-multi

как видно для арптейблс у нас уже работа идет только через новый бекенд по крайеймй
мере на манжаро


	# ls -1al /usr/sbin/ebtables* | awk '{print $9 $10 $11}'
/usr/sbin/ebtables-nft->xtables-nft-multi
/usr/sbin/ebtables-nft-restore->xtables-nft-multi
/usr/sbin/ebtables-nft-save->xtables-nft-multi
/usr/sbin/ebtables-translate->xtables-nft-multi


тоже самое тут. бекенд это один и тотже бинарник. просто куча не него симлинков.
и работу уже идет через тлко новый бекенд. 

напомню что все эти утилиты так скажем они входят в пакет iptables в манжаро.

итак как понять какой бекенд юзает та или иная утилита. ну во первых мы поняли что утилит то
походу и нет. есть куча симлинков. смотрим на что уазывакает симлинк и сразу все понятно. 
если он укзывает на  

	xtables-legacy-multi

значт мы работаем со старыми модуялими а если он укзывает на 

	xtables-nft-multi

значит с новыми.
но можно полениться и вот так сделать
 
	 # iptables -V
	iptables v1.8.10 (legacy)


или

	# iptables -V
	iptables v1.8.9 (nf_tables)

но опят же - по мне этот метдо неочень. потому что у нас вся подитситмема иптейблс это 
куча утилит вида iptables* arptables* ebtables* и  строчки что мы только увидели они всего 
навсего покывзают какйо бекенд толко у симлинков групы iptables* а остальных двух групп бекенды
могут другие! поэтому лучше всегд взять и руками тупо проверить напрмиер 


	# readlink -f $(which iptables)
	/usr/sbin/xtables-nft-multi

и сразу все понятно. что даная хрень рабтает с молулями новго образца.

или

	# readlink -f $(which iptables)
	/usr/bin/xtables-legacy-multi


а здесь с модулями старого образца.

спращшивается а зачем readlink а не stat а потому что в дебиан там ситема симлиноков многократная
и их руками все осслжваь мудотно тоесть

	# which iptables
	/usr/sbin/iptables

	# stat /usr/sbin/iptables | head -n1
   File: /usr/sbin/iptables -> /etc/alternatives/iptables

	# stat /etc/alternatives/iptables | head -n1
  File: /etc/alternatives/iptables -> /usr/sbin/iptables-nft

а команда ридлинк это все сдалет сама за один присест

ксатти на дебине пакет iptables он все  бекенды указывает на новый бекенд . покзыаю

	# readlink -f  $(which iptables)
	/usr/sbin/xtables-nft-multi

	# readlink -f  $(which arptables)
	/usr/sbin/xtables-nft-multi

	# readlink -f  $(which ebtables)
	/usr/sbin/xtables-nft-multi
 

далеее в манжаро пакет с именем iptables-nft
в целом в манжаро оба пакета 

   iptables
   iptables-nft

они одинаковые. у них одинаковые бинакрники. просто в первом часть ссылок
укзывает на сатрый бинарник (который рабтвает со старыми модулями). а во втором все ссылки
указывают на новый бинарник(который работает с новыми модуялми) вот и вся разница.
при желании можно преррвтиь руками один пакет в другой даже без устновки. поросто нуэно поменять 
на что укзывают симлинки вот и все. 

ксатти если нажать на бинарник  xtables-nft-multi либо на xtables-legacy-multi
то он покажает какие "утилиты" он эмулирует в себе. так вот четко видно причем и в манжаро
и в дебиан что  xtables-legacy-multi в себе не содержит ebtables! она есть только в xtables-nft-multi

	# ./xtables-legacy-multi 2>&1| grep ebtables
	пусто

	# ./xtables-nft-multi 2>&1| grep ebtables
 	* ebtables
 	...
 	

так что ebtables они обсдуживаются только через новый бекенд.!



вернемся кэтим двум пакетов в манажаро

  iptables
  iptables-nft


еще раз скажу в чем их разница. в первом симлинки  iptables*  укзаывают на старый бекенд
а симлинки ebtabes укаывают на новый. 
во втором симлинки  iptables*  укзаывают на новый бекенд
а симлинки ebtabes укаывают на новый. 

таким образм если я удалю первый и поставлю втторой то мне нужно пееред удалением первого
заюкеаить его правила. потом очистить таблицы. потом удалить первый пакет потом накатить втоой
и потом импортиоовать старые правила на новый бекенд. иначе будет хуйня.
что касется правил ебтейблс то их это не касется. ибо в ообих пакетах оно работае одинаковоо.


старые модули они создают в ядре 
свои таблицы. а новые модули свои таблицы. и они не совпдаадают. не знаю как там с точки зрения
прохождения пакета. тоесть что будет если у нас правила и там и там. но по факту эти таблицы
не совдпадают или частично совпдадают.
я сделал экрпермиент
вначале везде пусто

# iptables-legacy-save
# Generated by iptables-save v1.8.9 on Sat Feb  8 17:53:30 2025
*filter
:INPUT ACCEPT [8297:619868]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [4923:578568]
COMMIT
# Completed on Sat Feb  8 17:53:30 2025

# iptables-nft-save
# Generated by iptables-nft-save v1.8.9 (nf_tables) on Sat Feb  8 17:53:35 2025
*filter
:INPUT ACCEPT [1363:103656]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [1020:101388]
COMMIT
# Completed on Sat Feb  8 17:53:35 2025


теперь обавляю правило через старый бекенд(через старые модули)

	# iptables-legacy  -A  INPUT -p icmp -j LOG --log-prefix "[FILTER-INPUT icmp] "

смотрим что в табилицах обоих бекендов

	# iptables-legacy-save
# Generated by iptables-save v1.8.9 on Sat Feb  8 17:54:52 2025
*filter
:INPUT ACCEPT [28:1768]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [20:2264]
-A INPUT -p icmp -j LOG --log-prefix "[FILTER-INPUT icmp] "
COMMIT


	# iptables-nft-save
# Generated by iptables-nft-save v1.8.9 (nf_tables) on Sat Feb  8 17:54:54 2025
*filter
:INPUT ACCEPT [1537:115440]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [1136:113892]
COMMIT



тоесть старые модули видят правло. новые нет. 

добавляю праивло через новый бекенд

# iptables-nft -A  INPUT -p tcp -m tcp --dport 4545 -j LOG --log-prefix "[FILTER-INPUT tcp:4545] "

смотрим в обоих таблицах
	# iptables-legacy-save
# Generated by iptables-save v1.8.9 on Sat Feb  8 17:56:12 2025
*filter
:INPUT ACCEPT [235:17840]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [185:18872]
-A INPUT -p icmp -j LOG --log-prefix "[FILTER-INPUT icmp] "
COMMIT

	# iptables-nft-save
# Generated by iptables-nft-save v1.8.9 (nf_tables) on Sat Feb  8 17:56:14 2025
*filter
:INPUT ACCEPT [1746:131616]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [1303:130708]
-A INPUT -p tcp -m tcp --dport 4545 -j LOG --log-prefix "[FILTER-INPUT tcp:4545] "
COMMIT


тость получаем логчную ситация. старые и нвоые модули работат в итоге со своими 
невидимыими друг для друга таблцами. 

поэтому по идее как бы надо работать либо целиком через старый либо через новый бекенд
а не мешать их в одну кучу. потому что как они прересккаются хрен знает.


получается по факту в ядре модули ообоих бекендов лежат всегда. поэтому кода мы ставим пакеты
мы всего навсего ставим юзер утилиты для cli. также возможно ставим библиотеки через которые 
другие проги типа докера могут тоже обращаться к этим модулям но возможно другие проги 
могут обращабся к модулям и совать правила в ядро и без библиотек. не знаю.
в итоге по идее можно сразу ставить в систему и пакет iptables и пакет nftables. это ичего 
несломает не изменит. в составе пакето просто сидяют юзер кли утилиты. да воможно при устаовке
пакета там есть скрипты которые например ресетят табллицы но врятли. по крнйей мере 
у меня устанволен пакет iptables и я установил пакет nftables и это ничего не поменяло в правилах.

по поводу манжаро и его двух пакетов iptables и iptables-nft  . по сути это два одинаковых 
пакета. прост в одном созданы симлинки на один бекенд бинарник а на втором на другой. сама
по себе удаление одного и усановка другого ничего не меняет. просто если удалить скажем один 
пакет и поставить второй и начать польлзоваться тойж самйо командой iptables то изменения 
будут уже в другом бекенде. 

кстати табллицы для обработки ipv4 потока  и  для обработки ipv6 это отдедбные таблицы
в этом кстати и засада. тоесть можно все "закрыть" для ipv4 потока и даже не подозретьва
что для ipv6 потока все открыто нахрен! вот пример 

	# ip6tables-save
# Generated by ip6tables-save v1.8.10 on Sun Feb  9 15:17:31 2025
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:DOCKER - [0:0]
COMMIT
# Completed on Sun Feb  9 15:17:31 2025
# Generated by ip6tables-save v1.8.10 on Sun Feb  9 15:17:31 2025
*filter
:INPUT ACCEPT [769620:53873400]
:FORWARD DROP [98:5680]
:OUTPUT ACCEPT [774508:54139812]
:DOCKER - [0:0]
:DOCKER-ISOLATION-STAGE-1 - [0:0]
:DOCKER-ISOLATION-STAGE-2 - [0:0]
:DOCKER-USER - [0:0]
-A FORWARD -j DOCKER-USER
-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
-A DOCKER-ISOLATION-STAGE-1 -j RETURN
-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
-A DOCKER-ISOLATION-STAGE-2 -j RETURN
-A DOCKER-USER -j RETURN
COMMIT
# Completed on Sun Feb  9 15:17:31 2025

на основе счетчиков кстати видно что снаружи пакеты и не залетали
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:DOCKER - [0:0]

но пакеты бесконтрольно ходят внутри хоста
*filter
:INPUT ACCEPT [769620:53873400]
:FORWARD DROP [98:5680]
:OUTPUT ACCEPT [774508:54139812]
:DOCKER - [0:0]
:DOCKER-ISOLATION-STAGE-1 - [0:0]
:DOCKER-ISOLATION-STAGE-2 - [0:0]
:DOCKER-USER - [0:0]


ксатти как запретить докеру совать свой нос в правила iptables и в правила ip6tables
читай в iptables-docker.txt




по поводу перехода от класическиз тейблс к нфтейблс как это сделать. ставим iptbables или iptables-nft 
потом сохраняем правила от класических таблиц


	# iptables-legacy-save
# Generated by iptables-save v1.8.9 on Sun Feb  9 07:04:35 2025
*filter
:INPUT ACCEPT [4111:314944]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [2215:186508]
-A INPUT -p icmp -j LOG --log-prefix "[FILTER-INPUT icmp] "
COMMIT
# Completed on Sun Feb  9 07:04:35 2025


далее мы импортируем эти праивла на новый бекенд


в дебиан вся эта схема с утилитами выгдядит так
утилиты

 iptables
 iptables-save
 iptavles-restore 

это симлинки коотоырые лежат в /usr/sbin/
и они укзывают на другие симлинки 
которые лежат в папке /etc/alternatives с теми
же именами

/usr/sbin/iptables --->    /etc/alternatives/iptables

/usr/sbin/iptables-save --->  /etc/alternatives/iptables-save

/usr/sbin/iptables-restore --->  /etc/alternatives/iptables-restore

они в свою очередь указыают на опять же симлинк
сука iptables-nft либо iptables-legacy
который уже в свою очередь наконце то указвыает
на бинарник xtables-nft-multi или xtables-legacy-multi


тоесть еще раз эта ебанутая цепочка


/usr/sbin/iptables ---> /etc/alternatives/iptables --
---> /usr/sbin/iptables-legacy --
--->  /etc/alternatives/xtables-legacy-multi

это просто охуеть. 

поэтому если в дебиан я хочу чтобы мои утилиты
брали старые правила  и пихали их в старые модули
(переключиться на старый иптбейлс)
то нужно сделать вот так

# ln -s  /usr/sbin/iptables-legacy  /etc/alternatives/iptables
# ln -s  /usr/sbin/iptables-legacy  /etc/alternatives/iptables-save
# ln -s  /usr/sbin/iptables-legacy  /etc/alternatives/iptables-restore

а если я хочу чтобы мои старые правила пихались
(переключится на новый nftables)
в новые модули то нужно сделать вот так

# ln -s  /usr/sbin/iptables-nft  /etc/alternatives/iptables
# ln -s  /usr/sbin/iptables-nft  /etc/alternatives/iptables-save
# ln -s  /usr/sbin/iptables-nft  /etc/alternatives/iptables-restore


как мы можем проверить так куда блять были
зар=гружены правила в nft модули или старые xtables
модули. для этого делаем вот так

  # nft list ruleset

если тут пусто. значит все павила в старые модулях
засунуты