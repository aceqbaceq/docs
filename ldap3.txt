| ldap
| openldap

тут будет подробное описание ldap установки

итак про лдап.


значит по сути это база данных это никакая не "структура каталогов". это база данных.

в добавок к ней идет и некий протокол общения с ней по сети ровно как это есть у мускул или постгрес.
тоесть нужен клиент который знает протокол  L7 уровня для общения с этой базой.

на лдап сервер можно навесить TLS , тоесть чтобы было шифрование между клиетом и сервером.
также можно навесить kerberos (это я пока не знаю зачем и что дает)


так вот эту базу можно использовать для того чтобы  в ней хранить параметры профиля линукс юзера. так то мы 
по дефолту храним его в локальных файлах на компе  /etc/passwd  /etc/shadow  а так мы эти же хрени 
будем хранить в лдап базе.  ксати говоря непонятно чем лдап в этом плане таки лучше по сравнению с тем же 
мускулом или постгресом.  и в линуксе есть встроенные клиенты для  поиска этих кредов юзера в этой базе лдап.

значит в линуксе за проецесс аутентфииациии ответчает подсиситема PAM


    /etc/pam.d


это получается набор конфигов и набор шаред либрари.


# ls -1 /etc/pam.d/*
/etc/pam.d/chfn
/etc/pam.d/chpasswd
/etc/pam.d/chsh
/etc/pam.d/common-account
/etc/pam.d/common-auth
/etc/pam.d/common-password
/etc/pam.d/common-session
/etc/pam.d/common-session-noninteractive
/etc/pam.d/cron
/etc/pam.d/login
/etc/pam.d/newusers
/etc/pam.d/other
/etc/pam.d/passwd
/etc/pam.d/runuser
/etc/pam.d/runuser-l
/etc/pam.d/sshd
/etc/pam.d/su
/etc/pam.d/sudo
/etc/pam.d/sudo-i
/etc/pam.d/su-l


зачем так много конфигов не очень ясно.

но вот для примера  файл login вроде как именно он вызывается 
при логине локально 



# cat /etc/pam.d/login | grep  -v '#'

auth       optional   pam_faildelay.so  delay=3000000

auth       requisite  pam_nologin.so

session [success=ok ignore=ignore module_unknown=ignore default=bad] pam_selinux.so close

session    required     pam_loginuid.so

session    optional   pam_motd.so motd=/run/motd.dynamic
session    optional   pam_motd.so noupdate

session [success=ok ignore=ignore module_unknown=ignore default=bad] pam_selinux.so open

session       required   pam_env.so readenv=1
session       required   pam_env.so readenv=1 envfile=/etc/default/locale

@include common-auth

auth       optional   pam_group.so



session    required   pam_limits.so

session    optional   pam_lastlog.so

session    optional   pam_mail.so standard

session    optional   pam_keyinit.so force revoke




как я понимаю шаги выполняются сверху вниз

сбсвтенно вот эти строки


session    optional   pam_motd.so motd=/run/motd.dynamic
session    optional   pam_motd.so noupdate


они генерируеют шапку того что уже нарисвано на экране в экране логина

в конце концов вызываются другой файл


@include common-auth


# cat /etc/pam.d/common-auth  | grep  -v '#'

auth	[success=2 default=ignore]	pam_unix.so nullok
auth	[success=1 default=ignore]	pam_ldap.so minimum_uid=1000 use_first_pass
auth	requisite			pam_deny.so
auth	required			pam_permit.so



значит о чем он.


эта строка

auth	[success=2 default=ignore]	pam_unix.so nullok


она проверяет логин и пароль на основе локальных файлов /etc/passwd /etc/shadow
именно там она их ищет. и как я поинимаю делает это модуль  pam_unix.so
как утверждает ИИ то поиск в локальных файлых /etc/passwd /etc/shadow идет силами 
самого pam.d что вэтот NSS неучаствует! 

спращивется а что тогда значит в NSS вот эта строка

# cat /etc/nsswitch.conf 

passwd:         files systemd ldap
...
...


она не значит что за счет NSS ос провереяет пароль. а значит то что в /etc/passwd /etc/shadow есьт еще всякая
полезная инфо про юзера например его домашняя папка. так вот этой строкой указано где искать не пассворд юзера
а где искать доп инфо о профиле юзера!



так вот 
если пароль найден локально то  вот эта штука   success=2   она говорит что следущие две строки можно пропустиьт.
а если пароль ненден локально то тогда запусакается

auth	[success=1 default=ignore]	pam_ldap.so minimum_uid=1000 use_first_pass



тоесть идет аутнтифиация через лдап. она уже идет не силами самог pam.d а путем того что 
вызывается демон их может быть несколько  тоесть либо один может бытьус тановлен в системе
либо другой
я знаю таких демона два


   nslcd (+nscd)

или

   sssd


как настроить проклятый sssd я так и не понял. поэтому далее только про   nslcd (+nscd)
так вот 

так вот поиск пароля ведет pam без использования nss. nss тоже имеет строчку passw но он неиспльзуется
для проверки пароля(что дебильно) он используется для получения деталей профиля пользователя 
например его домашней папки инфо о которой хранится там же где и пароль.

итак pam запускает свой модуль pam_ldap.so который в свою очередь обращается  к nslcd

СПРАВКА:
nslcd is a daemon that will do LDAP queries for local processes that want to do user, group and other naming lookups (NSS) or do user authentication, authorisation or password modification (PAM). nslcd is configured through a configuration file (see nslcd.conf(5)). 


а уже в настроках nslcd мы указыаем параметры к лдап серверу тоесть


   
      login --> PAM ---> nslcd -----> ldap сервер


подсистема NSS тоже делает свои запросы к лдап через nslcd


      прога --> nss -->  nslcd -----> ldap сервер




тут важно скзаать что PAM она начнет взаимодейтстовать с nslcd толкьо если в конфиг файлах PAM
прописать модуль который этим занимается.
тоесть вот так выглядит один из конфиг файлов когда PAM при котором он в nslcd лазить не будет

# cat common-auth  | grep -v  \#

auth	[success=1 default=ignore]	pam_unix.so nullok
auth	requisite			pam_deny.so
auth	required			pam_permit.so





а вот так когда будет


$ cat /etc/pam.d/common-auth  | grep -v '#'

auth	[success=2 default=ignore]	pam_unix.so nullok
auth	[success=1 default=ignore]	pam_ldap.so minimum_uid=1000 use_first_pass    <<<<*****!*!*!*!*!*!*!*!*!*
auth	requisite			pam_deny.so
auth	required			pam_permit.so



тоесть если хочешь чтобы PAM начал "аутентифицировать через LDAP" то бишь чтобы он начал обращатся к nslcd
то для этого нужно в PAM конфиге прописать модуль которым этим занимается.



вот целая куча конфиг файов куда нужно этот модуль прописвыать в PAM


~$ grep  ldap   -H /etc/pam.d/*  
/etc/pam.d/common-account:account	[success=ok new_authtok_reqd=done ignore=ignore user_unknown=ignore authinfo_unavail=ignore default=bad]	pam_ldap.so minimum_uid=1000

/etc/pam.d/common-auth:auth	[success=1 default=ignore]	pam_ldap.so minimum_uid=1000 use_first_pass

/etc/pam.d/common-password:password	[success=1 default=ignore]	pam_ldap.so minimum_uid=1000 try_first_pass

/etc/pam.d/common-session:session	[success=ok default=ignore]	pam_ldap.so minimum_uid=1000

/etc/pam.d/common-session-noninteractive:session	[success=ok default=ignore]	pam_ldap.so minimum_uid=1000


забегая вперед скажу что руками это делаь непридется.

скажу что есть прога sssd которая более соврменная и замудреная.

скажу что полезные источники по ldap (правда при условии когда уже знаешь тоесть как напоминалка это 

https://wiki.archlinux.org/title/OpenLDAP
https://wiki.archlinux.org/title/LDAP_authentication

у меня sssd так и не пполучиось настроить. правда я нашел в уазанных ссылках что он обязатеьно требует
чтобы на LDAP сервере был подключчен TLS а у меня эта фишка небыла установлена. может из за этого и неработало.

итак схема такая - когда мы ввели логин пароль то PAM начинает запускать модули указанные в ее конфиге
и эти модули начиают искать данный логин и пароль в разных источниках.
один модуль такой как  

      pam_unix.so 

наичнает искать логин и пароль в локальных файлах на диске.
если там этого нет то поиск передается другому файлы нпример pam_ldap.so который будет исктаь
логин пароль в лдап сервере. вот как это работает. 
поэтому если мы хотим чтобы наш логин пароль исклся на лдап сервере то мы должны в /etc/pam.d/* добавить 


      pam_ldap.so


это первый шаг.
на втором шаге этот модуль начинает искать nslcd прогу. и ей передает запрос.
она смотрит  в свой конфиг и там ищет параметры лдап сервера. и пердает ему запрос.
поэтому на втором шаге нужно поставить nslcd прогу и указать там параметры   лдап сервера.
таким макаром настрвиается лдап клиент.


итак как работает аутенфтикаия на линуксе через лдап севрер

   login ---> PAM (pam_ldap.so) ---> nslcd ---> ldap server



у меня уже есть лдап сервер. так что займемся теперь на практике настройкой подключения 
аутентяиациии через лдап.
здесь кстати засада. на Debian пролем нет. там по дефолту ставится NSLCD и все окей потому что я знаю как 
его настраивать.
а на Centos там по дефолту ставится SSSD и его настроить у меня так и не полусилось поэтому 
там нужно помудить чтбоы устаноить NSCLD

ксатти есть два демона

   NSLCD
   NSCD


первый занимается как раз таки связью с лдап сервером. это типа лдап клиент.
а второй это демон который кэширует в своем теле ттот результат который получил nslcd, делается это для того
чтобы при птворном запросе нелазиьт в инет а поискать уже имеющийся ответ в кеше. так вот в настройках NSCD 
есть таймауты для успешных ответов от лдап сервера и есть таймауты для храрения  о том что лдап срвер 
недоступен или то что ответ получен пустой.  и получается так что если по какйото причичне связи с лдап
сервером небыло или мы получили пустой ответ то NSCD сохраняет этот пустой результат и если 
мы повторно буедм вызывать команду нармриер 

   getent  hosts vasya

то мы от nscd будем получать пустой ответ. запросов в сеть не будет. поэтому нужно тщательно настривать 
таймайты для NSCD , чтобы если у него в кеше был пустой ответ чтобы он его нехранил долго. я об этом
моменте еще упомяну.


еще у нас помимо PAM также лдапом может пользоваться NSS.
у него есть вот такая строка


 cat /etc/nsswitch.conf  | grep -v '#'

passwd:         files systemd
group:          files systemd
shadow:         files
gshadow:        files





далее  я малек освещаю почему у нас и NSS может получать инфо о  пароле юзера и PAm


ВОПРОС: Смотри вот  я ввожу логин пароль вступает в силу PAM
он лезет в папку /etc/pam.d
и там ищет модули которые ищут логин пароль в разных источниках
например 

pam_unix.so

он ищет логин пароль в лоальных файлах.

или модуль 

pam_ldap.so

он через nslcd ищет пароль в лдап.

так вот.  помимо PAM у нас еще есть NSS
цитирую что это такое

 The Name Service Switch (NSS) configuration file, /etc/nsswitch.conf, is used by the GNU C Library and certain other applications to determine the sources from which to obtain name-service information in
       a range of categories, and in what order.  Each category of information is identified by a database name.

       The  file  is plain ASCII text, with columns separated by spaces or tab characters.  The first column specifies the database name.  The remaining columns describe the order of sources to query and a lim‐
       ited set of actions that can be performed by lookup result.


тоесть NSS это такой набор либц функций которые делаю вот что - ты им на входе даешь 
некий ключ (имя) а они его "резолвят" в некую хрень в зависимости от класса резолвинга которые ты зказываешь.

например    есть резовинг  имени в HOSTS. тоесть ты на вход одной из функий NSS даешь имя а она тебе возвращает  ип адрес. 

так вот у NSS есть класс резолвинга называемый  PASSWD
который делает вот что 

якобы данный тип резовлинга преобразует на входе ИМЯ на выходе в 
     User passwords,  and related functions.  например через функцию getpwent(3))

читаю про эту фунцию

The  getpwent()  function  returns  a pointer to a structure containing the broken-out fields of a record from the password database
тоесть он нам веренет вот такой структ 

   struct passwd {
               char   *pw_name;       /* username */
               char   *pw_passwd;     /* user password */
               uid_t   pw_uid;        /* user ID */
               gid_t   pw_gid;        /* group ID */
               char   *pw_gecos;      /* user information */
               char   *pw_dir;        /* home directory */
               char   *pw_shell;      /* shell program */
           };

тоесть NSS это набор либц функций  которые разбиты на классы.
каждый  класс резолвит ИМЯ на входе в  некий массив данных на выходе.  суть этого массива
на выходе завсиит от класса фунции. 

примеры классов HOSTS, PASSWORD.

если я запущу функцию gethostbyname() которая использует NSS то она зарезволит 
ИМЯ в ип адрес. 

если я заюзаю фунцию   getpwent() то через нее NSS вернет  вот такой массив


   struct passwd {
               char   *pw_name;       /* username */
               char   *pw_passwd;     /* user password */
               uid_t   pw_uid;        /* user ID */
               gid_t   pw_gid;        /* group ID */
               char   *pw_gecos;      /* user information */
               char   *pw_dir;        /* home directory */
               char   *pw_shell;      /* shell program */
           };


файл nsswitch.conf  позволяет для разных классов задать  те места где NSS будет
искать данный класс ответа. 
если укажем 
  HOSTS  file

то NSS при резолвинге типа HOSTS  будет искать инфо в локалных файлах

если укажем 

  HOSTS  ldap

то NSS будет искать данны резволинг на лдап сервере. 

мой вопрос заключается в том что  подсистема NSS   умеет искать  логин пароль,
по сути системе PAM тоже приходится делать тоже самое. однако почемуто PAM
насклокьо я понимаю в своей работе неисползует NSS . Почему?

второй вопрос - почему вообще в NSS добавили класс PASSWORD, ведь поиском пароля и аутентификацией занимеется PAM так нахер в NSS добавили возможность искать пароль.

ОТВЕТ ОТ ИИ: Отличные вопросы! Давайте разберёмся по порядку.

1. Почему PAM не использует NSS для поиска логина/пароля?
PAM и NSS решают разные задачи, хотя и могут взаимодействовать с одними и теми же источниками данных (например, /etc/passwd, LDAP).

NSS (Name Service Switch) — это механизм для получения статической информации о пользователях, группах, хостах и т.д.
Например, когда команда id user или getent passwd user выполняется, NSS ищет записи в указанных источниках (files, ldap, nis и т.д.) и возвращает структуру passwd.
Но NSS не занимается аутентификацией! Она просто предоставляет данные.

PAM (Pluggable Authentication Modules) — это механизм аутентификации и управления сессиями.
PAM не просто получает пароль, а выполняет весь процесс проверки подлинности:

Может использовать разные методы аутентификации (пароль, OTP, биометрия, сертификаты).

Может применять дополнительные проверки (учётная запись заблокирована? пароль просрочен?).

Может вести логи, применять политики сложности паролей и т.д.

Почему PAM не полагается на NSS?
Разные задачи: NSS даёт только данные, PAM — выполняет аутентификацию.
Например, PAM может проверить пароль через pam_unix.so (сравнивая хеш), через pam_ldap.so (спрашивая LDAP-сервер), или даже через pam_google_authenticator.so (проверяя OTP).
NSS же просто возвращает строку pw_passwd (которая может быть x, если пароли хранятся в /etc/shadow).

Гибкость PAM: PAM поддерживает стэкинг модулей (например, сначала проверить пароль в LDAP, потом запросить 2FA).
NSS работает по принципу "первый источник, который ответил — и есть истина".

Безопасность: PAM может использовать более сложные схемы (например, Kerberos), где пароль вообще не передаётся.
NSS же просто возвращает данные в открытом виде (например, getent passwd покажет информацию о пользователе, но не пароль).

2. Зачем в NSS добавили PASSWD, если аутентификацией занимается PAM?
Класс PASSWD в NSS нужен не для аутентификации, а для получения информации о пользователях.

Примеры использования:
Команды вроде ls -l используют getpwuid() (через NSS) для преобразования UID в имя пользователя.

getent passwd выводит список пользователей из всех источников, указанных в nsswitch.conf.

Скрипты и приложения могут запрашивать информацию о пользователе (например, домашний каталог, shell) через getpwnam().

Почему это отделено от PAM?
NSS (PASSWD) — даёт статическую информацию: имя, UID, GID, домашний каталог, shell.

PAM — занимается динамическими процессами: проверка пароля, управление сессией, контроль доступа.

Да, иногда они пересекаются (например, оба могут обращаться к LDAP), но:

NSS запрашивает атрибуты пользователя (uid, homeDirectory).

PAM выполняет операции аутентификации (проверка пароля, блокировка учётки после неудачных попыток).

Выводы
NSS (PASSWD) нужен для получения информации о пользователях (например, для команд типа id, ls -l, getent passwd).

PAM нужен для аутентификации (проверка пароля, 2FA, блокировка учётки).

PAM не использует NSS, потому что:

NSS не умеет аутентифицировать (только даёт данные).

PAM поддерживает сложные сценарии (многофакторная аутентификация, политики паролей).

Класс PASSWD в NSS существует, потому что системе и приложениям часто нужна информация о пользователях, даже если аутентификация происходит через PAM.

Пример:
Когда вы вводите login, сначала NSS (PASSWD) проверяет, существует ли пользователь (через getpwnam()).

Затем PAM проверяет пароль (через pam_unix.so или pam_ldap.so).

Без NSS система не знала бы, например, какой /home/user назначить пользователю.

Так что это две разные, но дополняющие друг друга подсистемы.



далее. прикол в  том что массив которые NSS вовзраащает если мы юзаем его функцию класса PASSWD

struct passwd {
    char *pw_name;    // имя пользователя
    char *pw_passwd;  // обычно "x" (пароль в /etc/shadow)
    uid_t pw_uid;     // UID
    gid_t pw_gid;     // GID
    char *pw_gecos;   // комментарий
    char *pw_dir;     // домашний каталог
    char *pw_shell;   // shell
};

так вот этот массив он в поле   pw_passwd всегда содержит "x" . тоесть хеш пароля мы никогда
не получаем. потому что поиск идет в /etc/passwd а хеш хранится в /etc/shadow в котором NSS искать судя
по всему запрещено.  а разрешено толко PAM



получается класс PASSWD в NSS это на самом деле обман! он неищет никакой  пароль! он ищет
всякую доп инфо об пользователе причем пароль сюда не входит.  тоесть по хорошму PASSWD нужно было бы назыать USERINFO
по факту этот класс так называется потому что инфо в этом классе изначально искалась   в файле /etc/passwd
(поэтому и класс назвыали PASSWD) а в этом файле когда то давно содеражся реаьно пароль юзера да еще в открытом
виде! но эти врмена давно прошли! а название класса мислидинг осталось!

прикол в том что NSS имеет другой класс

  shadow

который означет что истоически  при взывове фунции которая относится к этому классу то NSS лезла в файл /etc/shadow
и NSS вовзращал вот такой структ

 struct spwd {
                 char      *sp_namp; /* user login name */
                 char      *sp_pwdp; /* encrypted password */
                 long int       sp_lstchg; /* last password change */
                 long int       sp_min; /* days until change allowed. */
                 long int       sp_max; /* days before change required */
                 long int       sp_warn; /* days warning for expiration */
                 long int       sp_inact; /* days before account inactive */
                 long int       sp_expire; /* date when account expires */
                 unsigned long int   sp_flag; /* reserved for future use */
           }



и в нем уже есть хеш пароля.


итак PAM сам лазиит по разным источикам ищет там аутентфиацикаионную инфо и принимает решения об
том что одобрит вход юзера или нет.  тоесть он сам условно говоря ищет логины паролив разных источниках
для этой работы от NSS неисопьзщует. он делает это сам. и также он  принимает решениея на основе этого
давать добро на вход юзеру или нет.  

NSS это группа функций которые делают резолвинг. они на входе ждут ИМЯ и "резволят" его в некий массив
какихто данных свойств для этого имени.  сушность этих данных зависит от того класса к которому относится
эта фунция. 

у NSS есть класс shadow который умеет искат в /etc/shadow

завабно то что в /etc/shadow хранится только id юзера и хеш пароля
а в /etc/passwd хранися имя юзера и логин  а пароля нет

в shadow
noroot:$i8XC:20262:0:99999:7:::

в passwd
noroot:x:1000:1000:Alex:/home/noroot:/bin/bash

тоесть чтобы PAM проверить логин пароль то ему нужно слазить в оба файла!


так вот логично по идее чтобы PAM использовал NSS как транспортную систему которая
умеет лазить в файлы а PAM уже бы просто анализировал результаты  но почему то PAM лазииит в файлы сам 


итак у нас PAM и по файлам шарится и на основе этой инфо принимает решение об атунетификации.
а NSS в плане юзера умеет выдавать некоторые свойства которые этот юзет имеет - типа дом папка.
тоесть NSS умеет предтслвть некую ментовскую стаститику по юзеру. 
тоесть PAM его об юзере интерecует только найти логин пароль условно. и потом понять совпдаает ли 
это с тем что ввел юзер. осальные детали про юзера его не интереуют. а NSS он умеет по запросу
выдавать разные другие детали об юзере (домашняя папка , его id, его группы ).

тоесть юзер в линуксе имеет целую кучу атриубутов. PAM берет тлько его два атрибута ищет
и потом решает пускать его или нет.
NSS умеет находить и нам выдавать об юзере все остальные его атрибуты , ацтентикацией не занмается.
просто умеет нам выдывать досье на юзера. 


таким макаром - если у нас досье на юзера хранится в LDAP (тоеть и логин и группы и id и пароль  и другие
параметры тоесть все досье) то в линуксе нам нужно настроить уметь ходить на лдап сервер и PAM
подсистему и NSS подсистему.




итак начинаем подулючать линукс машину в качестве клиента к лдап серверу.
причем будем наблюдать как у нас при этом меняются конфиги в  папка /etc/pam.d  и файле /etc/nsswitch.conf





	# grep ldap /etc/pam.d/*
	# grep ldap /etc/nsswitch.conf 

пока пусто

     # apt-get  install -y ldap-utils libpam-ldapd libnss-ldapd nscd


на экране появится окно где нас спросят про ип адрес ЛДАП сервера
вводим там

    ldap://172.16.10.20

также там появится окно в котором нас попросят ввести так назывемый LDAP DN 
что это такон я буду обьяснят пожже. а пока я скажу что лдап это типа древовидная структура
типа файловой системы. так вот если на ФС у нас самый верх обозначается всегда одинаково как "/"
то в лдап самый верх дерева имеет имя его нужно узнавать у админа лдап сервера.
например это 

   cn=company, cn=local


это мы указали параметры доступа на лдап сервер.
далее вылезет картинка на которой нужно указать  в какие КЛАССЫ NSS мы хотим добавить 
поиск данных в этом лдап сервере.  сами классы всегда можно подмотреть в 

     man nsswitch.conf

   aliases     Mail aliases, used by getaliasent(3) and related functions.

       ethers      Ethernet numbers.

       group       Groups of users, used by getgrent(3) and related functions.

       hosts       Host names and numbers, used by gethostbyname(3) and related functions.

       initgroups  Supplementary group access list, used by getgrouplist(3) function.

       netgroup    Network-wide list of hosts and users, used for access rules.  C libraries before glibc 2.1 supported netgroups only over NIS.

       networks    Network names and numbers, used by getnetent(3) and related functions.

       passwd      User passwords, used by getpwent(3) and related functions.

       protocols   Network protocols, used by getprotoent(3) and related functions.

       publickey   Public and secret keys for Secure_RPC used by NFS and NIS+.

       rpc         Remote procedure call names and numbers, used by getrpcbyname(3) and related functions.

       services    Network services, used by getservent(3) and related functions.

       shadow      Shadow user passwords, used by getspnam(3) and related functions.



так вот нам достаточно в NSS указать чтобы он лазил в лдап для трех классов

	[*] passwd
	[*] group
	[*] shadow


это привелет к тому что в /etc/nsswitch.conf 
было вот так

passwd:         files systemd 
group:          files systemd 
shadow:         files 


а станет вот так

passwd:         files systemd ldap
group:          files systemd ldap
shadow:         files ldap




в ходе этой инстаыляции  у нас поменются файлы в 

        /etc/pam.d/*

        /etc/nsswitch.conf


и также так как были устаноавлены пакеты новые то появтся новые важные конфиги

	/etc/nslcd.conf
	/etc/nscd.conf




в PAM появятся вот такие изменения:

