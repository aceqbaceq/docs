nginx


curl как в нем указать http-header HOST

$ curl --location --request GET 'https://dog.ceo/api/breeds/list/all' \
--header 'HOST: vasya'

---

HTTP это stateless протокол. поэтому каждый запрос независит друг от друга.
---

HTTP это проотокол уровня приложения. как я это понимаю на практике. 
что через файловый дескриптор в процесс втекает текст. тоесть получение данных по HTTP это процесс из файлового дескприптора сосет текст форматрованный.
отравка по HTTP это запись в файловы дескриптор текста форматрованного. вот и все.
таким образом http сервер это процесс который должен уметь читать форматрованный текст и писать форматрованный текст.
вот и вест секрет в фразе web сервер.
также как тестовый редактор читает текст из файла таки веб сервер читает банальный текст и файла. просто это файл не сдиска а с сетевого сокета. но процессу это все равно.
он работает с файлоывм дескриптором.
------


HTTP реквесты и респонсы имеют одинаковую структуру:

start-line
блок header параметров + Enter (оппциональный блок)
Enter
блок body (опциальнальный блок)

если реквест или респонс имеет блок body то это отражаено в секции хедеров.
The presence of a message body in a request is signalled by a Content-Length or Transfer-Encoding header field. 

далее. разберем части.
start line (состоит из) = method + resource path + HTTP protocol version


пример start line: 

GET /test.htm HTTP/1.1


GET = метод
/test.html = путь к запраиваемому ресурсу. путь указывается относииельный (relaive path, relative URI, URI)
HTTP/1.1 = версия протокола

---
ответ от сервера вместо метода содержит RESPONSE CODE/STATUS CODE

status коды распределются по группам:

1xx – Informational
2xx – Successful
3xx -Multiple Choice
4xx– Client Error
5xx -Server Error

---

виды реквестов:

GET – Requesting resource from server
POST – submitting a resource to a server (e.g. file uploads)
PUT -As POST but replaces a resource
DELETE-Delete a resource from a server
HEAD – As GET but only return headers and not content
OPTIONS -Get the options for the resource
PATCH -Apply modifications to a resource
TRACE -Performs message loop-back

---
прикол http в том что если бы люди руками состаовляли реквесты то было бы понятно как 
http рабоатет. а нам сразу дали браузеры. то есть графиечские клиенты. которые за нас начали составлять тела реквестов.

---

формат headers.


имя хидера:значение1,значение2,значение3

имя хидера = оно case несенстиив
значения - они case sensitive

например
cache-control: no-cache,no-store,must-revalidate

---
далее 
про хидеры.
connection 
хидер.


конектимся на веб сервер через телнет

$ telnet paidsupport.example.kz 80

устаналивается tcp канал. а для процесса открываетс файловый десприптор. куда можно писать и откуда читать процессу.


далее. мы берем и руками пишем

GET / HTTP/1.1
HOST: paidsupport.example.kz
user-agent: vasya
connection: close
Enter


что дает хедер 
connection: close

он дает то что веб сервер нам посылает ответ и закрыват tcp содениение.

покольку установление tcp содениения это нехилые накладыне расходы то можно дать хидер который скажет веб серверу чтобы он после тго как отошлет ответ
незакрыал tcp содениенеи. а ждал нашего следущего реквеста. это хидер connection: close

тоесть

GET / HTTP/1.1
HOST: paidsupport.example.kz
user-agent: vasya
connection: keep-alive
Enter


для второго запроса нужно вводить тот же самый полный комплект http реквеста .тоеть 


GET / HTTP/1.1
HOST: paidsupport.example.kz
user-agent: vasya
connection: close
Enter


---
следущий
head 
хидер.


нафиг он сдался.  дело в том что на одном веб сервер может хоститься туча веб сайтов. поэтому когда веб сервер получает реквест ему надо понять
для какго веб сайта он предназначен. и этот факт ему уточняет от клиента хидер host.
вот зачем он сдался.


Host:www.steves-internet-guide.com
-----

user-agent
хидер

он для чисто справки сообщает веб серверу что за клиент обращается к веб серверу. но в целом веб серверу по мне эта инфорация похеру. потому что 
неажно какой клиент. ибо любой клиент пишет запрос по одному и тому же формату http. тоесть в целом запрос одинаков к оодному ресурсу от любого клиента.

user-agent: vasya

---
accept
хидер.

accept хидер tells the server what formats the client can understand.

я попробовал. но чтото как то в целом веб сервер срал на нашу к нему эту инфо. тоесть

GET / HTTP/1.1
host: paidsupport.example.kz
connection:keep-alive
accept: text/plain


и поулчил ответ

HTTP/1.1 200 OK
Server: nginx/1.20.1
Date: Mon, 14 Nov 2022 21:28:46 GMT
Content-Type: text/html
Content-Length: 254
Last-Modified: Sun, 23 Oct 2022 13:14:09 GMT
Connection: keep-alive
ETag: "63553e21-fe"
Accept-Ranges: bytes


как видно ответ был нам выдан в формает совсем другом  = Content-Type: text/html


---
HEAD
метод 

вотличие от GET он просит чтобы веб сервер в совем репонсе неотдавал body в ответе. 
очень удобно.


HEAD / HTTP/1.1
host: paidsupport.example.kz
connection:keep-alive
accept: text/plain


$ curl --head  -v http://paidsupport.example.kz
> HEAD / HTTP/1.1
> Host: paidsupport.example.kz
> User-Agent: curl/7.58.0
> Accept: */*


---
по поводу достукивания до веб сервера по http протоколу.
для этого достаточно telnet проги.
что ей надо сделать. ей надо сделать реквест к ядру чтобы оно создало сетевой tcp сокет.
когда tcp конект ядро установит , то оно создаст сокет а процессу подсунет файл дескрпитор.
а телнет затем просто будет в него писать уже текст.


для HTTPS соденненеия telnet уже некатит ибо он немуеет делать ряд вещей. 
для https соденения процесс должен попросить ядро  вначале созадать tcp сокет. 
а потом чере этот tcp сокет надо еще прогнать туда сюда сертифкаты это тоже как там наверное делает ядро. незнаю.
и в итоге уже процессу будет подсунуть файл дескриптов который ведет в защищенный канал условно говоря. вобщем прога должна 
уметь через tcp канал прогнать сертификаты и создать защищенный канал. что из этого делает делает процесс а что из этого делает ядро
по заказу процесса незнаю. наверно ssl тонель делает ядро а сертификаты ему в сисколл процесс сует как параметры.
и вобщем чуда и магии в https нет.

-----
nginx

его параметр  

server_name: A  

это в точности хидер 

host: A

тоест этот параметр на нжинксе обьясняет нжинксу HTTP реквесты с каким реквест хидером host:
должны быть направлены на обработку в блок 

server {
	server_name: A

}  




---

важная тема 

server_name "_"   vs    listen 80 default_server




пусть есть конфиг


server {
	listen 80;
	server_name "a.local";
}


server {
	listen 81;
	server_name "b.local"
}


server {
	listen 80;
	server_name "c.local"
}


разбрем какой сервер блок в итоге будет выбран для ответа на реквест из интернета.
каждый реквест когда его пуляют он содержит dest_ip:port это на уровен протокола tcp. данный реквест пртлетает в некоторый сокет на веб сервер.
а из сокета он попадает в файл дескриптор который слушает нжинкс. 


путь у нас dest_ip:80
значит на этом сокете у нас нжинкс навесит два сервер блока a.local и c.local

так вот получив через файл дескрпитор реквест из инета от клиента как жинксу понять какой сервер блок нужноприменить для формирования ответа.
вот скажем наш реквест из инета:


HEAD / HTTP/1.1
host: a.local
connection:keep-alive
accept: text/plain


это ровно тот текст который серез десприптор влетит прям в процесс жинкса.  и тут на помощь приходит хидер host^ из реквеста.
host: a.local

жинкс начинает среди сервер блоков котоые на 80 порту сравнивать его с полем server_name в своих сервер блоках. и если такой сервер нейм будет найдет
то такой серер блок и будет использован для формрования ответа!!!!!
в нашем случае это сревер блок


server {
	listen 80;
	server_name "a.local";
}


но дело в том что блок хидеров согласно http стандарту яявлетс опционльным. поэтому в том числе и хидер "host:" он тоже опциалньный. 
значи из интета может приелетть реквест без хидедар host: 

вот такой реквест

$ telnet dest_ip 80

HEAD / HTTP/1.1
connection:keep-alive
accept: text/plain


 и это легитимно по протоколу HTTP. а что тогда делать жинксу.
он делает вот что. он берет все сервер блоки которые сидят на 80 порту ( 80 порт потому что в нашем реквесте мы юзаем dest_ip:80)
и потом как я понял если сервер блоки указаны в одном файле то он среди них выбирает тот блок который самый верхний и будет с помощью него обрабатывать 
реквест из инета в незаиивимосмти какой server_anme указан в этом среверблоке. а что если у нас сервер блоки рабросаный по куче отдеьных сайтов. какой из них будет
заюзаа? в доке от жинкса ответа нет. как  понимаю будет взят тот файл с серверблоком у которого по алфавиту первя буква стоит вначале.

так вот такая система что у нас сервер блок на который будет направлен реквест у которого 
либо вообще нет хидера host: 
либо реквест   у которого host: такой что  на сервере ни в одном блоке нет такого server_name
как бы от нас требует более явного способа указать какой же сервер блок будет обрабатываьт такой реквест вместо того чтобы сидеть и прикидывать 
какой же сервер блок у нас первый по алфавитному списку. и таклй более явнй формальный сопосб у жинкса есть состоит в том что в сервер блоке
всегда есть  опция 

listen port;

так вот мы  внутри не дбавляем слово default_server тоест

server {
	listen 80 default_server;
	....
}

вот этот сервер блок указан  явно и именно он будет исползован для обработки всех стремных с точки зрения хидера host: реквестов.
далее мы вспминаем что вообще то в серврер блоке надо указыать server_name какойто. ну а какой нам тут указать. ответ - вобще то можно любой. но лучше указать 
такой которго в реаьном реквесте никогда небудет. например 

serrver_name _;

или

server_name vasya12_kuku1!!!!!+++---;


поэтому в итоге такой серер блок будет выглядеть:

server {
	listen 80 default_server;
	serrver_name _;
}




абсолютно такой же равнозанный сервер блок как альретернатива выглядит как:

server {
	listen 80 default_server;
	server_name vasya12_kuku1!!!!!+++---;
	}


зачем же нам вобще в этот блок вклюать server_name если он все равно не совпдает  с  хидером host: от корявого реквеста.
по первых потому что если мы сам не пропишем server_name руками в сервер блок то жинкс незримо тггда счиитает что в сервер блоке прописано вот такой
сервер нейм

server {
	listen 80 default_server;
	server_name "";
	}


данный сервер нейм аналогичен тому что в рекввесте остуствует вообще поле host:
в целом любой сервер нейм из списка

	serrver_name _;
	server_name vasya12_kuku1!!!!!+++---;
	server_name "";


прокатит для использваония для дефолтвого серве блока, 
люди обычно по незримой конвенции юзают serrver_name _;
но важно понять что он неимеет какйото реальной силы.  любые другие с мусором (как у нас в списке) подходят.
можно не указывать вообще тогда жинкс подствить свой дефолтовый server_name "";

далее. почему нам лучше использвовать невероятный server_name 
потому что если сервер будет более менее реалистичный то так ожет получиться что к нам из инета прилетит реквест с таким хидером host:
и тогда этот сервер блок будет выбран не из за опции  listen 80 default_server; а именно из за опции server_name ну а это как бы неочен правльно 
помуточто скорей всего в таком блоке будет стоять автоотлуп с ошибкой 404, потому что мы заводим такой блок чисто для отлупов мусорных реквестов.

теерь стало понятно как жинкс вбирает серввер блоки когда приетает реквест. 
какую силу имеетт оация  listen 80 default_server;
и то что опция serrver_name _; не имеет никакой сверх силы. вобще никакой. 

ссылки откуда я все это узнал
http://nginx.org/en/docs/http/request_processing.html
http://nginx.org/en/docs/http/server_names.html


надо понять что опция  listen 80 default_server;  имеет реальную силу у жинкска
а опция serrver_name _; неимеет никко силы а скорее это визуаьльный признак что в этом блоке скорей всего человек заюзал опцию listen 80 default_server;
а если человек не заюзал опцию listen 80 default_server; в этом сервер блоке то тогда в такой блок никодга ни один реквест непоадает  и это просто бесползный сервер блок
пример 

server {
	server_name _;
	}



ни один ревест в таой серер болк никогда неоппдает!


остсусивтие опции server_name в сервер блоке ознаачает что жинкс туда автоматом подставить свой дефолтову опцию

server_name "";

что аналогично в реквесте  отсуствувию хидера host: вообще


====

у нжинкс в конфиге идет несколько секций.
щас про логи.
дело в том что настройки логов нужно прописывать в каждлй секции.
если настройка логов идет только в шапке конфига но нет в секции ниже
то логирование запросов из этой секции небудет выполняться!!!! 

тоесть

site.conf

acc_log ...
err_log



location / {
...
}

вот запросы попадающие в секцию / не будут логироваться !!!

===

как узнать из какх файло нжикс читает конфиги сайтов.

ответ

nginx -T

=====

| nginx
| php

про то как настроить nginx + php


вначале нужно установить php, php-fpm (в чем у них разница пока как в тумане)



добавляем репозиторий с php

# cat ondrej-ubuntu-php-jammy.list 
deb        https://ppa.launchpadcontent.net/ondrej/php/ubuntu/ jammy main
deb-src    https://ppa.launchpadcontent.net/ondrej/php/ubuntu/ jammy main

тут важно сказаьть насчет jammy. на самом деле вместо jammy нужно вставлять ту версию
убунты которая у нас стоит. если bionic значит bionic, если jammy то jammy

# apt-get update
получаем ошибку
 GPG error: https://ppa.launchpadcontent.net/ondrej/php/ubuntu jammy InRelease: 
 The following signatures couldn't be verified because the public key is 
 not available: NO_PUBKEY 4F4EA0AAE5267A6C

нужно импорторвать gpg ключ

# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4F4EA0AAE5267A6C
# apt-key list
# apt-key export 14AA40EC0831756756D7F66C4F4EA0AAE5267A6C | sudo gpg --dearmor -o /usr/share/keyrings/ondrig-launchpad-php.gpg


теперь редактируем репозитрий прописываем ключ:
# cat ondrej-ubuntu-php-jammy.list 
deb  [arch=amd64 signed-by=/usr/share/keyrings/ondrig-launchpad-php.gpg]      https://ppa.launchpadcontent.net/ondrej/php/ubuntu/ jammy main
deb-src [arch=amd64 signed-by=/usr/share/keyrings/ondrig-launchpad-php.gpg]   https://ppa.launchpadcontent.net/ondrej/php/ubuntu/ jammy main

теперь apt-get update продйет без ошибок


далее смотрим как версии php нам доступны

# apt-cache search php

или

# apt-cache madison php7.0
если через madison то важно именно указать php7.0

а вот такой вариант 
# apt-cache madison php
нам не покажет то что надо



ставим пакеты php
# apt-get install php7.0
# apt-get install php7.0-fpm
# systemctl enable php7.0-fpm
# systemctl start php7.0-fpm
# systemctl status php7.0-fpm


к php можно конектится либо через сокет либо по сети.
будем конекиттс через сокет. он лежит в файле /run/php/php7.0-fpm.sock
это нам дальше пригоится


ставим nginx

#apt-get install nginx
# systemctl enable nginx
# systemctl start nginx


заменяем конфиг жинкса


# cat /etc/nginx/sites-enabled/default 
server {
  # Example PHP Nginx FPM config file
  listen 80 default_server;
  listen [::]:80 default_server;
  root /var/www/html;

  # Add index.php to setup Nginx, PHP & PHP-FPM config
  index index.php index.html index.htm index.nginx-debian.html;

  server_name _;

  location / {
    try_files $uri $uri/ =404;
  }

  # pass PHP scripts on Nginx to FastCGI (PHP-FPM) server
  location ~ \.php$ {
    include snippets/fastcgi-php.conf;

    # Nginx php-fpm sock config:
    fastcgi_pass unix:/run/php/php7.0-fpm.sock;
    # Nginx php-cgi config :
    # Nginx PHP fastcgi_pass 127.0.0.1:9000;
  }

  # deny access to Apache .htaccess on Nginx with PHP, 
  # if Apache and Nginx document roots concur
  location ~ /\.ht {
    deny all;
  }
} # End of PHP FPM Nginx config example



в нем уже прописан путь к сокету php.

корневая папка /var/www/html

копируем туда 27.php файл


# cat /var/www/html/27.php 
<?php
   session_start();
   
   if( isset( $_SESSION['counter'] ) ) {
      $_SESSION['counter'] += 1;
   }else {
      $_SESSION['counter'] = 1;
   }

$_SESSION['variable1'] = "Test1";
$_SESSION['variable2'] = "Test2";


echo $_SERVER['HTTP_USER_AGENT'];
 

$_SESSION['variable3'] = $_SERVER['HTTP_USER_AGENT'];

    
   $msg = "You have visited this page ".  $_SESSION['counter'];
   $msg .= "in this session.";
?>




в чем фишка этого файла.
он создает php сессию при обрашении.

эта сессия это файл который хранится в папке. путь к этой папке можно узнаь через 

# php -i  | grep session.save_path
session.save_path => /var/lib/php/sessions => /var/lib/php/sessions


в чем фишка этого конкретно 27.php в том что он в файл сессии (или просто сессия) записывает
параметр User-Agent клиента.


протестровать можно либо через граф браузер

http://127.0.0.1/27.php

либо через curl. 

#  curl -A "Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/81.0" http://127.0.0.1/27.php
Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/81.0


и тогда в файле сессии мы увидим

# cat /var/lib/php/sessions/sess_9u6eh6rlproca6r0p1hdp0ipo4 
counter|i:1;variable1|s:5:"Test1";variable2|s:5:"Test2";variable3|s:68:"Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/81.0";

таким образом мы немного познакомиись с сессяими в php
и также мы увидели как можно в сессию добавлтять свои любые переменные и данные.

мы увидели в частности что параметр User-Agent  будет ли он пристссоввать в сессиии или нет
зависит не от настроек на nginx или php сервере а от кода самой пользовательской 27.php странциы

=====

про то как ограничить доступ к  локации через IP адреса либо через пароль либо комбинируя.


первый сопособ это чтобы ограничить доступ по IP адресам. это позволяет модуль ngx_http_access_module
по факту это выглядит как добавление allow\deny  в локацию

  location / {
...
        allow 172.16.0.19/32;  
        deny all;
   }


правила обрабабываются сверху вниз до первого совпадегия. если веерух поставить deny all то остальые правила allow вобще не будут иметь значения.
в это примере в локацию момжно попасть тольео есди src ip = 172.16.0.19 с остальных пошлет на хер.

еше пример


location / {
    deny  192.168.1.1;
    allow 192.168.1.0/24;
    allow 10.1.1.0/16;
    allow 2001:0db8::/32;
    deny  all;
}

если с 192.168.1.1 = то отлуп
если с 192.168.1.0\24 = то пропуск ( при этом 192.168.1.1 был отфильтрован нп предыдущем шаге)
ну и так далее. если дошли до deny all то пошел нахер




второй сопосб это определяеть доступ по паролю
за это отвечает модуль ngx_http_auth_basic_module
по факту этовыглядит как добавление строк с auth_basic


  location / {
        ##
        auth_basic            "Restricted";
        auth_basic_user_file /etc/nginx/settings/.htpasswd;
        proxy_set_header   Authorization "";
        ##
}

при таком рааскалде доступ к локации опредяеся ввел ли клиент верный пароль.



а далее самое интересное -  обьединение этих двух методов 
идет через модуль ngx_http_core_module
юзаем оттуда satisfy.


  location / {
        satisfy  any;

        allow 172.16.0.19/32;  
        deny all;


        auth_basic            "Restricted";
        auth_basic_user_file /etc/nginx/settings/.htpasswd;
        proxy_set_header   Authorization "";
}


satisfy any работтает так --- доступ к локации будет разрешен ТОЛЬКО если выолпнитлся ХОТЯ БЫ один блок условий тот что ниже.
если ни одно условние небудетвыполнено то доступ запрещен.
работает это так - проверка условий идет опять же сверху вниз. вначале проверяется если src ip = 172.16.0.19
если это не так то  проверка перескакивает на блок auth_* если  и там проверка проваливается то пошел нахер.
таким образом если раквест пришел от 172.16.0.19 то он будет пропущен а если с других ip ардресов то надо будет ввести пароль.
я не очень понимаю как в этом раскладе имеет смысл  директива deny all 
потому что под условие deny all подпадают все ip адреса кроме 172.16.0.19 - то есть все другие дают попадание в deny all.
а если deny all убрать то это ни на что не повляет. такое ощущение что эта директива добавляется для красного словца.
тоестьеще раз по фактуработает так - если ip=172.16.0.19 то реквест прходит, если с другого ip то спрашивается пароль.
если пароль верный то проходит а если нет то пошел нахер. deny all какбы вобще никакой роли не играает!!!

есть еще опция satify all;
она уже требует чтобы все модули были выполенны одноврменменно. тоесть



  location / {
        satisfy  all;

        allow 172.16.0.19/32;  
        deny all;


        auth_basic            "Restricted";
        auth_basic_user_file /etc/nginx/settings/.htpasswd;
        proxy_set_header   Authorization "";
}
 

при таком раскалее реквест будет пропущен только если src ip = 172.16.0.19 И  введен верный пароль.

=================

| config

значит поднял я сайт. а на нем одна страница index.html
и все. 
и видно в логах что всякая шваль присывалет хреновые запросы к сереверу
поэтмоу моя задача их отлупаывать нахуй сразу
мой конфиг


# cat /etc/nginx/sites-enabled/default 

server {

        listen А.И.С.Д:80 ;

        server_name Ц.Ц.К.Щ;

        root /var/www/html;


if ($request_method !~ ^(GET)$ ) {
return 444;
break;
}


limit_rate 4k;


    location = /index.html {

    }


    location ~ (?!index.html$) {
        deny all;
        return 444;
    }


error_page 404 = @notfound;
error_page 402 = @notfound;
error_page 400 = @notfound;


# error page location redirect 444
location @notfound {
    return 444 /;
    break;
}



}



значит из чего состоит этот конфиг

какую сетевую карточку слушать
        listen А.И.С.Д:80 ;

где находится корень с файлами сайта
        root /var/www/html;


этот кусок о том что если метод в HTTP запросе не GET то 
в ответ летит пошел нахуй

if ($request_method !~ ^(GET)$ ) {
return 444;
break;
}

444 означает что в ответ не будет послано ничего - нечего тратить сетевой трафик.
соединение будет прсто закрыто.


вот эта хрень разрешает получить доступ на сервере к странице /index.html
причем корнем / считается та папка которая
указана в директиве root

    location = /index.html {

    }


вот эта хрень дает отлуп если обращение идет к любой странице кроме /index.html

    location ~ /(?!index.html$) {
        deny all;
        return 444;
    }


вот эта хрень дает то что в тех случаях когда сервер хочет обратно отослать 
веб страницу на которой будет написано ERROR 400, ERROR 404 или ERROR 402 то я вместо этого 
в ответ не шлюнихрена 


error_page 404 = @notfound;
error_page 402 = @notfound;
error_page 400 = @notfound;


# error page location redirect 444
location @notfound {
    return 444 /;
    break;
}


| server

значит в ответе от HTTP сервера на запрос GET в заголовке (header) есть разные поля.
например там есть поле 

		server

что оно значит? нахер оно нужно ?

значит в rfc от HTTP (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) я нашел описание поля server в header ответа от HTTP северра

14.38 Server
The Server response-header field contains information about the software used by the origin server to handle the request. The field can contain multiple product tokens (section 3.8) and comments identifying the server and any significant subproducts. The product tokens are listed in order of their significance for identifying the application.

       Server         = "Server" ":" 1*( product | comment )
Example:

       Server: CERN/3.0 libwww/2.17
If the response is being forwarded through a proxy, the proxy application MUST NOT modify the Server response-header. Instead, it SHOULD include a Via field (as described in section 14.45).

      Note: Revealing the specific software version of the server might
      allow the server machine to become more vulnerable to attacks
      against software that is known to contain security holes. Server
      implementors are encouraged to make this field a configurable
      option.


таким образом в этом поле типа содержится детали об том софте который и обеспечивает работу
HTTP серверар на удаленном сервере. 

насколько я понимаю это поле сугубо опциональное. справочное.

так вот что в этом поле возвращвает nginx который тока что поставили себе на комп

	$ curl --dump-header - http://localhost 2>&1 | grep -i server
	Server: nginx/1.26.2

на мой взгляд это реально тупо палить какой софт крутится на серверере и даже его версию.
значит наша задача убрать эту инфо из ответа от жинкса.

для того чтобы исправить эту информацию нужно в жинксе заюзать в конфиге директиву

		more_set_headers ...

но чтобы ее заюзать нужно в ОС поставить доп пакет.

если ОС = УБУНТУ то для этого нужно на убунту поставит доп пакет

	# apt-get instal nginx-extras

при этом в папку 
		
		/usr/lib/nginx/modules

будет устанолвен файл 

		ngx_http_image_filter_module.so

также будет создан файл 
	
	# cat /etc/nginx/modules-enabled/50-mod-http-headers-more-filter.conf 
	load_module modules/ngx_http_headers_more_filter_module.so;


также  в /etc/nginx.conf
у нас стоит в самом верху еще до всяких секций вот такая опция

	include /etc/nginx/modules-enabled/*.conf;

поэтому жинкс при загрузке за счет этой строки будет подгружать этот модуль при загрузке. 
в этом можно убедиться. 

	# lsof -nP -p 93476 | grep  headers_more_filter
nginx   93476 root    /usr/lib/nginx/modules/ngx_http_headers_more_filter_module.so

и вот этот модуль и дает то что жинкс теперь в конфиге будет воспринмать новую диркетиву


		more_set_headers ...


НО! это было распиано если жикс у нас крутится на ubuntu 
а если ОС = МАНЖАРО то для этого нужно сделать вот так
нужно поставить пакет

	# pacman -Sy nginx-mod-headers-more

и нужно вот этот файл создать САМОМУ РУКАМИ!
нужно создать файл 

  # mkdir -p /etc/nginx/modules-enabled/ 
	# cat /etc/nginx/modules-enabled/50-mod-http-headers-more-filter.conf
			load_module /usr/lib/nginx/modules/ngx_http_headers_more_filter_module.so;


и нужно в /etc/nginx.conf 
добавить строку  в самый верх еще до всяких секций

	include /etc/nginx/modules-enabled/*.conf;

так теперь и жинкс в манжаро у нас подкручен и он теперь понимает
директиву 

		more_set_headers ...


ТЕПЕРЬ 
  когда мудота с установкой пакетов в линуксе закончена. теперь переходим 
  уже к самой директиве:
		нужно в конфиг с веб сайтом в каждую ПОДЧЕРКИВАЮ в каждую секцию "server {}" вставить строку 

				more_set_headers 'Server: VASYA';

	например я вставил в конфиг по этому пути

				/etc/nginx/sites-enabled/default

и вот куда я вставил :

server {
    listen 80 default_server;

    server_name _;
    more_set_headers 'Server: VASYA';   <========== !!!!
    ...
    ...


server {

        server_name XXXX;
        root /var/www/html;

        listen 2.2.2.2:443 ssl;
        more_set_headers 'Server: VASYA';     <========== !!!!
        ...
        ...


теперь проверяем что все сработало 

	# nginx -t
	# nginx -s reload


	$ curl --dump-header -  http://localhost 2>&1 | grep -i ^server
		Server: VASYA

напомню как было

	$ curl --dump-header - http://localhost 2>&1 | grep -i server
	Server: nginx/1.26.2


соотвесвтенно если у нас нетлько http но и https то тоже надо запустить curl
и проверить что там тоже сработало


	$ curl --dump-header -  httpS://localhost 2>&1 | grep -i ^server
		Server: VASYA



а теперь я покажу как выглядит это поле server у разных известных сайтов

		$ curl --dump-header -  https://google.com  2>&1 | grep -i ^server
server: gws

		$ curl --dump-header -  https://chatgpt.com  2>&1 | grep -i ^server
server: cloudflare

		$ curl --dump-header -  https://youtube.com  2>&1 | grep -i ^server
server: ESF


обращаю внимание что если проверяем наш веб сервер то надо проверять и для HTTP 
и для HTTPS и для всех вебсайтов что там крутятся.

а то можно для HTTPS исправит а для HTTP нет и сервер будет палиться.

скорей всего опцию 


	    more_set_headers 'Server: VASYA';  


можно вставить в /etc/nginx.conf
куда то в самый верх. и тогда эта опция будет срабвыать для любых сайтов и для
любых протоколов HTTP/S
но просто при таком подходе обновление жинкса может возможно вызвать перетирание nginx.conf
а мы даже этого не заметим. поэтому я эту опцию засунул в настройки уже файла который
необщий а отвеает за сайт конкеретный. тоеть этот файл обновление жинкс трогать не будет
перетирать

					/etc/nginx/sites-enabled/default


кстати когда мы загрузили тот модуль то можем в ответе нашего жинкса на GET 
запрос добавлять любые кастомные строки указав в конфиге директиву

			 add_header season winter;

тогда вот как жинкс будет  в ответе нам отвечать

		 $ curl --dump-header -  http://localhost 2>&1 | grep -i season
				season: winter



| limit

как ограничиит чтобы с одного IP клиентского у нас на сервер реквесты шли с ограничением
числа реквестов в секунду или минуту. тоесть скажем ест какйото src IP и с него 
можно чтобы число HTTP реквестов было не чаще чем 1 запрос в 20 секунд условно.
а если чаще то сервер отдает HTTP 503 error

оносвываюсь на статье

		https://blog.nginx.org/blog/rate-limiting-nginx


значит в секции "http {}"  делаем общую настройку


http {


	    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=5r/m;



значит директива limit_req_zone она  задает для сервера ограничение для реквестов согласно
какому то параметру в реквесте.  по какому именно параметру будет это ограниение
указывается дальше.

$binary_remote_addr указывает тот самый паарметр по которому будет ограничивать реквесты.
в данном случае это src IP от клиента. 


zone=mylimit эта штука резверирует в памяти жинкса кусок в котором будут храниться 
рабочие данные которые нужны для работы этой фичи. в данном случае там будет харнится
статистика - src ip адреса от реквестов и как давно был последений запрос. mylimit 
это просто буквенное навание этой области в памяти чтобы ее както идентифицировать

10m   = означает 10 МЕГАЙБАЙТ. это размер который мы реезервируем в памяти. 
как они пищут 1МБ памяти хранитть может 160 000 IP адресов. подробности в статье


rate=5r/m     задает как раз число как часто наш параметр может обновлсяьться. в данном
случае это речь про новый реквест с того же IP адреса. тока работает он так. беерется
одна минута 60с и делится на 5 получаем 20с. и тогда вот мы послали рекевест. он там 
записался. потом новый реквест может прилететь только через 20с. если реквест новый с 
того же ip приелетит раньше чем 20с то в ответ жинкс выдаст http 503.

эта общая настройка. а далее надо в секции location{}  вставлять вторую директиву
которая как раз таки активиириует общую директиву
например 


    location = /index.html {
		    limit_req zone=mylimit;
    }


таким макаром  для этого локейшена  и будет срабатывать лимит по повторным реквестам.
таким макром лмиимитирование повторных реквестов настрваиется через две диерктивы. одна
общая котрая задает числовые лимиты а вторая настройка уже для кокнретного локейшена эту
шарманку аквтиивирует



а вот кусок кода в секции "server {}" который нужно добавить чтобы заменить
у жинкса старницу которую он отдает на 503 ошибку на пустую страницу



	error_page 503 = @notfound;

	location @notfound {
  	  return 444 /;
    	break;
	}


тесть если жинкс хочет отдвать 503 старницу то по факту он отдаст 444 страницу. а она
у него пустая. что экономит трафик 

единственное что  я непонял а как огранчить реквесты  в случае редиректа. апример когда 
с http мы редиректим на https. у нас в этом случае нет рездела "location{}" поэтому
получается злодей может залупивать миллиард реквестов на порт 80. хуйня полная.


там в той статье еще боелее наворочанные фишки указаны. я их не использовал пока


а вот еще одна директив которая заставит жинкс  когда он отдает уже валидную страницу
отдавать ее с маленькой скоростью . для этого в секции "server {}" надо добавить

	limit_rate 4k;





================

ссылки
https://stackoverflow.com/questions/8332617/nginx-location-fix-redirect-to-index-html

вопросы:
у жинкса у него слушающий сетевой сокет он на всех тредах\процессах или на одном?

