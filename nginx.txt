nginx


curl как в нем указать http-header HOST

$ curl --location --request GET 'https://dog.ceo/api/breeds/list/all' \
--header 'HOST: vasya'

---

HTTP это stateless протокол. поэтому каждый запрос независит друг от друга.
---

HTTP это проотокол уровня приложения. как я это понимаю на практике. 
что через файловый дескриптор в процесс втекает текст. тоесть получение данных по HTTP это процесс из файлового дескприптора сосет текст форматрованный.
отравка по HTTP это запись в файловы дескриптор текста форматрованного. вот и все.
таким образом http сервер это процесс который должен уметь читать форматрованный текст и писать форматрованный текст.
вот и вест секрет в фразе web сервер.
также как тестовый редактор читает текст из файла таки веб сервер читает банальный текст и файла. просто это файл не сдиска а с сетевого сокета. но процессу это все равно.
он работает с файлоывм дескриптором.
------


HTTP реквесты и респонсы имеют одинаковую структуру:

start-line
блок header параметров + Enter (оппциональный блок)
Enter
блок body (опциальнальный блок)

если реквест или респонс имеет блок body то это отражаено в секции хедеров.
The presence of a message body in a request is signalled by a Content-Length or Transfer-Encoding header field. 

далее. разберем части.
start line (состоит из) = method + resource path + HTTP protocol version


пример start line: 

GET /test.htm HTTP/1.1


GET = метод
/test.html = путь к запраиваемому ресурсу. путь указывается относииельный (relaive path, relative URI, URI)
HTTP/1.1 = версия протокола

---
ответ от сервера вместо метода содержит RESPONSE CODE/STATUS CODE

status коды распределются по группам:

1xx – Informational
2xx – Successful
3xx -Multiple Choice
4xx– Client Error
5xx -Server Error

---

виды реквестов:

GET – Requesting resource from server
POST – submitting a resource to a server (e.g. file uploads)
PUT -As POST but replaces a resource
DELETE-Delete a resource from a server
HEAD – As GET but only return headers and not content
OPTIONS -Get the options for the resource
PATCH -Apply modifications to a resource
TRACE -Performs message loop-back

---
прикол http в том что если бы люди руками состаовляли реквесты то было бы понятно как 
http рабоатет. а нам сразу дали браузеры. то есть графиечские клиенты. которые за нас начали составлять тела реквестов.

---

формат headers.


имя хидера:значение1,значение2,значение3

имя хидера = оно case несенстиив
значения - они case sensitive

например
cache-control: no-cache,no-store,must-revalidate

---
далее 
про хидеры.
connection 
хидер.


конектимся на веб сервер через телнет

$ telnet paidsupport.example.kz 80

устаналивается tcp канал. а для процесса открываетс файловый десприптор. куда можно писать и откуда читать процессу.


далее. мы берем и руками пишем

GET / HTTP/1.1
HOST: paidsupport.example.kz
user-agent: vasya
connection: close
Enter


что дает хедер 
connection: close

он дает то что веб сервер нам посылает ответ и закрыват tcp содениение.

покольку установление tcp содениения это нехилые накладыне расходы то можно дать хидер который скажет веб серверу чтобы он после тго как отошлет ответ
незакрыал tcp содениенеи. а ждал нашего следущего реквеста. это хидер connection: close

тоесть

GET / HTTP/1.1
HOST: paidsupport.example.kz
user-agent: vasya
connection: keep-alive
Enter


для второго запроса нужно вводить тот же самый полный комплект http реквеста .тоеть 


GET / HTTP/1.1
HOST: paidsupport.example.kz
user-agent: vasya
connection: close
Enter


---
следущий
head 
хидер.


нафиг он сдался.  дело в том что на одном веб сервер может хоститься туча веб сайтов. поэтому когда веб сервер получает реквест ему надо понять
для какго веб сайта он предназначен. и этот факт ему уточняет от клиента хидер host.
вот зачем он сдался.


Host:www.steves-internet-guide.com
-----

user-agent
хидер

он для чисто справки сообщает веб серверу что за клиент обращается к веб серверу. но в целом веб серверу по мне эта инфорация похеру. потому что 
неажно какой клиент. ибо любой клиент пишет запрос по одному и тому же формату http. тоесть в целом запрос одинаков к оодному ресурсу от любого клиента.

user-agent: vasya

---
accept
хидер.

accept хидер tells the server what formats the client can understand.

я попробовал. но чтото как то в целом веб сервер срал на нашу к нему эту инфо. тоесть

GET / HTTP/1.1
host: paidsupport.example.kz
connection:keep-alive
accept: text/plain


и поулчил ответ

HTTP/1.1 200 OK
Server: nginx/1.20.1
Date: Mon, 14 Nov 2022 21:28:46 GMT
Content-Type: text/html
Content-Length: 254
Last-Modified: Sun, 23 Oct 2022 13:14:09 GMT
Connection: keep-alive
ETag: "63553e21-fe"
Accept-Ranges: bytes


как видно ответ был нам выдан в формает совсем другом  = Content-Type: text/html


---
HEAD
метод 

вотличие от GET он просит чтобы веб сервер в совем репонсе неотдавал body в ответе. 
очень удобно.


HEAD / HTTP/1.1
host: paidsupport.example.kz
connection:keep-alive
accept: text/plain


$ curl --head  -v http://paidsupport.example.kz
> HEAD / HTTP/1.1
> Host: paidsupport.example.kz
> User-Agent: curl/7.58.0
> Accept: */*


---
по поводу достукивания до веб сервера по http протоколу.
для этого достаточно telnet проги.
что ей надо сделать. ей надо сделать реквест к ядру чтобы оно создало сетевой tcp сокет.
когда tcp конект ядро установит , то оно создаст сокет а процессу подсунет файл дескрпитор.
а телнет затем просто будет в него писать уже текст.


для HTTPS соденненеия telnet уже некатит ибо он немуеет делать ряд вещей. 
для https соденения процесс должен попросить ядро  вначале созадать tcp сокет. 
а потом чере этот tcp сокет надо еще прогнать туда сюда сертифкаты это тоже как там наверное делает ядро. незнаю.
и в итоге уже процессу будет подсунуть файл дескриптов который ведет в защищенный канал условно говоря. вобщем прога должна 
уметь через tcp канал прогнать сертификаты и создать защищенный канал. что из этого делает делает процесс а что из этого делает ядро
по заказу процесса незнаю. наверно ssl тонель делает ядро а сертификаты ему в сисколл процесс сует как параметры.
и вобщем чуда и магии в https нет.

-----
nginx

его параметр  

server_name: A  

это в точности хидер 

host: A

тоест этот параметр на нжинксе обьясняет нжинксу HTTP реквесты с каким реквест хидером host:
должны быть направлены на обработку в блок 

server {
	server_name: A

}  




---

важная тема 

server_name "_"   vs    listen 80 default_server




пусть есть конфиг


server {
	listen 80;
	server_name "a.local";
}


server {
	listen 81;
	server_name "b.local"
}


server {
	listen 80;
	server_name "c.local"
}


разбрем какой сервер блок в итоге будет выбран для ответа на реквест из интернета.
каждый реквест когда его пуляют он содержит dest_ip:port это на уровен протокола tcp. данный реквест пртлетает в некоторый сокет на веб сервер.
а из сокета он попадает в файл дескриптор который слушает нжинкс. 


путь у нас dest_ip:80
значит на этом сокете у нас нжинкс навесит два сервер блока a.local и c.local

так вот получив через файл дескрпитор реквест из инета от клиента как жинксу понять какой сервер блок нужноприменить для формирования ответа.
вот скажем наш реквест из инета:


HEAD / HTTP/1.1
host: a.local
connection:keep-alive
accept: text/plain


это ровно тот текст который серез десприптор влетит прям в процесс жинкса.  и тут на помощь приходит хидер host^ из реквеста.
host: a.local

жинкс начинает среди сервер блоков котоые на 80 порту сравнивать его с полем server_name в своих сервер блоках. и если такой сервер нейм будет найдет
то такой серер блок и будет использован для формрования ответа!!!!!
в нашем случае это сревер блок


server {
	listen 80;
	server_name "a.local";
}


но дело в том что блок хидеров согласно http стандарту яявлетс опционльным. поэтому в том числе и хидер "host:" он тоже опциалньный. 
значи из интета может приелетть реквест без хидедар host: 

вот такой реквест

$ telnet dest_ip 80

HEAD / HTTP/1.1
connection:keep-alive
accept: text/plain


 и это легитимно по протоколу HTTP. а что тогда делать жинксу.
он делает вот что. он берет все сервер блоки которые сидят на 80 порту ( 80 порт потому что в нашем реквесте мы юзаем dest_ip:80)
и потом как я понял если сервер блоки указаны в одном файле то он среди них выбирает тот блок который самый верхний и будет с помощью него обрабатывать 
реквест из инета в незаиивимосмти какой server_anme указан в этом среверблоке. а что если у нас сервер блоки рабросаный по куче отдеьных сайтов. какой из них будет
заюзаа? в доке от жинкса ответа нет. как  понимаю будет взят тот файл с серверблоком у которого по алфавиту первя буква стоит вначале.

так вот такая система что у нас сервер блок на который будет направлен реквест у которого 
либо вообще нет хидера host: 
либо реквест   у которого host: такой что  на сервере ни в одном блоке нет такого server_name
как бы от нас требует более явного способа указать какой же сервер блок будет обрабатываьт такой реквест вместо того чтобы сидеть и прикидывать 
какой же сервер блок у нас первый по алфавитному списку. и таклй более явнй формальный сопосб у жинкса есть состоит в том что в сервер блоке
всегда есть  опция 

listen port;

так вот мы  внутри не дбавляем слово default_server тоест

server {
	listen 80 default_server;
	....
}

вот этот сервер блок указан  явно и именно он будет исползован для обработки всех стремных с точки зрения хидера host: реквестов.
далее мы вспминаем что вообще то в серврер блоке надо указыать server_name какойто. ну а какой нам тут указать. ответ - вобще то можно любой. но лучше указать 
такой которго в реаьном реквесте никогда небудет. например 

serrver_name _;

или

server_name vasya12_kuku1!!!!!+++---;


поэтому в итоге такой серер блок будет выглядеть:

server {
	listen 80 default_server;
	serrver_name _;
}




абсолютно такой же равнозанный сервер блок как альретернатива выглядит как:

server {
	listen 80 default_server;
	server_name vasya12_kuku1!!!!!+++---;
	}


зачем же нам вобще в этот блок вклюать server_name если он все равно не совпдает  с  хидером host: от корявого реквеста.
по первых потому что если мы сам не пропишем server_name руками в сервер блок то жинкс незримо тггда счиитает что в сервер блоке прописано вот такой
сервер нейм

server {
	listen 80 default_server;
	server_name "";
	}


данный сервер нейм аналогичен тому что в рекввесте остуствует вообще поле host:
в целом любой сервер нейм из списка

	serrver_name _;
	server_name vasya12_kuku1!!!!!+++---;
	server_name "";


прокатит для использваония для дефолтвого серве блока, 
люди обычно по незримой конвенции юзают serrver_name _;
но важно понять что он неимеет какйото реальной силы.  любые другие с мусором (как у нас в списке) подходят.
можно не указывать вообще тогда жинкс подствить свой дефолтовый server_name "";

далее. почему нам лучше использвовать невероятный server_name 
потому что если сервер будет более менее реалистичный то так ожет получиться что к нам из инета прилетит реквест с таким хидером host:
и тогда этот сервер блок будет выбран не из за опции  listen 80 default_server; а именно из за опции server_name ну а это как бы неочен правльно 
помуточто скорей всего в таком блоке будет стоять автоотлуп с ошибкой 404, потому что мы заводим такой блок чисто для отлупов мусорных реквестов.

теерь стало понятно как жинкс вбирает серввер блоки когда приетает реквест. 
какую силу имеетт оация  listen 80 default_server;
и то что опция serrver_name _; не имеет никакой сверх силы. вобще никакой. 

ссылки откуда я все это узнал
http://nginx.org/en/docs/http/request_processing.html
http://nginx.org/en/docs/http/server_names.html

====
