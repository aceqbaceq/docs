===
bash 
pipe

для начала вспомним как в баше работать с массивами
это пригодится ниже

задать массив как
$ a=("1" "2" "3")

показать только первый элемент
$ echo $a
1



доступ по индексу
$ echo ${a[0]}
1

$ echo ${a[1]}
2

$ echo ${a[2]}
3

показать весь массив
$ echo ${a[@]}
1 2 3



пайп это FIFO
в него можно пихать и из него можно выпихивать обратно
нужен всего один конец. пайп занимает один файл.


пайп это элемент IPC - интепроцесс коммникейшн. хрень которая позволяет обмениваться 
данными процессам друг с другом. поскольку каждый процесс работает в своей виртуальной
независимой памяти то для обмена друг с другом нужны какието механизмы.  пайп один из них.
дело вот в чем. вот у нас есть два процесса. у одного из них есть файл stdout у другого stdin.
но что такое stdin и stdout это два файловых дескриптора 0 и 1 , это симлинки которые должны смотреть 
на какието бекенды. обычно они смотрят на терминал файлы. а нам надо чтобы не стерминала данные к ним шли
а как то друг к другу. для этого нужен некий файл в который один процесс пишет а второй оттуда читает.
можно было бы задать этот файл на физ диске
например вот так
	$ echo "1" > 2.txt
	$ cat 0<2.txt
	  1
но это неудобно потому что данные промежуточные нахрен их на диске хранить.

как то настроить чтобы дескриптор 0 указывал на дескриптор 1 другого процесса - я так не знаю как 
можно было бы сделать через баш. все таки дескриптор он должен указывать на какойто файл.
нельзя даже ссылку на обычный файл создать в /proc/$$/fd 
все таки в этой папке каждый дескриптор в итоге должен указывать на 
 - либо обычный физ файл
 - сокет
 - пайп 
 - файл устройства
 - символьный файл который в итоге должен указывать на один из файлов что выше

возможно можно как то через язык "C" изьебнутся через сисколлы и как то замкнуть 0 файл дескриптор 
одного процесса на 1 файл дескриптор другого процесса. 

вобщем здесь как то мутно в голове. трудный вопрос.

вобщем  давайте их хранить сразу в оперативке.
и вот тут появляется пайп. 
пайпы бывают анонимные "anonymous pipes (идиотское название)
и именованные "named pipes" (тоже идиотское название)

аноимный пайп 
у него его инода хранится в оперативке и тело хранится в оперативке и он существует только пока существует два 
процесса которые через него связываются. когда два процесса сдохнут то и пайп будет уничтожен

именованный пайп
у него инода хранится на физ диске а тело возникает тогда когда два процесса открывают этот файл на диске.
тогда ядро автоматом  в памяти создает буфер на который текут данные когда процессы обращаясь через иноду с 
физ диска пишут в него или читают. 


это коротко. теперь длинее.
пайпы создаются через сисколлы. но это лоу левел. мы их будем создавать опосредованно через средства баша.
аонимный пайп создается вот так через символ "|"
	$ cat - | cat -
тогда у нас дескрипторы выглядят так
	$ ls -1al /proc/3577/fd
	lrwx------ 1 vasya vasya 64 окт  6 09:52 0 -> /dev/pts/35
	l-wx------ 1 vasya vasya 64 окт  6 09:52 1 -> 'pipe:[2492389]'
	lrwx------ 1 vasya vasya 64 окт  6 09:52 2 -> /dev/pts/35

	$ ls -1al /proc/3578/fd
	lr-x------ 1 vasya vasya 64 окт  6 09:52 0 -> 'pipe:[2492389]'
	lrwx------ 1 vasya vasya 64 окт  6 09:52 1 -> /dev/pts/35
	lrwx------ 1 vasya vasya 64 окт  6 09:52 2 -> /dev/pts/35

	$ stat /proc/3577/fd/1
  		File: /proc/3577/fd/1 -> pipe:[2492389]
  		Size: 64        	Blocks: 0          IO Block: 1024   symbolic link
		Device: 5h/5d	Inode: 2499953     Links: 1

		$ lsof -p  4468 2>/dev/null
		COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME
		cat     4468 vasya    1w  FIFO   0,13      0t0  2499172 pipe

		$ lsof -p  4469 2>/dev/null
		COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME
		cat     4469 vasya    0r  FIFO   0,13      0t0  2499172 pipe



так вот у первого процессса 1 указывает на некую хрень 
	1 -> 'pipe:[2492389]'
у второго процесса 2 указывает на такую же хрень
	0 -> 'pipe:[2492389]'
при этом 0 и 1 это симлинки расположенные на вирт файловой системе /proc
через команду "ln" самому такие симлинки никогда и никак не создать. это само ядро создает эти хрени.
тоесть это такое особые блатные симлинки.

видно в описании файла симлинка
	File: /proc/3577/fd/1 -> pipe:[2492389]
что он указыает на некую хрень которой на реальных фс не бывает. 
тоесть он указывает на некую вирт хрень которую для себя как то там понимает ядро. а файла 
такого нигде на дисках нет.

получается что симлинки лежат на фс "proc" которая лежит вся в памяти тоесть иноды файлов 0 и 1
лежат в памяти на особой фс. если попробовать руками создать любой файл в /proc/ID/fd то тебя пошлет нахер.
поэтому эта фс эта некая виртуальная хрень. 
в общем я толку о том что файлы 0 и 1 это якобы файлы симлинки. но лежат они на особой фс на которую 
чтото записать утилитами которые работают с нормальными фс нихрена не получится. и ведут эти симлинки не понятно
на что. на некую хрень.

соотвественно то "pipe:[2492389]" на что ссылаются 0 и 1 эта такая хрень которую мы создали опосредованно
с помощью команды  в баще. и эта хрень она исчезнет автоматом когда два наших процесса подохнут.

когда они подохнут и пайп исчезнет.


есть второй тип пайапа. почти тоже самое. 
named pipes
его фронтенд часть имя и  инода создается на реальном физ диске на реальной фс ext4. а дата блоки опять же хранятся хрен знает где - где то в в памяти ядра.  

создать named пайп файл.
$ mkfifo pipe1


как файл выглядит на диске
именованный пайп
$ ls -1al
prw-rw-r--   1 vasya vasya       0 окт  6 06:44 pipe1
видим букву "p"

$ stat pipe1
  File: pipe1
  Size: 0         	Blocks: 0          IO Block: 4096   fifo
Device: 10302h/66306d	Inode: 9743245     Links: 1
Access: (0664/prw-rw-r--)  Uid: ( 1000/   vasya)   Gid: ( 1000/   vasya)
Access: 2023-10-06 06:44:27.495677833 +0600
видим "fifo"

заметим как у него отличается строка
	  File: pipe1
в отличие от анонимного пайпа

вот как пользоваться этим пайпом чтобы даныне передават между процессами

как пользоваться
одна команда пихает данные
	$ cat - 1>pipe1
вторая читает 
	$ cat 0<pipe1

при этом
	$ ls -1al /proc/4013/fd
	lrwx------ 1 vasya vasya 64 окт  6 10:08 0 -> /dev/pts/36
	l-wx------ 1 vasya vasya 64 окт  6 10:08 1 -> /home/vasya/temp/pipe1
	lrwx------ 1 vasya vasya 64 окт  6 10:08 2 -> /dev/pts/36

	$ ls -1al /proc/4032/fd
	lr-x------ 1 vasya vasya 64 окт  6 10:09 0 -> /home/vasya/temp/pipe1
	lrwx------ 1 vasya vasya 64 окт  6 10:09 1 -> /dev/pts/37
	lrwx------ 1 vasya vasya 64 окт  6 10:09 2 -> /dev/pts/37

отметим как по другому выглядят 0 и 1   в отличие от анонимного пайпа
		1 -> /home/vasya/temp/pipe1
		0 -> /home/vasya/temp/pipe1

когда наших два процесса подохнут то "голова пайпа" тоесть его имя и его инода по прежнему 
останется на диске. сдохнет только его дата часть которая в памяти ядра. но когда новые два процесса
обратятся к голове пайпа то ядро снова создаст буфер в памяти (дата блоки для этого файла)

lsof покаже для 0 и 1 тоже самое
	$ lsof -p 4013 2>/dev/null
	COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME
	cat     4013 vasya  rtd    DIR  259,2     4096        2 /
	cat     4013 vasya    1w  FIFO  259,2      0t0  9743249 /home/vasya/temp/pipe1

	$ lsof -p 4032 2>/dev/null
	COMMAND  PID  USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME
	cat     4032 vasya    0r  FIFO  259,2      0t0  9743249 /home/vasya/temp/pipe1


попутно замечу что у этого файла который FIFO device указан как 259,2
тоесть драйвер у по обслуживанию этого файла такой же самый как и для полностью физ файла (когда и имя и инода и самое главное тело файла все лежит на физ диске). это забавно. 
как известно первое число это драйвер который обслуживает. щас выясним что за дравер для 259
	$ cat /proc/devices | grep 259
	259 blkext

ладно это отвлеклись. 
итак мы видим что когда пайп именованный то в /proc ссылка на него выглядит так
		1 -> /home/vasya/temp/pipe1
		0 -> /home/vasya/temp/pipe1
и в lsof ссылка на него выглядит так 
		cat     4032 vasya    0r  FIFO  259,2      0t0  9743249 /home/vasya/temp/pipe1


а если пайп анонимный то в /proc ссылка выглядит совсем по другому
		0 -> 'pipe:[2492389]'
		1 -> 'pipe:[2492389]'

и  в lsof ссылка выглядит как 
		cat     4468 vasya    1w  FIFO   0,13      0t0  2499172 pipe


зачем я так на этом заморочился? а затем чтобы дальше нам точно определять у нас 
какой пайп используется анонимный или именованный.

по поводу вопроса а как выглядит инода на реальной фс ext4 для именованного пайпа
смотри файл ext4.txt искать по "| pipe"


далее некоторая мелочь
как узнать статус выхода код возврата всех команд которые участвовали в пайпах
(тут нам поможет знание как работать с массивами чем мы занимались чуть выше)
$ echo ${PIPESTATUS[@]}
0

$ echo 1 | echo 2
2

$ echo ${PIPESTATUS[@]}
0 0

$ echo 1 | grep 23 | grep 34
$ echo ${PIPESTATUS[@]}
0 1 1




далее. 
замечу такую остроумную вещь что хотя пайп (труба) вроде как подразумевает два конца.
но по факту пайп это всегда один конец. ха-ха-ха. это один файл , один конец. будь то анонимный пайп
или именованный. файл всегда один. просто один процесс открывает этот файл на чтение а второй на запись. вот 
и все. по факту я бы сказал что нихуя это никакой не пайп суки кто так придумал термин. это стек.
да да это классический стек. это копилка монет совесткая на пружинке. у такой копилки у нее тоже всегда 
ровно один конец суки. один конец куда монетку можно вставить либо вытащить. это как бытылка!! обыкноенная бутылка для лимонада! у нее только один конец одно горло одна дырка. мы через одну и туже дырку можем 
либо доливать воду либо выливать. единственное что в бутылке вода может перемешиваться то что вошло позже
может выйти раньше а в стеке все строго . это как десткая пирамидка с колечками. вход у нее один. 
либо колечко одеваем либо снимаем. вход и выход один. и строгая очередность. поэтому суки это нихуя никакой не пайп долбоебы. поэтому в нашем пайпе всего одна точка входа, всего один файл. через этот файл осуществляется 
и заливка информации в буфер и вытаскивание обратно.

