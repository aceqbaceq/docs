| sprintf
| printf

что за хрен sprint()
и как он отличается от printf() ?

    char cur[10];
    int pid = getpid();
    printf ("%d", pid);
    sprintf(cur,"%d", pid);

если printf() у нас пишет в *FILE stdout 
то sprintf пишет в CHAR[] массив в данном случае это cur.
тоесть берется переменная pid у которой тип integer она читается
преобразуется в string и уже этот стринг суется в CHAR массив
у меня только вопрос sprintf он реально в cur сует именно string тоесть
хрень на конце которой добавлен 0x00 байт. или без него? 
я почему спрашиваю потому что printf и sprintf относятся к одному
сеейсейству. так вот printf() он в stdout 0х00 байт не прибавляет
хотя синтаксиси аналогичный
показываю

#include <stdio.h>

int main()
{
    printf("%i", 1 );
    return 0;
}

$ ./185.exe | od -t x1
0000000 31

вот. тоесть хотя унас в принтф указан стринг "%i" но в stdout пихается
не стринг потому что на конце нет 0x00 байта. причем еще отойдем
в сторону что интересно. если бы из stdout процесса 185.exe ноль байт
высирался бы то od бы его показал без прблем! например
$ echo -e -n "\x00" | od -t x1
00

совсем другое если процесс высирает ноль байт не в другой процесс а в 
"терминал" тоесть в pts/N тогда либо  дисциплина линии (ядро) либо 
мастер терминала (xterm, gnome-terminal-server) конечно же на экране X11
ненарисует никакой символ. тоесть

           0x00
echo fd/1 ----> fd/0 od  ---> рисует на экране 00

совсем другое дело

           0x00
echo fd/1 ----> pts/10 ядро, дисциплина линии ----> gnome-terminal-server --X11 экран

и вот либо дисциплина линии увидев что получен 0x00 дальше его
не пропускает. либо gnome-terminal-server получив 0x00 нерисует
ничего на X11 граф экране как и положено реальному "железному " темрминалу


так вот 
	$ ./185.exe | od -t x1
	0000000 31
нам доказыает то что рреаьно принтф из 185.ex не высирает 0x00 на конце!
тоесть он не пишет на stdout стринг! он пишет поток char байтов!

так вот у меня вопрос 
	    sprintf(cur,"%d", pid);
спринтф он в cur пишет стринг или тоже толоько поток байтов?
щас проверим!


#include <stdio.h>


int main()
{

   

   char cur[]={'2','2','2'};
   for (int i=0; i<sizeof(cur); i++)
   {
       printf("%c", cur[i]);
   }



   sprintf(cur,"%d", 1);
   for (int i=0; i<sizeof(cur); i++)
   {
       printf("%c", cur[i]);
   }

    return 0;
}


вывод на экран

$ ./185.exe | od -t x1
32 32 32 31 00 32


тоесть у нас был массив CHAR с содержимым 
	0x32 0x32 0x32
я его и напечатал
далее  я в этот char массив пишу число 1 которое спринтф из числа
превращает в ascii символ "1"(ASCII 0x31) и вот далее момент истины. согласно "%d"
она должна его превратить в string тоесть добавив к нему еще и байт 0x00
 		sprintf(cur,"%d", 1);
таким образом  спринтф должен в cur записать два байта 0x31 0x00
	   sprintf(cur,"%d", 1);

так ли это? или спринтф также как printf() недобавляет 0x00 на конце?

$ ./185.exe | od -t x1
32 32 32 31 00 32

и в выводе мы видим что 0x31 и 0x00 тоесть реально спринтф сует в char
массив именно string!

тоесть у нас был char массив
	0x32 0x32 0x32
а стал
	0x31 0x00 0x32
теперь стало понятно!

