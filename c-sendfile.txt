| sendfile

прикольная фукнция. 

 #include <sys/sendfile.h>

       ssize_t sendfile(int out_fd, int in_fd, off_t *_Nullable offset,
                        size_t count);



что она повзяоляет сделать - она читает из файла который сидит за  дескррптором  in_fd
и пишет эти байты в файл который сидит за файл дескрпитором out_fd
при этом будет считано  count байтов. и чтение из файла in_fd начнтеся с оффсета  offset


чем прикольна эта функция она в итоге вызывает сисколл sendfile и получается что у нас байты
перетекают из одного файла в другой чисто через ядро. тоесть цпу перходит в режим ядра.
и код ядра счивыает в свой внутренний буфер байты из файла и пишет их в файл. при этом эти байты
не перекачиваются в юзер спейс память нашей программы. потому что это лишняя хрень.
тоесть если сравнить обыный способ чтения из одного файла и запись в другой то это выглядит 
так мы вначале читаем кусок байтов из файла через 

   read() 

при этом ядро читает байты из файла и перекачивает их в память нашего проесса.
а потом мы вызываем 

  write()

и тгда ядро перекачивает байты из памяти нашего проесса в файл. 

очевидно что посредник  в виде памяти нашего процесса нахер ненежуен. 
поэтому sendfile() делает это гораздо козырнее. оптимальнее. быстрее.

пример программы

 $ cat 352.c
#include <sys/sendfile.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>


int main() {

       int fd = open("/usr/share/nginx/html/index.html", O_RDONLY);
         if ( fd <0 ){
                perror ("open file error");
         };

       struct stat st1;
       int ret = fstat( fd, &st1);
         if ( ret <0 ){
                perror ("stat file error");
         };

       off_t f_size = st1.st_size;
       ssize_t ret2 = sendfile(1, fd, 0, f_size);
         if ( ret2 <0 ){
                perror ("sendfile  error");
         };
       
      close(fd);

}



я открываю файл /usr/share/nginx/html/index.html 
потом я определяю его размер
потом я прошу ядро перекачать байты из этого файла в fd/1 тоесть на stdout теримнала.
количество преркаичиваемых байтов равно размеру файла

а вот стрейс

openat(AT_FDCWD, "/usr/share/nginx/html/index.html", O_RDONLY) = 3
statx(3, "", AT_STATX_SYNC_AS_STAT|AT_NO_AUTOMOUNT|AT_EMPTY_PATH, STATX_BASIC_STATS, {stx_mask=STATX_BASIC_STATS|STATX_MNT_ID, stx_attributes=0, stx_mode=S_IFREG|0644, stx_size=615, ...}) = 0
sendfile(1, 3, NULL, 615 )               = 615
close(3)                                = 0
exit_group(0) 



если мы несобираеся както обрабатывать менять байты из файла прежде чем их пихнуть в какойто
другой файл то засасывать эти байты в память процесса нет никакакого смысла.

