| docker 
| multistage docker

как я понял суть этой хрени в том что :
положим нам нужно скоиплирировать приложение или както его собрать.
мы это делаем в первом имадже через первый манифест докера.
в итоге мы получаем имадж в котором дохрена всякого разного которое собранному
приложениею например это скомпилирвованный си эльф ненужно. ибо нам для работы
си эльфа ненужны все эти утилтиты компилирования. так вот на втором этапе
нам нужно из этого имаджа этот бинарник вытащить и встваит уже во второй имадж
который будет очень маленький. так вот эта вся хрень требует много телодивжеиений.
вместо этого тоже самое можно сделать в рамках одного докер манифеста. 
итак еще раз в чем суть - для сборки какогтоо бинарника нам нужен имадж в котором 
дохрена будет всяких утилиит и прочего мусора который  ненежуен для запуска бинарника
когда он уже собран. поэтому нам нужно избаитья от этого лишнего мусора , а именно
вытащить этот бинарник из этого имаджа. и встваить его уже в маленкий имадж. 
по дефолту эо выглядело так. мы пишем первый докер магифест. там собираем бинарник.
потом мы баш скриптом оттуда этот бинарник экстрактируем. потом мы запускаем второй
докер манифест который собирает второй имадж и туда этот бинарник вставляем.
так вот это все можно сделать в одном докер магифесте используя докер мультистейлдж фичу.

а вот пример 
на примере вот этого
	https://earthly.dev/blog/docker-multistage/


делаем первый имадж

# Dockerfile1
FROM node:12.13.0-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

в нем мы собираем нодджиэс прогу


потом запускаем баш скрипт

#!/bin/sh
echo Building lukondefmwila/react:build
docker build -t lukondefmwila:build . -f Dockerfile.build
docker create --name extract lukondefmwila:build
docker cp extract:/app/build ./app
docker rm -f extract

echo Building lukondefmwila/react:latest
docker build --no-cache -t lukondefmwila/react:latest . -f Dockerfile.main


что он делает. он берет этот докер манифест и делает из него имадж
потом на его основе создает контейнер
потом из фс контейнера копирует файлы на фс хоста в ./app папку
потом удаляет этот контейнер
потом берет второй докер манифест и создает второй имадж
и вот он второй манифест докера


# Dockerfile2
FROM nginx
EXPOSE 3000
COPY ./nginx/default.conf /etc/nginx/conf.d/default.conf
COPY /app/build /usr/share/nginx/html


второй магифест импользует с фс хоста папку ./app и сует из нее файлы внутрь
второго имаджа


получается с точки зрения всего прцоесса это некоторый мудеж. надо иметь два докер манифеста.
и потом из бащ скрипта мы рулим всей херней. плюс нам чтобы вытащить файлы из первого
имаджа приходится создавать контйенер. а потом его удалять это тоже всеже доп накладные
расходы

а можно все это заменить одним докер манифестом.

# Dockerfile3
FROM node:12.13.0-alpine as build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

FROM nginx
EXPOSE 3000
COPY ./nginx/default.conf /etc/nginx/conf.d/default.conf
COPY --from=build /app/build /usr/share/nginx/html


тогда в этом случае у нас ОДИН докер манифест а не два. 
и чтобы собрать конечный имадж нам  в баше нужно примнить всего одну команду вместо кучи.
и нам ненужно создавать ненеужный промеждуточный контейнер.

тоесть разница накладных расходов в чем. в том что у нас вместо двух коротких докер манфиестов
теперь один длинный. нуу наверно это удобнее. незнаю. второе что нам ненужно создавать и удалят
временный контйенер. ну это неплохо. и наш баш скрипт вместо длинненьеого теперь 
короткий. скаазать что это охуенно нам облешчает жизнь - ну незнаю... ну чуть поудобнее
не более того. 
физически мультиисейж делается через строки

	FROM node:12.13.0-alpine as build

чеерез добавку as build но эта хрень используется в манифестах и без мульстиейдж как я помню

второй омомент что у нас тпеперь несколько FROM в одном манифесте. честно говоря не помню
по моему и раньше можно было иметь несолкько FROM в одном манифесте хотя я могу ошибкться

и самый цимес

	COPY --from=build /app/build /usr/share/nginx/html


вот мы указываем "--from=build" что нужно скопировать файлы не с фс хоста
а с имаджа


также.
на счет вопроса - как мыожно вытащить файлы с имаджа. тоесть можно ли это сделать без создания
контейнера. а чтоб сразу както из измаджа вытащить файлы  я нашел такое

– export the image, extract it and the archives inside it and get your file: docker save repo:tag > image.tar then tar xf image.tar to extract files of the tar. Repeat the tar step for each tar in the subfolders.


тоесть просто так из имаджа файлы не вытащить. нужно делать экспорт имаджа. а потом еще
раскрывать tar архив. и только потом можно вытащить файлы. 
поэтому вместо этого мудежа руками проще создать новый контейнер из этого имаджа где сам 
докер по факту сделает тоже самое. тоже дебильно совершенно очевидно что в докер нужно 
было запрограммировать опцию чтобы можно было из имаджа вытаскивать файлы.


