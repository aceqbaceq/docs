| sudo
| sudoers


для того чтобы юзер мог пользоваться командой 
	$ sudo ....

он во первых должен быть в группе sudo

	$ id
    uid=1000(vasya) gid=1000(vasya) groups=1000(vasya),27(sudo) ...


но это не все. в файле
	/etc/sudoers
должна быть запись

	%sudo   ALL=(ALL:ALL) ALL

без нее нихрена работаь не будет.
если мы добавим юзера в "sudo" группу не не будет строчки в /etc/sudoers
при запуске $ sudo bash нам ядро напишет что "a user is not in sudoers file..."


а еще есть такая фича. если мы запускаем

	$ sudo ...

у нас вылезает вопрос введи пароль.
так вот если мы один раз введем пароль. потом выйдем.  а потом опять
запустим sudo то при повторном судо у нас уже пароль спрашиваться не будет.
на чем это осоновано хуй знает но где регулируется сколько минут ненужно?
ответ читаем тут

	$ man 5 sudoers

 timestamp_timeout
                       Number of minutes that can elapse before sudo will ask for a passwd again.  The timeout may include a fractional component if
                       minute granularity is insufficient, for example 2.5.  The default is 15.  Set this to 0 to always prompt for a password.  If set to
                       a value less than 0 the user's time stamp will not expire until the system is rebooted.  This can be used to allow users to create
                       or delete their own time stamps via “sudo -v” and “sudo -k” respectively.


итак по дефолту это 15 минут.
а если хочется помеять то вставляем в 

	/etc/sudoers

строчку

Defaults        timestamp_timeout=1


(я непонял поему еще слово defaults нужно однако это так. и хер с ним).


хочу еще раз сказать что пароль повторно непридется вводить толко в том же самом 
окне терминала а в новом терминале вводить пароль первый раз придется 100% 


| sudo 
| pgrp



не пойму почему программа sudo вызывает себя два раза.
показываю запускаю 

  $ sudo sleep 120

и вижу

..--bash(561)---sudo(567)---sudo(568)---sleep(569)

оба судо работают под рутом. я не поимаю почему их два. 
раньше как я помню всегда было вот так 

..--bash(561)---sudo(567)-----sleep(569)

нахрен еще один судо?

ведь оно работает по идее как. баш 561 себя клонирует в 567. там он через execve() взывает
sudo. его код начинает работат. он спрашивает пароль от юзера и переключает процесс что он 
уже работает под правами рута. потом 567 вызывает клониования и получаем 569. и в 569
судо вызывает execve sleep . пэтому я непонимаю нахер нужен еще один судо процесс!
я нашел вот тут на счет почему первый раз делает форк судо
  
    https://superuser.com/questions/859701/why-does-sudo-fork-before-executing-the-process

цитирую

This extra process makes it possible to, for example, suspend and resume the command. Without it, the command would be in what POSIX terms an “orphaned process group” and it would not receive any job control signals. As a special case, if the policy plugin does not define a close function and no pty is required, sudo will execute the command directly instead of calling fork(2) first. The sudoers policy plugin will only define a close function when I/O logging is enabled, a pty is required, or the pam_session or pam_setcred options are enabled. Note that pam_session and pam_setcred are enabled by default on systems using PAM.


здсь мне открылась бездна по названеим 
	process group 
	process group leader
	session

и прочий пиздец.

| nopass


чтоб пароь не спрашивал


%sudo  ALL=(root) NOPASSWD: ALL



ссылки которые нужно отработатьы:

		https://superuser.com/questions/859701/why-does-sudo-fork-before-executing-the-process	

		https://www.andy-pearce.com/blog/posts/2013/Aug/process-groups-and-sessions/

		https://unix.stackexchange.com/questions/490986/why-do-we-need-to-send-sighup-to-a-newly-orphaned-process-group-containing-a-sto

		file:///home/noroot/Downloads/Advanced%20Programming%20in%20the%20UNIX%20Environment%203rd%20Edition.pdf


