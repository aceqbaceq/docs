| top
| memory
| free
| used


есть такая хуйня. запускаем 

	$ top


и мы увидим вот такие поля про оперативку

                                       ]
KiB Mem : 16144928 total,  1542976 free,  6534600 used,  8067352 buff/cache
KiB Swap:        0 total,        0 free,        0 used.  6252484 avail Mem 


во первых пизда начинается с того что 

	16144928 total

это не размер физ памяти на компе которая воткнута в комп в форме
планок. НИХУЯ нет.
это обьем памяти RAM на компе которая доступна под использование ее юзерски
ми программами И ТАКЖЕ ДЛЯ НУЖД ЯДРА ЗА ВЫЧЕТОМ ОБЬЕМА ПАМЯТИ КОТОРАЯ ЗАНЯТА
БИНАРНИКОМ ЯДРА И ЕЩЕ КАКОТОЙ ЯДЕРНОЙ ХРЕНЬЮ КОТОРАЯ НИКОГДА ИЗ ПАМЯТИ НЕ МОЖЕТ
БЫТЬ ВЫГРУЖЕНА СУКА!
в этой фразе важно увидеь важные моменты - память показанная в поле total 
в команде top она не поазывывает физ размер памяти на компе нет. она показыает
меньший размер. поэтому чтобы узнать сколько же по факту устанволено памяти в комп
надо юзать команду dmidecode

	# dmidecode
    ...
    Memory Device
	Size: 16384 MB
	Form Factor: SODIMM
	Locator: ChannelB-DIMM0
	Bank Locator: BANK 2
	Type: DDR4
	Type Detail: Synchronous
	Speed: 2400 MT/s
	Manufacturer: Ramaxel
	Rank: 2

итак мы видим что в компе у нас 16384 MB это 16777216 KB
а теперь смотрим что покавзывает total в top

		16144928 total

и вдим что это число меньше. а какова же разница

		632288 KB ~ 617 MB


ни хрена себе!

так вот из того что я нашел эти 617 МБ они заняты ядром с момента
старта и до выключения компа. и эти 617 МБ никак нельзя освободить.
как я понял они заняты бинарником файла ядра /boot/vmlinuz и еще какойто 
ядерной хренью! обьем же оставшейся памяти в

			16144928 total

это размер памяти которая доступна и под нужды ядра (да да у ядра помимо захаванных
617МБ памяти бывают и всякие другие нужды например всякие буфер кеши и пейдж кеши
и прочее ибо это все хранится в области памяти ядра) и под нужды юзер процессов.

таким образом я хочет подчкрнуть что 
	1) total в top НЕ показыавет размер физ памяти на компе. нихуя
	2) total в top показывает память которая может быть сожрана как
	     под нужды юзер процессов таки и под нужды ядра

теперь я пошел дальше.  я подумал а сколько у нас занимает расппкоыванное
ядро vmlinuz. мне стало интересно. на диске этот файл определяется вот так

$ sudo file /boot/vmlinuz-5.4.0-91-generic 
/boot/vmlinuz-5.4.0-91-generic: Linux kernel x86 boot executable bzImage, version 5.4.0-91-generic (buildd@lgw01-amd64-024) #102~18.04.1-Ubuntu SMP Thu Nov 11 14:46:36 UTC 2021, RO-rootFS, swap_dev 0x9, Normal VGA


тоесть это якобы некий bzImage. типа как сжатый архив. но по факту это хуй так.
ибо помимо сжатого архива с самим ядром там записана и еще какая то хуета 
разбирваться с котрой нет времени. в итоге чтобы распаокывать само ядро нужно 
его вначале "найти" внутри этого файла а потом уже распакоывать. делатеся
это так

 $ sudo od -A d -t x1 vmlinuz-5.4.0-91-generic | grep '1f 8b 08 00' | head
0018864 8f 1f 8b 08 00 00 00 00 00 02 03 ec dd 7b 7c 14

итак мы нашли строку с "волшебной комбинацией"  '1f 8b 08 00'
как можно увидеть "1f" начинается не сразу а чуть дальше. значит  0018864
это оффсет для байта "8f" а оффсет для байта "1f" это 0018865
теперь зная это мы можем уже распоковать ядро

$ sudo dd if=./vmlinuz-5.4.0-91-generic   bs=1 skip=18865 | zcat > vmlinux

теперь можно посмотреть а что же это за хрень внутри

$ file vmlinux
vmlinux: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=3731b370701995b45b702109ae24a2e095830aa5, stripped

итак якобы это ELF файл.
и его размер 

 $ ls -1al vmlinux
-rw-rw-r-- 1 vasya vasya 45033016 июн 29 02:18 vmlinux

тоесть ~45 MB

тогда мне не совсем понятно что еще сожрало память до 617 MB
ну да хуй с ним. на самом деле цель этой заметки совсем в другом.
цель заметки найти обьяснение всем полям описывающим состояние RAM
в команде top

KiB Mem : 16144928 total,  1348656 free,  6516520 used,  8279752 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  6308232 avail Mem 


ибо это уже заебало. непонятно что это все значит.


со столбиком total мы уже разобрались.
далее я хочу сказать что показания команды free и top они об одном 
и том же


$ free  -k -w
              total     used     free   shared  buffers    cache   available
Mem:       16144928  6557172  1326788  2960316   761792  7499176     6286112
Swap:       2097148        0  2097148

в данном случае цифры чуть чуть отличаются у top и free но это потому что
цифры потсоянно плавают и мгнвоеннно снять показния у top и free невозможно.
а так они об одном и том же показывают. в комнде free можно настроить 
чьобы buffers и cache показывались отдельно а можно чтобы показывалась их
сумма.  а в top всегда показыается их сумма. 

а вот дальше нчинается ПИЗДЕЦ. потому что обе эти команды на самом деле они 
все эти цифры берут из одного места из

	# car /proc/meminfo

если заглянуть в этот файл то можно охуеть от того сколько там разных
типов памяти указано. это пиздец номер один. второй пиздец в том что если 
искать документацию по всем строкам из meminfo то нигде нормального
описания нет. везде поля описаны из разряда "умный разработчик ядра разберется
читая код ядра а остальным долобоебам знать не положено". тоесть на отьебись.
третий пиздец состоит в том что в столбиках free\top ряд из них это точное
соотвесвтие какой ни будт строки из meminfo (что хорошо ) а часть стобиков
которые покаызает free\top их нихуя нет в meminfo это чисто сука придумка
програмистов free\top а именно столбик "used" его нихуя нет ни под каким 
видов в meminfo. этот столбик он сука ВЫЧИСЛЯЕТСЯ на основе реальных строк
из meminfo. и это пиздец. щас я покажу.

берем
KiB Mem : 16144928 total,  1331040 free,  6557716 used,  8256172 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  6291608 avail Mem 

тепрь смотрим что есть в meminfo
  $ cat  /proc/meminfo | grep -E "MemTotal|MemFree|Buffers|Cache"
MemTotal:       16144928 kB
MemFree:         1349848 kB
Buffers:          763076 kB
Cached:          6785652 kB


так вот 
	total это Memtotal 
	free  это MemFree
	buff/cache это Buffers+Cache

дейсивительно сравнивем то что мы видим в top и то что мы видим в meminfo
	total = 16144928 и MemTotal = 16144928
совпало
	free = 1331040 и Memfree 1349848 
да они чуть не совпали но это потмоу что одновременно снять показания 
водно время и через top и через meminfo хуй получится

buff/cache = 8256172  и  Buffers + Cache = 763076 + 6785652 = 7548728
да они чуть не совпали но это одно и тоже


ТЕПЕРЬ  САМОЕ ГЛАВНОЕ, что такое used 
	used = total - (free + buff/cache)
	или 
	used = Memtotal - (Memfree + Buffers + Cache)

давай проверим
    used = 16144928 - (1331040 + 8256172) =  6557716 

сравнивем с тем что покызвает столбик used в top
KiB Mem : 16144928 total,  1331040 free,  6557716 used,  8256172 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  6291608 avail Mem 

тоесть 6557716 = 6557716 
тоесть совпало

таким макаром тут я хочу подчеркнуть первый важный момент. столбик used
в top\free его нету в /proc/meminfo . это СУГУБО ХРЕНЬ которую сами высчитывают
утилиты top\free по формуле

	used = total - (free + buff/cache)
или вот так
	used = Memtotal - (Memfree + Buffers + Cache)
потому что поля total, free , buff, cache они все таки берут из  /proc/meminfo
итак никакго used в первоисточнике в /proc/meminfi НИХУЯ НЕТ! это сугубо 
придумка top\free

теперь прочитаем а какой физ смысл дают этому полю эти утилиты. как они 
сами обьясняют что за хрень они высчтывают по этой формуле

	$ man free
          used   Used memory (calculated as total - free - buffers - cache)

а они суки никаого смысла не дают этому столбику. они говорят это просто 
некая хрень которую мы посчитали по формуле. тогда почму же вы суки для 
этого числа взяли такое говорящее название "used" ?!?!?!?!!?!?!? 
кем used и под что ? дебилы.

я интерпретирую это число "used" как обьем памяти занятый ядром и юзер спейсом
под свои данные за вычетом памяти ядра которая занята буферами и пейдж кешем.
тоесть наебка поля "used" состоит в том что оно интуиитивно намекает что якобы
это обьем памяти которая компом используется хотя бы под чтото. тоесть она
намекае что это суммарный обьем памяти который на компе занят хотя бы под 
чтото . но ПО ФАКТУ ЭТО НИХУЯ НЕ ТАК. потому что окзывается что в система еще 
дополвниельно выжирает память под буферы и пейж кеш. так что used не показывает
сука весь полнй обьем памяти выжранный нашим компом. уебки.
итак называние "used" оно misleading. и за это спасибо уебкам создателей утилит
top и free.

итак теперь еще раз пробежимся по физ смыслу полей в top\free

KiB Mem : 16144928 total,  1331040 free,  6557716 used,  8256172 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  6291608 avail Mem 


total - это обьем памяти доступный для нужд ядра или юзер процессов.
он не равен физ обьему памяти. потому что часть памяти выжрало ядро. та часть
памяти которая никак не может быть выгружена никуда

free - обьем памяти которую ядро не использует ни под что

buffers - как я понял это обем памяти которое ядро испольщует чтобы кэшировать
отдельные сектора с дисков. тоесть если ядро хочет прочитать сектор с диска
то этот сектор может щас хранистя в зоне buffers и тогда его читать ненадо.
он уже есть в памяти

cache - как  я понял это память в которой лежат копии файлов целиком с диска.
тоесть тут не хранится часть файла. тут либо хранится некоторый файл целиком
либо он тут нехранится нихуя. отличие с предыдушей памятью в том что в той 
памяти хранся отдельные сектора. а тут файлы целиком. я так понял


buff\cache = это просто сумма buffers+cache


used = total - (free + buff\cache)  тоеть это обьем памяти которая занята
     системой хотя бы под чтото за минусом памяти ядра занятой под buff\cache
итак размер used памяти это далеко не вся память занятая на компе. вся
память занятая системой на компе хоть под чтото это 

		полная сумма занятой памяти  = used + buff\cache

или другими словами это же число можно вычислить с другого бока

    	полная сумма занятой памяти  = total - free

правда и это не совсем верно потому что на самом деел полный оьем памяти
занятый хотя бы под чтото это еще нужно прибавить тот хвост который занят
ядром и который нельщя выгрузить. тоесть в моем случае это +617MB который
можно вычитать как разнице между оьемом физ памяти из dmidecode и total
вот такой пиздец. но далее я про этот хвост 617 MB забуду. мы о нем 
не будем говорить. 

теперь мы наконец переходим к главному вопросу из за котрого я вообше начал
ебаться с этой темой. 
мы смотрим на показания в top

KiB Mem : 16144928 total,  1331040 free,  6557716 used,  8256172 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  6291608 avail Mem 

возникает вопрос. сколько физ памяти у нас свободной есть в данный момент
так чтобы у нас не начал задействоваться swap. вот что меня интересует
И ВОТ ДАЛЬШЕ НАСУТПАЕТ НЕПОНЯТНАЯ ХУЙНЯ. совершенно логично что кусок
памяти 

	1331040 free

он свободен. и его можно использовать для запуска новых программ и так далее.
далее по логике кусок памяти

	8256172 buff/cache

тоже может быть освобожден системой и использоваться для запуска новых программ.
потому что и сектора и кеш файлов это все можно при желании заново прочиать
с дисков. 

оставшееся поле used котоорое как мы помним не является самостояльной величиной
а всего навсего завсиит от других "настоящих" полей и вычсялетя по формуле
 
 	used = total - (free + buff\cache)

так вот оставшеееся поле used оно нам показыает обьем памяти который занят хуй 
знает чем чемто. и можно ли оттуда чтото освободить выцыганить под новые програ
ммы хуй знает. мы не знаем. 

исходя из этого получается что ПО КРАЙНЕЙ МЕРЕ  в системе можно выцыганить 
под новые программы вот солько памяти 
		
		free + buff\cache = 1331040 + 8256172 = 9587212 = 9 587 212 KB 


я хочу подчеркнуть важное слово ПО КРАЙНЕЙ МЕРЕ. потому что у нас еще есть
поле used. содержимое внутри которого мы не знаем. мы знаем что оно занято
системой под чтото. а что это чтото хуй знает. может там тоже есть такие куски
котоыре ядро при желании может освободить. итак по крайней мере по нашим
логическим расчетам у нас "потенциально можно освободить " 9 587 212 KB
однако если мы посморим на top

KiB Mem : 16144928 total,  1331040 free,  6557716 used,  8256172 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  6291608 avail Mem 

у нас есть еще одно интересое поле 

	6291608 avail Mem

оно берется напрямую из /proc/meminfo это поле  MemAvailable

$ cat /proc/meminfo | grep MemA
MemAvailable:    6291608 kB

это прямая инфрормция от ядра сколько по его оценке в системе оно ядро
сможет освободить памяти под новые нужды
и что же мы видим. а мы вдим пмздец.

по нашим расчетам в системе можно освободить 
		9 587 212 KB
а ядро нам доклдывает что это примерно
        6 291 608  KB
и как видно разница охуенная !

а ведь у нас еще есть память used в которой тоже можеть быть чтото
можно освобдить !  почему  MemAvailable:    6291608 kB   такой маленький
я  не понимаю. почему при необходимости весь 8256172 buff/cache не может
быть освобожден я не понимаю.

поэтому я и говорю что статистика RAM в целом в /proc/meminfo она ебанутая
и она ебанутая в частности в top\free

ну а так по факту в итоге я рекомндую и всегда смотрю именно на цифру 
		MemAvailable:    6291608 kB
в /proc/meminfo 
или что тоже самое в top
		6291608 avail Mem 

практика показыает что именно она и показыает сколько реально свободной физ 
памяти осталось в системе. если оно подходит к нулю то тебе пизда. все начнет 
жестко свапиьт и тормозить.


далее следущая важная хуйня,
когда нажимаем в top кнопку "m" чтобы у нас вместо цифр о статстике по памяти
нам вылез график то 

KiB Mem : 58,1/16144928 [|||||||||||||||||                   ]
                                                                                           ]
я что хочу подчеркнуть. что размер заштрихованной части "||||" сука он не 
будет равен числу "used" !!! он будет равен "total - avail Mem"
тоест размер пустой области он равен "avail Mem" который читается из meminfo
а размер заштроиихованной он вычиялсяется как "total - avail Mem" и поэтому
размер зашрохванный области он нихуя не равен "used" как это может интутитван
сука казаться . падлы.

ну и конецчно 58,1 это показано в процецентах размер зашрованной области
а 16144928  это размер total что тоже достаточно долбоебично придумано.
щас покажу докажу все напримере
вот у меня один и тот же показатель top но 
выраженый в виде цифр и виде графика

KiB Mem : 16144928 total,  1834580 free,  6138404 used,  8171944 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  6779220 avail Mem 

KiB Mem : 58,1/16144928 [|||||||||||||||||                   ]
KiB Swap:  0,0/2097148  [                                                                                                    ]


а теперь сраниваем. размер заштрихванноый части это 58.1% от  16144928
значит это 9380203 KB что совершенно неравно 6138404 KB used
если заштрихованная это 58.1% значит незашрихованная это 42.9% или 6926174 KB
сравниваем это число с 6779220 avail Mem.  немного не совпало. но почти. 
хотя в man top они божатся и клянуться что 58,1 это число кторое вычиялсется
как 100% * [(total- avail Mem)/total] 


что я хочу еще раз подчеркнуть что  на этом графике 

KiB Mem : 58,1/16144928 [|||||||||||||||||                   ]

                                          |__________________|
                                                  \/

                                          эта пустая зона это 
                                          "avail Mem"

а заштрихованная зона это (total-avail Mem) но никак не "used" сука!!!
поле "used" на графике нихуя не фигуррует! и это надо четко понимать!

и что "avail Mem" это поле "MemAvailable" из /proc/meminfo

я бы сказал что "used" это хуета придуманная в top\free кторая только запутывает
а толку сука от нее никакого! еще раз почеркну никакго "used" в первоистчнике 
/proc/meminfo нет! и на графике в top ее тоже сука тоже нет! нахуй тогда они
ее вели падлы. только запуттывают!

также я добавлю что в free

  $ free -m
              total        used        free      shared  buff/cache   available
Mem:          15766        6008        1772        2818        7986        6606

поле 'used' имеет тоже самое ебаутое значение что и в top. за которую надо 
голову было оторвать. на нее вобще смотреть ненадо .ее суканадо игнорировать.
едиснвтенное поле на которое нужно смотреть из всей этой хуеты это поле 

		available
		6606

все! все остальное сука это шлак и мусор!
или сразу смотреть в /proc/meminfo

какиеже долбоебы эти програмисты top/free

про поле "shared" я вообще молчу. это полная хуета.





