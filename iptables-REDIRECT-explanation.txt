| iptables
| REDIRECT
| redirect


меня уже с какотгото времени волновал вопрос
о том как рабтает iptables REDIRECT.

дело вот в чем. сверху вроде все понятно.
вот мы из приложения шлет пакет у котторого
дестинейшн ип и дестинейшн порт равен скажем

  4.4.4.4:80


далее в иптбейлс стоит редирект правило

-A OUTPUT -p tcp --dport 80 -j REDIRECT --to-ports 12345


которое вот что делает. оно берет исходный пакет
и меняет у него дест_ип:дест_порт на 

  127.0.0.1:12345

тоесть вот так


   4.4.4.4:80 ---> 127.0.0.1:12345


так вот совершенно очеивдно что при такой замене
в пакете у нас ТЕРЯЕТСЯ ИСХОДНАЯ ИНФОРМАЦИЯ 
ОБ ИСХОДНОМ ДЕСТ_ИП И ДЕСТ_ПОРТУ!
И ЭТО ПРОБЛЕМА!
	
потому что  если в таблице иптейблс только 
одно правило редиректа то все понятно. 
тоесть если у нас есть программа которая слушает 
сокет привязанный к 127.0.0.1:12345  то я как
автор этой программы знаю что у нас толко одно
правило редиректа. и значит если в программу прилетел
пакет то изначально он имел дестинейшн параметры
такие как

   4.4.4.4:80

а теперь предтавим что у меня в аблице иптбейлс
есть несколько правил редиректа и все на один 
и тотт же порт!

-A OUTPUT -p tcp --dport 80 -j REDIRECT --to-ports 12345

-A OUTPUT -p tcp --dport 21 -j REDIRECT --to-ports 12345

-A OUTPUT -p tcp --dport 22 -j REDIRECT --to-ports 12345


и получается фигня в том плане что у меня
все три типа исходных пакетов в результатте 
редиркета прверащаются в один и тот же тип 
пакета у которого во всех случаях будет
один и тот же дестинейшн хрень

   127.0.0.1:12345


и водникает вопрос - А КАК МОЯ ПОГАРММА коорая
сидит на этом сокете сможет для себя понять 
какой изначальный деснейшнн_ИП и порт были 
у пакета? был ли это 21 или 80 или 22 порт?
ведь в самом пакете который влетел в нашу прогу
эта инфор стерта перетерта потеряна!

И ОТВЕТ ОКАЗЫВАЕТСЯ ВОТ В ЧЕМ! во первых вспомним
то что если у нас есть слушающий сокет
то при влетании в него пакета из нового "конекта"
(и при условии что в нашней проге используется
фунция accept()) то у нас создется новый сокет
который и будет обслуживать этот "конект"
так вот в свойтвах этого сокета ядро записывает
один очень важный параметр а точнее структ он назыается


       SO_ORIGINAL_DST


так вот этот структ хранит исходные dest_ip
и dest_port которые были в пакете до того как
он был обработан иптейблс редиректом!
поэтому теерь все понятно! нашей проге просто
нужно считать этот структ из свойств сокета
и мы нашли что нужно! и теперь наша прога знает
куда изначално направлялся пакет!
еще раз напомню что при поступлпнии в слушающий
сокет пакета из нового "конекта" создается новый 
сокет который будет обрабывать имнно этот "конект"
поэтому в этот сокет ядро будет пихать только 
те пакеты которые все летели на один и тот же 
исходный дест_ип и дест_порт
ну точнее вот как.

вот у нас одна прога запускает вот такой
пакет

 срс_ип/порт=192.168.10.1:43300
 дст_ип/порт=4.4.4.4:21

далее после обработки редиректом он 
станет

 срс_ип/порт=192.168.10.1:43300
 дст_ип/порт=127.0.0.1:12345

этот пакет прилетает на слушающий сокет *:12345
и для него ядро создать новый сокет1


теперь другая программа запускает вот такой
пакет

 срс_ип/порт=192.168.10.1:44400
 дст_ип/порт=4.4.4.4:80

далее после обработки редиректом он 
станет

 срс_ип/порт=192.168.10.1:44400
 дст_ип/порт=127.0.0.1:12345

этот пакет тоже влетает в слушающий сокет
и для него ядро создает НОВЫЙ слушающий сокет2
вопрос. почему же данный пакет не будет 
направлен на сокет1? ведь у этого пакета

дст_ип/порт=127.0.0.1:12345

но! этого мало потому что у этого пакета


 срс_ип/порт=192.168.10.1:44400


а ядро будет пихать в сокет1 только те пакеты
у которых

 срс_ип/порт=192.168.10.1:43300

поэтому для этого пакета будет создан сокет2

итак мы будем иметь вот такой коленкор


пакеты вида

 срс_ип/порт=192.168.10.1:43300
 дст_ип/порт=4.4.4.4:21

будут превращаться редиректом в пакеты вида

 срс_ип/порт=192.168.10.1:43300
 дст_ип/порт=127.0.0.1:12345

и они будут пихаться в сокет1


а пакеты вида

 срс_ип/порт=192.168.10.1:44400
 дст_ип/порт=4.4.4.4:80

будут превращаться редиректом в пакеты вида

 срс_ип/порт=192.168.10.1:44400
 дст_ип/порт=127.0.0.1:12345

и они будут пихаться в сокет2 !!!


тоесть они не будут перемешиаться!
и поэтому соврешенно ясно и логично
что параметр исходный_ип и исходный_порт
они для всех пакетов влетающих в сокет1
и сокет2 остаются константой!  поэтому данный
параметр можно хранить на уровне сокета! потму
что этот параметр он одинаковый для всех пакетов
влетающих в этот сокет!

значит как мы можем этот параметр вытащить
из свойства сокета. а через getsockopt()


   int getsockopt(int socket, int level, 
           int option_name,
           void *restrict option_value, socklen_t *restrict option_len);



первый параметр это имя сокета
второй параметр это левел и класс переменых
которые мы хотим из свойств этого сокета вытащить.

вторая перменная может быть например равна

базовые опции сокета (SOL_SOCKET)
опции IP-уровня (IPPROTO_IP, SOL_IP)
опции TCP (IPPROTO_TCP)



так вот   SO_ORIGINAL_DST  это хрень уровня IP
поэтому второй параметр IPPROTO_IP/SOL_IP

 
третья пермеменная это имя хрени которую 
мы хотим счиатть из сокета


четвертая перменная это поинтер куда мы хотим
записать результат

и пятая перменная это длинна данных на которые
указыает прердыдущий поинтер.


таким образом чтобы счиатат SO_ORIGINAL_DST
нам надо заюзать


getsockopt(client_fd, SOL_IP,  SO_ORIGINAL_DST, 
           orig_dst,  &len)



полная программа это 442.c


значит компилируем ее

 # gcc -o 442.exe 442.c


запускаем под sudo

также нужно в иптбейлс добавить правила


в таблицу NAT:

-A OUTPUT -p tcp --dport 80 -j REDIRECT --to-ports 12345



в таблицу FILTER:

-A OUTPUT  -m tcp  -p tcp --dport 12345   -j ACCEPT

-A INPUT   -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT


(чтобы вспомнить какой тракт проходит пакет 
исходящий пакет из локальной проги смотри на 
картинку tables_andreasson-schema.jpg)

и когда мы прогу 442.exe запустили 
то в другом окне терминала запускаем

   $ nc -zv 4.4.4.4 80


и тогда наша прога 442.exe 
нарисует на экране

$ sudo ./442.exe
Listening on port 12345...
Connection from 192.168.181.1:57746
Original destination IP: 4.4.4.4
Original destination port: 80


победа! все получилось!
как видим нам удалось узнать что 

Original destination IP: 4.4.4.4
Original destination port: 80


при том что в сам сокет конечно же как я уже
сказал влетает пакет соввсем не с дест_ип 4.4.4.4
это видно на тцпдамп

proto TCP 
    192.168.181.1.49188 > 127.0.0.1.12345: Flags [S], 


здесь видно что в сокет ветает пакет 
с дест_ип 127.0.0.1


на счет того в каком месте сет тракат
тцпдамп ловит пакет смотри tcpdump2.txt


