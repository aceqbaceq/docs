atop

дисклеймер ниже я пишу malloc на самом деле речь идет походу о mmap. а в общем хрен его 
знает какой там сиколл исползуется при запросе памяти у  ядра от юзер процесса.

итак поехали:
в атоп много всяких пиколных показано параметров.
все они хорошо расписаны в man atop

есть вот такая строка

SWP | tot   100.0G |  free   89.0G |  ....          | vmcom  44.8G  | vmlim 107.7G |



что это за хрень  | vmcom  44.8G  | и | vmlim 107.7G | ?

vcom берется из /proc/meminfo

$ cat /proc/meminfo  | grep -i committed_as
Committed_AS:   48192220 kB


из man proc
читаю
  Committed_AS %lu
                     The amount of memory presently allocated on the system.  The committed memory is a sum of all of the memory which has been allocated by processes, even  if  it  has
                     not  been  "used"  by  them  as of yet.  A process which allocates 1GB of memory (using malloc(3) or similar), but touches only 300MB of that memory will show up as
                     using only 300MB of memory even if it has the address space allocated for the entire 1GB.

                     This 1GB is memory which has been "committed" to by the VM and can be used at any time by the allocating application.  With strict overcommit enabled on the  system
                     (mode  2  in  /proc/sys/vm/overcommit_memory),  allocations which would exceed the CommitLimit will not be permitted.  This is useful if one needs to guarantee that
                     processes will not fail due to lack of memory once that memory has been successfully allocated.


насколкьо я понима дело вот в чем. процесс заказывает себе куски памяти через malloc. напрмиер 5GB.
как при этом работает ядро не очень понятно. по идее оно доолжно найти в памяти кусок размер 5ГБ суммарно. как то там пометить
в page tables что вот этот процесс теперь зарезервировал вот эти куски физ памяти. но по факту как я понимаю так не происходит.
походу ядро возвращает процесссу ответ мол все окей и ссылку на вирт адрес памяти начала этого блока. но по факту как я понимаю
ядро резервирует в физ памяти только маленкий кусочек. а остальное будет искать когда процесс реально начнет записывать в заказанный кусок памяти. так вот   vmcom он же Committed_AS это сколько памяти суммарно заказали себе через malloc
все процессы. заказать то они себе заказали. но как я уже сказал что система по факту и недумала чтото там резервирвовать в
физ памяти. и процессы еще туда по факту могли и не писать ничего. или малую часть. 
почему я думаю что ядро и не думало чесаться чтото там рально резервировать в физ памти. потому что судя по 
показателям. 
	vmcom  44.8G 
физ память 16 ГБ. в свапе лежит 10ГБ. 
16 и 10 это 26 но никак не 44.8 ГБ

поэтому vcom это сколько памяти процессы себе заказали через malloc. и ядро сказало да хорошо конечно.
но по факту это звездеж.

если процесыы начнут реально засирать такой обьем памяти то начнется заполнение свапа.


что такое "vmlim 107.7G"

это вот это 
$ cat /proc/meminfo  | grep -i commit
CommitLimit:    112925968 kB


читаю man proc

  CommitLimit %lu (since Linux 2.6.10)
                     This is the total amount of memory currently available to be allocated on the system, expressed in kilobytes.  This limit is adhered to only  if  strict  overcommit
                     accounting  is enabled (mode 2 in /proc/sys/vm/overcommit_memory).  The limit is calculated according to the formula described under /proc/sys/vm/overcommit_memory.
                     For further details, see the kernel source file Documentation/vm/overcommit-accounting.


значит это то макс значение котророе может достигать vmcom он же Committed_AS
и рачитывается оно по формуле которую я рассмотрю ниже. 
и важно то что на самом деле это лимит проверяется только если overcommit_memory выставлен в "2"
посмотрим как у меня 


как я понял эта цфира зависит от 

$ cat /proc/sys/vm/overcommit_memory
1


значит на самом деле на vmlim 107.7G ядру абсолютно похеру. 
если бы overcommit_memory был равен 2 и какойто процесс начал бы себе заказывать памяти кусок 
и в это время бы vmcom  достиг бы vmlim то ядро бы послало нахер этот процесс.
но так как  overcommit_memory высталвен в 1 то при очеередном заказе памяти ядро не смотрит не проверяет 
достиг ли vmcom порога в vmlim
единсвтенное что продожает работать другой базовый охранник памяти это OOM. если ему чтото непонраивится
то он самый жиный процесс убьет.



итак если overcommit_memory=2 то  ядро при очередном заказе от процесса куска памяти проверяет что vmcom< vmlim
елси нет то говорит процессу пошел нахер и не выделяет ему память.

если overcommit_memory=1 то ядро не проверяет что vmcom< vmlim и говорит процессу - да ввсе окей память зарезервирвана.
но потом когда процесс начнет писать в памят и если память пеереполнисят то OOM killer начнет дропать процессы.

если overcommit_memory=0 то работает "умный" алгоритм. он с одной стороны не проверяет что vmcom< vmlim
но если процесс заказал себе овердохуя памяти то ядро его пошлет на хер.

это все рассмотрено с примерами в статье баелдунга = https://www.baeldung.com/linux/overcommit-modes#:~:text=Linux%20uses%20an%20overcommit%20policy,they%20do%20that%20at%20all


еще раз скажу у меня overcommit_memory=1 это значит что на vmlim ядру насрать. просто если процессы начнуть жрать 
много памяти а точнее как я помню что если у меня будет забита памят и весь свап то тогда появляется OOM и убивает процесс жирный по памяти.

кстаити такая настройка стоит из за того что к8 требует ее такую.

теперь насчет как расыияитывается vmlim
читаю man proc 
там написано


 In mode 2 (available since Linux 2.6), the total virtual address space that can be allocated (CommitLimit in /proc/meminfo) is calculated as

                  CommitLimit = (total_RAM - total_huge_TLB) *
                                overcommit_ratio / 100 + total_swap

              where:

                   *  total_RAM is the total amount of RAM on the system;

                   *  total_huge_TLB is the amount of memory set aside for huge pages;

                   *  overcommit_ratio is the value in /proc/sys/vm/overcommit_ratio; and

                   *  total_swap is the amount of swap space.

              For  example,  on  a  system with 16GB of physical RAM, 16GB of swap, no space dedicated to huge pages, and an overcommit_ratio of 50, this formula yields a CommitLimit of
              24GB.

              Since Linux 3.14, if the value in /proc/sys/vm/overcommit_kbytes is nonzero, then CommitLimit is instead calculated as:

                  CommitLimit = overcommit_kbytes + total_swap

              See also the description of /proc/sys/vm/admiin_reserve_kbytes and /proc/sys/vm/user_reserve_kbytes.


у меня вот эта хрень /proc/sys/vm/overcommit_ratio равна 50
вот эта эрень # cat /proc/sys/vm/overcommit_kbytes у меня равна 0

так что по идее у меня должно бы быть 0.5*RAM +swap тоесть 8+100GB=108GB  по факту же как мы видим у
меня vmlim равен 100GB тоест как мой свап.

непонятно но и хер с ним. потому что у меня overcommit_memory=1 а значит условие vmcom<vmlim  не проверяется


| atop #tslpu    
| atop tslpu    

у atop есть такое поле 
котоорое обозначает число тредов с сосотоянием D (ubunuteruptoible sleep)
так вот незнаю че за прикол.
  вот на таком ядре
    6.2.0-32-generic
  и на таком атопе
    2.7.1-1
он мне рисут как бутто у меня 82 D треда.
это полный бред. ибо это и ps aux опроврергает и top и прочее.
откуда он эту хуйню бетрет я незнаю. на этом же компе на виртулке все покзывается
нормально. на другом компе с ядром 5.4... тоже все окей.
пока езнаю что захцня.
атоп огорчил

