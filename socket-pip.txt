| socket
| pipe

как сокет работает.
что это такое.

хотя в статье также я нехило пайп рассматриваю тоже.

сокет это такая ядерная структура через которую 
два процесса могуо другс другом обениваться данными. тоеть
это элемент IPC.

вобще все элементы работы прцоесса почти они все лежаь в ядре. 
а процесс все время просит ядро с этими обьектами 
лежашими в ядре  чтото сделать. тоест 
это как иметь деньги в банке на счете. у вас к ним досутпа нет.
вы лишь можее попросить банк служащего чтото сделать с ними. 
и он делает это а вам дает лишь справку. тоже самое с прцоессом
и ядерными структурами. например процесс открыл файл. но нет. на самомд
деле это ядро открыло файл. а у вас есть лишь справка на руках
о том что он открыт. это (файл дескриптор). точнее это не справка
это якорь в памяти ядра об этом открытом файле. (смотри "| file descriptor")
а если и мы хотм чтото считать из файла. то читает 
не сам процесс а читает ядро. а нам ядро через окошко (сисколл) выдает то что 
ядро прочитало из файла. а точне даже так. ядро само записывает в некоторую
ячейку памяти памяти процесса то что ядро считало из файла. 
но даже когда данные уже лежат в памяти процесса сам процесс вобщемто
нихуя неможет с ними ничего сделать. почти ничего.
например сам процесс может сложить две переменные. для этого 
наконец то ядро об этом просить ненадо

	int a = 10;
	int b = 20;
	int c = a + b;

но чтобы напечатать "c" нужно опят же просить ядро. 
забавно.


перед сокетами поговорим про пайпы.
как это работает. мы просим ядро  - создай нам пайп.
ядро как я понимаю создает буфер в ядерной памяти 
далее ядро создает два файл дескриптора тоесть якобы ядро открыло
два файла и вот один файл дескриптор указывает на один файл
а второй указывает на второй открытый файл. хотя по факту
они оба указывают на один файл. только это не файл а буфер в ядерной
памяти. и получается что один fd позвоялет толко читать из этого
файла буфера а второй fd позволяет только писать в этот файл 
буфер. вот и весь пайп по своей сути. при вызове функции пайпа
мы через аргументы передаем две int переменные только не в виде
двух разных переменных а в виде int массива на 2 элемента
		int f[2];
и ядро возвращает в этих двух элементах два номера двух 
файл дескрпиторов
		f = pipe();
f[0] позвволяет толтко читать а fd[1] позволяет тольо писать.
процесс может вначале записать в fd[1] а потом прочитать из fd[0]
обычно мы создаем чайлда. у чайлда закрываем fd[1] а у мастера
закрываем fd[0]. и тогда мастер пишет в fd[1] а чайлд читает из fd[0]
и вот у нас интепроцесс коммуникейшн через буфер-файл в ядерной памяти.


щас покажу код


#include <stdio.h>
#include <stdbool.h>
#include <signal.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>
#include <string.h>


static void handler(int sig) {    struct sigaction act = { 	.sa_handler = SIG_DFL, 	.sa_flags = 0,     };
    sigaction(sig, &act, NULL);
    printf("Got signal %d\n", sig);
    kill(getpid(), sig);
}



int main(int argc, char **argv) {
    int pipefd[2];
    bool ignore = argc > 1 && argv[1][0] != '0';


    struct sigaction oldact, act = { 	.sa_handler = ignore ? SIG_IGN : handler, 	.sa_flags = 0,     };
    sigaction(SIGPIPE, &act, &oldact);



    pipe(pipefd);
    //close(pipefd[0]); // reader


    char ch3[1024];
    memset(ch3, '0', sizeof(ch3));


    for (int t=0; t<100; t++)
    {
    if (write(pipefd[1], ch3, sizeof(ch3)) < 0)
    {
	perror("write()");
	printf ("Error no is : %d\n", errno);
        printf("Error description is : %s\n",strerror(errno));
    }
    printf ("t = %i\n", t);
    }




    char ptr_buf[100];
    memset(ptr_buf, 0x00, sizeof(ptr_buf));



    if (read(pipefd[0], ptr_buf, 10) == -1)
    {
	perror("read()");
	printf ("Error no is : %d\n", errno);
        printf("Error description is : %s\n",strerror(errno));
    }


    char const * ptr_buf2 = ptr_buf;
    fputs(ptr_buf2, stdout);
    fputc(0x0a,stdout);


    sigaction(SIGPIPE, &oldact, NULL);



    return 0;
}






я хотел прокоментировать строчку
    if (read(pipefd[0], ptr_buf, 10) == 0)
она говорит чтобы ядро прочитало из файла 10 байтов.
но если файл меньше размером то прочитать сколько есть. 


тут мне пришло в голову а какой размер пайпа в буфере ядра прописан?
я нашел вот такое
$ ulimit -a
pipe size            (512 bytes, -p) 8

тоесть 512*8 = 4KB получается
ксати можно про пайп почитать через 
	$ man 7 pipe

моя програма она записывает по 1KB в пайп и пишет 
об этом  в форме t=1
максимум я пытаюсь засунуть в пайп 100KB
а читать я в этот момент не читаю. так вот там буфер 
в памяти получается забивается. и практика показала
что 63 или 64KB ядро принимает.
потому что на экране запись закнанчиватеся на 
t=63
и потом программа висить тоеть процесс входит в сон. 
потому что буфер забит и ядро проецсс сует в сон раз запрос 
write() не может выполниться.
и в свойствах процесса wchan он 
пишет что pipe_wait. из чего я делаю вывод
что почемуто предел пайпа по дефолту 64KB. 
но откуда она берется? я пока не понял 
соотвсвтенно если я начинаю читать из пайпа то запист успешно
продолжается и в итоге все 100KB проходят через пайп.
вопрос - где регулируется что размер пайп буфера в памяти ядра 64 KB? 
ага ! Я НАШЕЛ!==> в man 7 pipe написано что 
по дефолту это 16 СТРАНИЦ ПАМЯТИ. А РАЗМЕР СТРАНИЦЫ У МЕНЯ 4КБ ,
ЗНАЧИТ РАЗМЕР ПАЙПА ПО ДЕФОЛТУ 64КБ! СОВПАЛО!

размер страницы можно посмотреьть 
как 
	$ getconf -a | grep -i page
PAGESIZE                           4096
PAGE_SIZE                          4096


$ ulimit -a
pipe size            (512 bytes, -p) 8

а вот эта штука она оброзначает не размер пайпа а то какими 
атоарными порциями ядро должно записывать в буфер пайпа данные
принимая от процесса эти данные. тоесть что либо 4К либо ничего? (<===
проверить!)


с пайпом в целом картина начинает вырисовываться. 
есть два процесса. в одном указан write() и в нем указано сколько желательно
байт записать в файл. например 1024 байта. если ядро понимает 
что по каким то приинам оно не может записать все 1024 байта
то оно кладет процесс в сон. до тех пор пока ядро поймет
что оно может записать все 1024 байта. (<==== верно?)
в итоге процесс либо запиывает все 1024 байта либо нихрена и тогда он спит.
будет спатьдо тех пор пока ядро не сможет выполнить заказ.
кода процесс запиешет то есть его write() отоаботает то процесс
просто проддолжит работу дальше. также есть процесс с read() у него
указано сколько байт желательно прочитать напримре 2048 байт.
если ядро понимает что 2048 байт сейчас в буфере ядра нет то яддро
пооложит этот процесс спать. положим првый прцоесс записал 1024 байта.
у нас в буере ядра 1024 байта а этот процесс просит считать 2048 байт.
что будет делать ядро? как я погимаю оно положит читающий поцесс в
сон до тех пор пока в буфере неоказется 2048 байт! тоесть навечно
если првй проецесс бльше несобирается ничего писать (<===== проверить!)
также по попводу желатено прочитать 2048 байт. если ядро понимает
что достинут "конец файла" буфера  а читающий процесс заказал 128КБ
данных на чтение то как я понимаю ядро понимает что размер файла 64КБ
и выдаст из буфера все что есть не кладя его в слип. (<=== так?)
непоняно когда ядро принимет ершение что достигнут "конце" файла и некладет
процесс читаюий в слип!
и еще на счет SIGPIPE
вот есть связка команд
	 $ cat kubernetes.txt | head -c 1
я их пранализурую стрейcосом
	 $ strace -f cat kubernetes.txt | head -c 1
и видно что в процесс cat прилетает сигнал SIGPIPE

...
openat(AT_FDCWD, "/home/vasya/git/docs/kubernetes.txt", O_RDONLY) = 3
...
read(3, "0\220 KUBERNETES\r"..., 131072) = 131072
...
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=22992, si_uid=1000} ---
+++ killed by SIGPIPE +++

также видно что файл открывается в дескрпиор 3. и то что 
cat заказывает чтение кусками размером по 131072 байта.
тут кстати вопрос - что будеьделать ядро. оно обеспечит read 
именно 128КБ данных както .или оноп оложить процесс спть?
практика покзывает что ядро дает 64Кб для cat! (<==== разобраться)
и cat посылает это в head. тот считывает первый 1 байт. выводит
на экран и выходит ! но cat то продолжает работаь! ему надо дочитаьт
весь файл до конца! и тут получается прикол. со стороны cat открыт
файл ведущий в пайп буфер! а со стороны head уже ничего не откртыто
ибо этого прцоесс нет! и тодга при ппоытке записать cat новую порцию
в буфер ядра пайпа посылается сигнал в cat SIGPIPE означащий что
писатьв пайп бесподезно так как никто читать потом не будет! вот
пррода возниканеонеия SIGPIPE! единсвтенное что я ее не пойму
это почему сигнал посылает не ядро а процесс!?!!?!?  si_code=SI_USER, si_pid=22992
что за хрень!?!??! (<==== разюраться!)


$ strace -f -e file,read  /bin/cat ~/git/docs/kubernetes.txt 2>&1 | grep  -E openat(AT_FDCWD, "/home/vasya/git/docs/kubernetes.txt", O_RDONLY) = 3
read(3, "\r\n\320\243\320\241\320\242\320\220\320\235\320\236\320\222\320\232\320\220 KUBERNETES\r"..., 131072) = 131072

еще один стрейм показыаютщий что cat читаем данные кусками по 128КБ!
вот эта билиберда 
"\r\n\320\243\320\241\320\242\320\220\320\235\320\236\320\222\320\232\320\220 KUBERNETES\r"
в read(
это показано содержимое того что было прочитано read из файла!


<========== непонятно в read() write() фраза про размер. читат писать 
влоть до?!?!?!!?

<==== ест идея почему sigpipe приелетло от процесса. потому что 
у меня хендлер стоит SIGPEIPE в коде прграмы!



| socket
щас  туту чтото напишу про связь между компами использую сокеты.
libc функция socket() это первый шаг для установки соединения 
в сети нихуянет почти токлйовой инфо а что же сука эта делает?
в мане нет ничего полезного а что сука эта делает? там все внимание к 
параметрам. как я понял эта функция вот что делает - она создает в памяти 
ядра для этого процесса кусок служебных данных, структур, условно говоря
создает всякие там служебные переменные и буферы которые нужны ядру для 
того чтобы обслуживать сетевое соединение для этого процесса. тоесть через 
эту функцию (как я понимаю) мы гоорим эй ядро - создай там у себя в памяти
все нужные хрени (переенные буферы списки) которые тебе ядру нужны для того 
чтобы ты ядро могло обслуживать будущее сетевое соединение. результатом
выполенния этой фукнции будет то что тебе ядро вернет файл дескриптор. 
это просто ссылка для ядра которая ядру сообщает в каком "файле" внутри ядра
содержится структура которую ядро ранее подготовила а далее будет исопльзовать
для складывания туда всякой хрени которая нужна для обработки сетевого соединенеия.
я так понимаю что происходит какой смысл этой функции socket()
повторю в сети навскидку по этому поводу написана всякая водянаая хуйня
или ничего толком ненеаписано. итак когда мы заупскаем эту функцию мы говорим - 
эй ядро. я собиарась делать сетевой конект. создай там внутри себя в памяти ядра
все нужные хрени структуры для того чтобы ты могло обслуживать этот сетеовой
будущий конект. это как типа сказать слушай я дом собираюсь строить - найди
тиам рабочих, стройматериалы, документы, и все это притащи в одну кучу. скоро
будем строить дом. илли сказать  -я сайт будут создавать найти и собери в кучу
програмистов. вот я думаю что дедаетт этта функция. как я понимаю вся эту куча
мала в итоге внутри ядра имеет ссылочку - файл дескриптор. ну как имя переменной
, чтобы как то отличать. и эту ссылку ядро возвращает как внешний резултат
выполенения этой функции. мол я создало всю хрень внутри себя. а это тебе билетик,
покажешь мне же потом чтобы я могла с этой кучей малой работать. типа как котлован
вырыт. вот его номер на карте.  покажешь мне же потом.

значит аршументами этой функции ялвятся domain, type, protocol

 #include <sys/socket.h>

       int socket(int domain, int type, int protocol);

щас скажу приближенно. домен определяет будем ли мы далее работать с ipv4
или ipv6 протоколом. обозначается это вот так 
ipv4=AF_INET
ipv6=AF_INET6


 далее как мы помним что ip протокол он сам по себе  
в сеть не выпускаеся. у него внутри ВСЕГДА ВСЕГДА ВСЕГДА И ЕЩЕ РАЗ ВСЕГДА 
содержится какйто проткол внутри. и этот протокол может быть либо connection
oriented либо connection less. 
если протокол конекшн ориентед то у него 
куча свойств - все байты нумеруются. условно говоря. и если мы отправили 1234
то они долетят до той стороны. там их также строго сгруппуруют и они в 
приложение будут всунуты строго как 1234. на каждый байт что отправили нам 
обязательно с той стороны (ядро той стороны не приложение) обязательно доолжно
прислать подветржддение о получении. ввроде как со стороны юзер программы которая 
будет ползоваться таким протоколом - она может пихать в соединенеие хотть по 
одному байту и отправлять. одним из таких протоколов есть TCP

конекшн лесс протокол это наример UDP. с точки зрения юзер программы ползуясь
им можно отправлять неотдельные байты а толлько куски фиксированного размера
ни больше ни меньше. типа как запись на блочный диск. если мы послали такую
датаграмму то в ответ с той стороны ядро ничего присылать не будет. если 
и будет ответ о подтверждении то уже только от самого юзер приложения с той
стороны , но это уже к UDP неимеет отношения. пэтому в целом юзер пограмма
может через такой проткоол отсылать только сразу большие куски. ответа 
с той стооны от ядра небудет. долетело не долеело непонятно. если мы пошлем 
на на ту сторону скажем кусок1 кусок2 кусок3 и они прилетят даже все но 
по таймингу как  куско2 кусок1 куско3. насколько я полгаю ядро с той стороны 
небудет перегрупппироввыать эти куски. оно в такой порядку их и сунет
юзер прогорамме на той стороне. 

так я  это к чему второй параметр "type" он указывает какой тип протокола 
внутри пакета IP будет вставлен. это будет конекшн протокол или безконешн
протокол.  SOCK_STREAM - конекш ориентед тип проткола, SOCK_DGRAM -безконекш
тип проткола. 

последний параметр "protocol" это уже сам конкнетный протокол который будет
вложен внутр IP пакета. обычно последний параметр оставлят равным 0. таким
оразом давая ядру самому выбрать какой протокол вклвыдывать внутрь IP пакета.
если мы выставили type=SOCK_STREAM и protocol=0 то ядро выберет TCP
если мы выставили type=SOCK_DGRAM и protocol=0 то ядро выберет UDP

посмотрим на живом примере

$ strace -e socket  curl -4 mail.ru
socket(AF_INET, SOCK_STREAM|SOCK_NONBLOCK, IPPROTO_TCP) = 5


посморим на прмиере прям кода на си


#include <sys/socket.h>

void main() {

    int vasya = socket(AF_INET, SOCK_STREAM, 0);

}


тут я подчеркну что ппраметры имеют тип целых. поэтому это числа . 
а AF_INET, SOCK_STREAM это полчается как бы сист переменные которые в процессе
комплияции преобарузют эти литеры в числа.

а вот результат

    $ ltrace   ./196.exe
        socket(2, 1, 0)       

видно что либц фунция зпускается с параметрами коорые являтся просто числами

а вот еще
    $ strace -e socket ./196.exe
        socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 3


и получается что либц функция socket(2,1,0) в итоге заускает сисколл уже 
в виде  socket(AF_INET, SOCK_STREAM, IPPROTO_IP)

как можно увидеь что сисколлл уже запускается с указанием конкнетного прокола
IPPROTO_IP

далее я высняю что 0 в третьем параметре и IPPROTO_IP это на самом деле 
одно и тоже! просто одно в буквенном виде а второе в виде числа! и на по факту
этот 0 или что тоже самое IPPROTO_IP( который просто с точки зрения си это макрос
тоесть спец перменная которая будет заменена на число препроцессором). так 
вот 0/IPPROTO_IP означает для ядра при взыываео сисколлла socket() что 
мы просим ядро самого выбрать какой протокол использовать нвутри IP пакета 
исходя из заданных двух переменных первых. а в ядре прописано что 
если первые две перменные 

        AF_INET, SOCK_STREAM

то проткол внутри по дефолту будет TCP
а если первые две мерпенные заданы как 

        AF_INET, SOCK_DGRAM

то по дефолту будет заюзан внутри проктокл UDP !!!

тоесть кгда мы делаем ссикоолл в виде 

        socket(AF_INET, SOCK_STREAM, IPPROTO_IP)
        socket(AF_INET, SOCK_STREAM, 0)

мы говорим ядру что будем юзать ipv4 и внутри какойто конекш ориентед 
протокол. а какой ты ядро само выбери! вот какой смысл!

а кгда мы делаем ссикоолл в виде 

        socket(AF_INET, SOCK_DGRAM, IPPROTO_IP)
        socket(AF_INET, SOCK_DGRAM, 0)

мы говорим ядру что будем юзать ipv4 и внутри какойто без-конекш 
протокол. а какой ты ядро само выбери! вот какой смысл!

единсвтенное  что обавлю что в си прогамме если третий параметр не 0 а
именно буквы то нужно еще один h файл пдключать! иначе он комплятор не поймет!


#include <sys/socket.h>
#include <linux/in.h>     <============

void main() {

 int vasya = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                                              /|\
}                                              |
                                               |


тоесть нужно подклчать in.h  чтобы можно было указать треитий парметр не 0
а IPPROTO_TCP или IPPROTO_IP

итак IPPROTO_IP означает для ядра - выбирай протокол внутри IP САМ СУКА!
название переменной крайне дебильное. думаешь сначала а что это значит нвутри 
протокола IP используй iP . хйнйя какаято. дебилы

а еси мы хотим явно указать ядру чтобы он юзал TCP внутри IP то тогда надо
указать явяно! через IPPROTO_TCP 
листин я уже привел.
щас покажу трейсы

  $ gcc -o 196.exe 196.c
  $ ltrace ./196.exe
     socket(2, 1, 6) = 3

  $ strace -e socket  ./196.exe
    socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3

таким образом 6 и  IPPROTO_TCP это одно итоже.

ксати в in.h полезно заглянуть

  IPPROTO_IP = 0,       /* Dummy protocol for TCP       */
#define IPPROTO_IP      IPPROTO_IP

  IPPROTO_ICMP = 1,     /* Internet Control Message Protocol    */
#define IPPROTO_ICMP        IPPROTO_ICMP

  IPPROTO_IGMP = 2,     /* Internet Group Management Protocol   */
#define IPPROTO_IGMP        IPPROTO_IGMP

  IPPROTO_IPIP = 4,     /* IPIP tunnels (older KA9Q tunnels use 94) */
#define IPPROTO_IPIP        IPPROTO_IPIP

  IPPROTO_TCP = 6,      /* Transmission Control Protocol    */
#define IPPROTO_TCP     IPPROTO_TCP

  IPPROTO_EGP = 8,      /* Exterior Gateway Protocol        */
#define IPPROTO_EGP     IPPROTO_EGP

  IPPROTO_PUP = 12,     /* PUP protocol             */
#define IPPROTO_PUP     IPPROTO_PUP

  IPPROTO_UDP = 17,     /* User Datagram Protocol       */
#define IPPROTO_UDP     IPPROTO_UDP


так вот сморим описание

  IPPROTO_IP = 0,       /* Dummy protocol for TCP       */

по мне КРАЙНЙ КОНЧЕНОЕ ДЕБИЛЛОИДНОЕ ОПИСАНИЕ ЭТОЙ ПЕРЕМЕНОЙ СУКИ.
что значи дамми протокол дебилы ? это вообще неверно. как я укаже сказал
для конекшн протокола на самомо деел этот  0 будет значиит TCP а для 
безконекшн проткола этот 0 будет значитть UDP. а что эти суки написали уебки?


далее проубую вот такое

 N 隅  $ cat 196.c
#include <sys/socket.h>
#include <linux/in.h>

void main() {

 int petya = socket(AF_INET, SOCK_STREAM, IPPROTO_IPIP);

}

почему то шлет нахуй
  $ strace -e socket ./196.exe
socket(AF_INET, SOCK_STREAM, IPPROTO_IPIP) = -1 EPROTONOSUPPORT (Protocol not supported)


с sock_dgram тоже самое
$ strace -e socket ./196.exe
socket(AF_INET, SOCK_DGRAM, IPPROTO_IPIP) = -1 EPROTONOSUPPORT (Protocol not supported)


пробую ICMP

$ sudo strace -e socket ./196.exe
socket(AF_INET, SOCK_DGRAM, IPPROTO_ICMP) = 3

по мне раз проткол ICMP вложен сразу внутри IP то он такоже как и TCP\UDP
тоесть того же 4 уровня. 

ксатти манул по socket() надо чиать не тлкьо в man socket но в  

        $ man 7 ip


кстаи пишут что нетак

#include <linux/in.h>

а вот так более правильно

#include <netinet/in.h>


ксатти для IPPROTO_IPIP у меня сработало вот так

  socket(AF_INET, SOCK_RAW, IPPROTO_IPIP) = 3


еще раз потвторюсь что значит вызов это функции. мы ядру заказывам подгтовить 
всякие вспомнательные данные стркуткруты и сситемные пременные - инициализировать
их которые нужны для оббработки сетевого потока будущего.буферы там всякие.
все эти стркутуруры изготвадиваются в области памяти ядра. и они ипдивидуальны
для этого процесса. посольку сетевые протколы разные то мы в паараметрах этой
фнции описываем ядру с каким протоколом мы будем иметь дело. а точнее мы ядру
описываем с каким двумя протоколами мы будем иметь дело. мы описываем какой
будет проктол более верхенго уровня ipv4 или ipv6 и какой протокол более нижнего
уровня вложенный тоже у нас будет. будет ли это TCP или UDP или ICMP

вот жта строка

   socket(AF_INET, SOCK_DGRAM, IPPROTO_ICMP) = 3

говорит ядрву- полгтовь для нашего процесса у себя в памяти стркутруры чтобы 
осблужить будущее IPv4+ICMP соединение. ядро готовить эти струтктуры 
в таблице параметров этго процесса в ядре. и возрваащает ссылку на эту стркутуру
в виде файл дескриптора 3. 

а вэтой строке

  socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

мы просим ядро для данного процесса в оболасти памяти ядра где харнятся 
служебные данные по данному прцссу подгтовить нужные структуруты чтобы обслужит
будущее содениене формата ipv4+TCP

вот каков смысл этой функции.  это типа того что - приедет запорожец в наш 
гарах подготовь там все нужные инстурументы для ремонта. и ядро возвращает
номер гаража такого. гараж номер 3. 
а еще говоритподгтовь гараж для ремонта бмв. и ядро верент гараж номер 5
как я понима внутри этой структуры данных в ядре хранится потом вся инфомрация
по текущему состоянию этого сетевого потока. это еще типа как гараж плюс
статус ремонта. поэтому каждая такая струкрутра по дебилному названная сокет
обслуиживает одно сетевое соедниение мне кажется. почему эти професилоналы
дебилы не могут это обьясиь в интернете я незнаю.

поэтму кгда говорят создадим TCP сокет это полунаека. создается сука не TCP сокет
создается IP+TCP сокет. вот в чем соль! а сокет это область в памяти ядра точнее
область харнящая все пременые процесса. сокет это одна из структур в которой
хранятся все перменные и вспомгательные буферы и структуры которые нужны ядру
чтобы осблуживать сетевое содеинение одно для этого процесса. 

мне кается три парамтера в функции socket это дебиалное решение. 
первый парамер все поняно либо ipv4 либо ipv6 либо там еще есть 
знаения для протокола сетевого уровня. все понятно. а вот дальше чехарда.
надо было простооставит одну перменну которая бы обозначала протокол более 
верхнего уровня и нахуй. но ни сделаи как дебилы. они просят указать класс 
этого более верхрего протокола (с конешкшенами или без он) а потом уже сам 
этот верхний протокол. нахуя так было делать? ну есивневенне что третий парамтер
можно оставит 0 и тогда типа ядро само решит. ну .. такое себе решение. 
типа кода нибдуье для conection oriented типа протокола  вместо TCP будет дефолтовый протокол XYZ и код програам ненужно 
будет перекомпилировать. тока если в этом выигрыш?

итак с этим стало понятно. когда мы вызывали socket() то у нас в таблице проецесса
в ядре создались пустые проинициизиорванные новые структуры. но пока это пустой
гарах пустышка. ничего пока ни  в сеть ни из сети не прилетело. пока что повторюсь
просто кусок памяти как то там забился пустыми переменными типа того. 
вот каков физ смысла вызоыва socket()

как еще можно сравнить вот мы хотим чтот напечатать. и мы перед этим инициилируем
перменную такого то размера

   int a;

тоесьт в памяти правда не ядра в юзер спесе но тем не менее  создается кусок
размром скажем условно 16бит. под пременную.  это и есть уловно такойже 
смысла как вызов socket()
на следущем этапе мы можем всунуть таду занчение
   a=10;
и толкьо потом напечататьа

   printf (a)

также и сет сеодеиенем. прежде чем чето начать таскать  всеть или из сети.
надо в памяти создать кучу всопомогательных стркутур. потом чего то вних всунуть
и ттоько потом это пихать в сет карточку. 


насоклько я понима с точки зрения приложения если мы юзаем TCP тоесть
conection oriented проткол то один из его плюсов это то что мы можем пихать 
в сеть хотт 1 бай. хоть 3 байта. тоест приложение ненужно запариваться 
сколкьо байт надо пихать в сеть через вызов ( о котоом далее) который уже непосредт
венно пихает данные  всеть.  а есл это UDP то есть без когенекотовый пртокол
то приожение обязано ка я помниаю внаалале заполрнить буфер такого то размера
скажем 1500 байт. и толкьо потом оно может передвать в ядро запрос на 
передачу этого куска. тоест даныне чиать и запиывать в таком протооле в сеть
можно только фикирваннвыми кусками.  это как штанга и хлеб. хлеб можно резать
люыми кускми. а штангу можно разбирать и собирать только размерми блинов.

ксатти про пинг

# strace -e socket ping -4 -c100  1.1.1.1
socket(AF_INET, SOCK_DGRAM, IPPROTO_ICMP) = 3
socket(AF_INET, SOCK_DGRAM, IPPROTO_IP) = 4

мне непонятно зачем он содаем два сокета. ведь поток будет один

$ sudo lsof -p $(pidof ping) 2>/dev/null
COMMAND    PID USER  FD   TYPE  DEVICE SIZE/OFF      NODE NAME
...
...
ping    423780 root   3u  icmp              0t0   7452147 00000000:0085->00000000:0000

интересно ксатти. зупушу я кучу пингов. они летят обратно на наш комп
с той стороны. как ядро понимает к какому процессу отночится этот ответ?
думаю что в icmp  нутряшке чтото содержится. 

я бы скаазал что сокет отвечает за обеоеспевивающий структуры всопомгательные
для упорядоченной последователности ip пакетов от одного процесса.

итак стуруктры создали. пока там условно пустышик. пустые ерменные.
второй шаг это фукция

   connect ()

пожложим у нас сокет ipv4+TCP
тогда на самом первом этапе нам нужно укзаать dest IP  + TCP port
и ядро нашего компа должно обменяться с ядром удаленного компа тремя пакетами
SYN, SYN-ACK,ACK
тода счтается что TCP конект поднялся. я считаю что во время conect() именно
это и делается. 


 #include <sys/socket.h>

       int connect(int socket, const struct sockaddr *address,
           socklen_t address_len);

у него параметры как раз об этом и говрят. мы ему пердаем дескприотор сокета
тоесть где лежать сткрутуры чтобы вести статистику и харнить промежутончные
данные по конекту, мы ему пердаем IP адрес и порт, и третья перменная это 
длинна второй переменной  , я думаю что существоавание терретьей переменной
это чисто из за самой архитектуруы языка си. потому что ну поинтеры хуеинтеры
и как я помню там нихуня неизвестно а где конец данных. адрес наалчаданных 
хранится в поинтере. а где его конец неивзвестно . вот третья перменная об 
этом и говорит. я так думаю.

важно еще то что наща программа еще никких живых данных на ту сторону 
не отсылает. происходит чисто всопоогательная операция. считай что мы звоним
на тел станцию и просим опеатора соединить нас  с  васей. и вот эти три пакета
туда обратно это процесс содеинения. может васи дома нет. или телефон не существует.
тоесть в этих трех пакетах нет данных от юзер программы. это чисто ядра между 
собой обмениваются этой хуйней. для юзер приложения резултатом будет то что 
сама сткрутура сокет набьебтся првичной статсичтикой. ну и главное то что 
если обмен тремя пакетами состоялся то ядро верент в коде возврата число 0.
юзер приложение видит 0 и понимает что трех пакетная чехарда состояалась успешно. 
этот как послать чувака сбгать посмореть - магазин открыт или нет. если да
то можно уже самому собираться. или как дать задание сккретарше дозвонись 
до горкома. она довзнилась и жмет теебе на зеленую конопку. у тебя загорается
зеленая лампочка значит секратараша довзовнилась. ага понятно. значит можно
уже самому начинать поднимать трубку и гворить.

так программа которая делает socket()+connect()


 6 䟳  $ cat 197.c
#define _XOPEN_SOURCE 700

#include <assert.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <arpa/inet.h>
#include <netdb.h> /* getprotobyname */
#include <netinet/in.h>
#include <sys/socket.h>
#include <unistd.h>


int main(int argc, char **argv) {
    char buffer[BUFSIZ];
    char protoname[] = "tcp";
    struct protoent *protoent;
    char *server_hostname = "127.0.0.54";
    char *user_input = NULL;
    in_addr_t in_addr;
    in_addr_t server_addr;
    int sockfd;
    size_t getline_buffer = 0;
    ssize_t nbytes_read, i, user_input_len;
    struct hostent *hostent;
    /* This is the struct used by INet addresses. */
    struct sockaddr_in sockaddr_in;
    unsigned short server_port = 53;

    if (argc > 1) {
        server_hostname = argv[1];
        if (argc > 2) {
            server_port = strtol(argv[2], NULL, 10);
        }
    }

    /* Get socket. */
    protoent = getprotobyname(protoname);
    if (protoent == NULL) {
        perror("getprotobyname");
        exit(EXIT_FAILURE);
    }
    sockfd = socket(AF_INET, SOCK_STREAM, protoent->p_proto);
    if (sockfd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    /* Prepare sockaddr_in. */
    hostent = gethostbyname(server_hostname);
    if (hostent == NULL) {
        fprintf(stderr, "error: gethostbyname(\"%s\")\n", server_hostname);
        exit(EXIT_FAILURE);
    }
    in_addr = inet_addr(inet_ntoa(*(struct in_addr*)*(hostent->h_addr_list)));
    if (in_addr == (in_addr_t)-1) {
        fprintf(stderr, "error: inet_addr(\"%s\")\n", *(hostent->h_addr_list));
        exit(EXIT_FAILURE);
    }
    sockaddr_in.sin_addr.s_addr = in_addr;
    sockaddr_in.sin_family = AF_INET;
    sockaddr_in.sin_port = htons(server_port);

    /* Do the actual connection. */
    if (connect(sockfd, (struct sockaddr*)&sockaddr_in, sizeof(sockaddr_in)) == -1) {
        perror("connect");
        return EXIT_FAILURE;
    }

    sleep (10);

    shutdown (sockfd, SHUT_RDWR);
    close(sockfd);
    
}



 7 ජ  $ strace -e socket,connect ./197.exe
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3
connect(3, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("127.0.0.54")}, 16) = 0
+++ exited with 0 +++


а вот tcdump


    127.0.0.1.59602 > 127.0.0.54.53: Flags [S], 
    127.0.0.54.53 > 127.0.0.1.59602: Flags [S.]
    127.0.0.1.59602 > 127.0.0.54.53: Flags [.], 


[S] = SYN
[S.] = SYN+ACK
[.] =ACK

тоесть реально три шага. 

в конце проги у меня стоит

   sleep (10);

    shutdown (sockfd, SHUT_RDWR);
    close(sockfd);
 
при этом ядро вот что делает в сети

    127.0.0.1.59602 > 127.0.0.54.53: Flags [F.],
    127.0.0.54.53 > 127.0.0.1.59602: Flags [F.],
    127.0.0.1.59602 > 127.0.0.54.53: Flags [.], 


[F.] = FIN+ACK
[.] = ACK

главное что я увидел это то что реально при connect() у нас ядра 
швырают друг в друга три пакета. туда оттуда туда
вот эти три гшага SYN, SYN+ACK, ACK они о чем.
я отправил туда , он полуил и подвердил. и я получил и потдвердил.
причем я то знаю что он получил потому что подвердил. а получил ли он 
от меня подверждение хрен знает. по мне было бы умно делать 4 шага. 

остатеся разбраться с форматом параматров у connect() 
а потом разбраться с парамтрами как деать отправку передачу.
чтобы я окончательно понял что при отправлке IP+TCP юзер программа ничего
незнает об подророностях протоколов кроме как IP адреса и порта и все. 
а все  остальное что она делат это просто пихает данные как бутто это 
обычны файл на диске. вот в этм я хочу убедиться.

тут я еще понял то что у меня клиент звонит на срвервер через ip+tcp
и это еще имеет какоето отражение в коде киента. но по факту при этом 
также у нас система использует и ARP. и в клиенте это не имеет никаокго
отажения. тоесть ARP заупскает и обрабатвыаеи искдлюительно ядра на моей
мащшине и другой. юзер спейс вобще этого невидит не знает неслышит. 
это говорит о том что ARP протокол он точно уровня 4 или ниже. я задался
вопросом какого уровня протокол и что это значит по каким признакам отностя
протокол к тому или иному OSI уровню?? оказаывется это тоже очень мудреный
вопрос.  я рассматриваю его отдельно в arp.txt 

вовзращаюсь обратно  к socket() и connect()

запускаю программы 197.exe ( смотри  в папке C)
она по TCP делает socket()+connect(127.0.0.54:53) и больше ничего. 
я хочу убедиться что во время coonnect() ядро делает 3 шаговый TCP хендшек.
делает это чеерз тцпдамп. ловим только SYN,SYN+ACK,ACK пакеты. 
как я понял из man tcpdump  что загадочные слова SYN, ACK, SYN+ACK
это на самом деле название битов в TCP хидере

 CWR | ECE | URG | ACK | PSH | RST | SYN | FIN

тоесть если мы ловим TCP+ACK пакет это значит что мы ловим пакет у 
кторого в TCP хидере стоят два включенных бита  SYN, ACK
как это сделать через тцпдамп


запускем клиент
$ strace -e socket,connect ./197.exe
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3
connect(3, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("127.0.0.54")}, 16) = 0


ловим выхлоп сет потока в tcpdump

# tcpdump -nnvvv host 127.0.0.54  and "tcp[tcpflags] & (tcp-syn|tcp-ack) != 0"     -i lo

    127.0.0.1.45178 > 127.0.0.54.53: Flags [S] 
    127.0.0.54.53 > 127.0.0.1.45178: Flags [S.]
    127.0.0.1.45178 > 127.0.0.54.53: Flags [.]


 Flags [S]  = означает что в TCP хидере уксанолвен бит SYN
 Flags [S.] = SYN+ACK
 Flags [.] = ACK

таким макаром я подтверди что connect() он вызывает то что ядро начинает
делать TCP хуйшейк трехшаговый. окей

 
а во время выполнения функций

    shutdown (sockfd, SHUT_RDWR);
    close(sockfd);

в сеть летит трафик
    127.0.0.1.45178 > 127.0.0.54.53: Flags [F.]
    127.0.0.54.53 > 127.0.0.1.45178: Flags [F.]
    127.0.0.1.45178 > 127.0.0.54.53: Flags [.]

[F.]  = FIN + ACK

тоесть видимо так TCP конект закрывается.

так вот в клиенте пока я не вставил sleep на 10 секунд 

во время ловли этого трафика можно замтнтиь что тцпдамп охуенно ругается
что пакеты имеют неверный CRC
напрмиер 

 127.0.0.1.33922 > 127.0.0.54.53: Flags [S], cksum 0xfe65 (incorrect -> 0x1857)
                                                            /|\
                                                             |
                                                             |

и я такой что за нахуй. оказывается 

    You see the "incorrect" checksums due to a feature 
    called TCP checksum offloading. The checksum fields 
    for outgoing TCP packets are not pre-calculated by 
    the operating system but instead set to 0 and left 
    for calculation by the NIC processor. The Wireshark 
    FAQ has a more detailed explanation.
(https://serverfault.com/questions/288491/too-many-incorrect-checksum-errors-in-tcpdump)


еще слова про коннекшн ориенте протоколы против безконекшн протоколы
фишка TCP в том что если в него вначале сунуть 1 ппотом 2 то ядро  в
приложение на той стороне сделает точно также внезависимости в каком 
порядке на той стороне  в ядро прилетит 1 и 2 то ядро всунет в то 
приложение вначале строго 1 а потом строго 2.
UDP помимо того что в него нельзя вснууть 1 и 2 потому что в него можно
совать только кучу байтов строго поределенного размера скажем 1500 байт.
так вот если мы пошлем первые 1500 байт а потом я из приложения  суну
вторую группу 1500 байт. то на той сторрне ядро сунет в приложение 
эти группы ровно в том порядке в котором они прилеттят. если вначале
долетит группа 2 то она и будет всунута в приложение. если вышестоя
щее приложение опирается на UDP оно должно само как то контролировать 
пордок пакетов. тоесть само приложение должно нумеровать пакеты. и 
если какойто пакет недолетел запрпшивать его отправку у приложения
на той стороне повторно отправиить.

работаю с этой стьеей https://beej.us/guide/bgnet/html/#what-is-a-socket
она вроде и неплохая но все равно уебищная. все отсрые тяжелвые вопосы
оописаны хуй знает как. ну тоест как обычно. правду тяжело понять
и тяжело передать. лушче будем на увереных щас писать хйню.
например они пишут что для TCP нужно maintain an open connection.
а что это блядь на уровне линукса сука конкртено значит? а хуй знает.

как я понял - если сети надежные то UDP дает некий прирости толи срупрута
то ли отклика. но как минус нужно контролировать поток на уровне приложения.
но типа якобы оверхед получается небольшой хотя с хуя ли. ведь на уровен
приложения нужно нумеровать пакеты. и прочеее. но типа повторы происходят
редко. а TCP берет эту функцию на себя. но зато он требует делать подверждения
для кажодго пакета. что типа как мега оверхед. зато приложению ничего 
ненадо делать. только слать чистые данные. насколько это все круто в
цифрах. TCP vs UDP хуй знает. 

меня конечно поражает у людей скилл брать тяжелые вопросы и освещать
их хуй как на увеерренных щас. гении какието. 

далее в саттья уппминается что интел процессоры они хранять многобайтовую
хуею в памяти так что первым сохраняется младший байт. а последним самый
старший байт. например  на бумаге мы записывем всегда так что самый старший
байт пишем слева а самый младщий справа. это на бумаге
берем на бумаге

  FF AA

так вот проц интел он в своих регистрах сохраняет эти два байта ровно
также 
  
  FF AA

правда у реистров нет адресов. у них есть именнованные называния. 
короче важно что в опертивке где каждая ячейка имеет адрес
сохранение идет наобоот. в ячпйке памяти с адресом 1 будет записан 
из цпу байт AA а в ячейке 2 будет записан байт FF
такая архитектура назвыается LittleEndian 
у разных цпу+память разная в этом плане хуйня. другие цпу хранять много
байтовую конарстурцию наоброт. тоесть BigEndian
а  в сети в сетевых пакетах как я понял принято ВСЕГДА много байтовую
хуйню всенда записывать в виде BigEndian.
так вот в Си  поряок который цпу юзает при записи в паммять называется 
HostByteOrder. а порядок сетевой называется NetworkByteOrder.
так вот когда щас начнем арботать с данным которые мы пишем из оперативки
в сеть то нам пртгодятся Си функции которые автоматом умеют конвертиовать

        HostByteOrder  --> NetworkByteOrder

причем нам ненужно запарвиться какой реално порядок на компе и в сети. 
мы просто кадй раз ызываем эти фунции и все.

эти фунукии работают для данных из двух байт (short) и четрыех байт (long)
и имеют называния которые можно логически расшифроваьт

  htonl() = Host TO Network Long ()
  htons() = Host TO Network Short ()
  ntohs()
  ntohl()

далее рассатривтся что такое struct в СИ . читай про это тут - c+assembly.txt
( | struct)

дальнейшее повестовтваие идет в  "c+assembly.txt"

==







ссылки:
man socket 
man 7 raw
man 7 ip
man connect
