| proc
| process running
| runnable
| uninterruptible sleep
| iowait
| R state
| D state

щас я обсужу несклько вещей


в /proc есть интересное место

/proc/stat

$ cat /proc/stat
cpu  4721737 21576 1636313 56013236 21500 0 32164 0 871770 0
cpu0 1168534 4828 394858 22597623 8237 0 6433 0 220313 0
cpu1 1150680 5550 377133 11175716 4386 0 17068 0 210190 0
cpu2 1204062 7722 435046 11109192 4629 0 5075 0 222604 0
cpu3 1198459 3475 429275 11130703 4246 0 3586 0 218662 0
ctxt 488212260
btime 1716190979
processes 741103
procs_running 1    <====  **
procs_blocked 0    <====  **
softirq 138098337 780915 15216060 260 5311571 773763 3 269048 86472933 3796 29269988

есть две интересные строчки

	procs_running 1  (1)
	procs_blocked 0  (2)


первая строчка показывает сумму числа процессов которые имеют R сосотяоние
тоесть runnable

вторая строчка показывае число процессов в D сосотоянии

таким образом с какой то степенью точности можно узнавать 
число R+D тредов (кстати да оно показывает не число процессов а число тредов!
дело в том что с точки зрения ядра его програмирования то что зовется 
тредами в юзерской литераутту в ядрерном програмиорвании называется процесс
а то что мы называем процессы в юзерской литературе в ядреной лтературруе
называтеся группа процессов) путем суммиорвания этих двух
строчек

вот как это можно делать

$ for i in $(seq 0 10); do echo $((  $(grep "procs_running" < /proc/stat | awk '{print $2}') + $(grep "procs_blocked" < /proc/stat | awk '{print $2}')  ));  sleep 5;  done
3
2
1
5
1
1


%iowait
я еще одну итересную штукю обсудю.
в строке про cpu есть пятый столбик
                                     ||
                                     \/
cpu  4721737 21576 1636313 56013236 21500 0 32164 0 871770 0


это %iowait
вот что про него написано в man proc
 iowait (since Linux 2.5.41)
                            (5) Time waiting for I/O to complete.  This value is not reliable, for the following reasons:

                            1. The CPU will not wait for I/O to complete; iowait is the time that a task is waiting for I/O to complete.  When a CPU  goes
                               into idle state for outstanding task I/O, another task will be scheduled on this CPU.

                            2. On a multi-core CPU, the task waiting for I/O to complete is not running on any CPU, so the iowait of each CPU is difficult
                               to calculate.

                            3. The value in this field may decrease in certain conditions.


а теперь я расскажу что он на самом деле значит.
а значит он полный пиздец. 
значит создатели ядра вот что придумали.
если у нас цпу реально занят выполенением какого кода  (тоесть кода  в непривлигиорваноном
режиме то есть это время выполенения кода юзерского процесса  %user то они это время
суммируют в стообике %user, есл цпу находится в привилигированном режиме но выполняет непросто
код ядра а интерапт хенлер то они этоо время суммируют в %hi , если цпу работает в привилигированном
режиме но не обрабатывает интеррапт то они это время суммуируют в %sys итд . важно то что 
на цпу выполняется хотьт какойто хоть чей то код) то они это время раскладывают по разным
полочкам. а теперь представим что цпу не выполняет никакой код. и ТУТ НАЧИНАЕТСЯ ПИЗДЕЦ.
если на цпу невыполнятяс никакой код но в очереди шедулера на этом цпу есть процесс который
имеет D стейт то эти дебилы заносят это время в %iowait колонку. тоесть она по факту начинает
нам показывать %busy time ДИСКА ЕБАНЫЙ КАРАСЬ!  спрашивается нахуя вы пихаете характиеритику
загрузки другой железки тоесть диска в график загрузки цпу!?!?!?!?!?!?!? вот в этом пиздец.
как в том стихе "смешались кони люди и залпы тысячи оорудий". тоесть физически %iowait 
время означает что в это время цпу был %idle но при этом был процесс который ждал ответа
от диска. если же цпу ничем не занят и в очереди нет ни одного процесса с D стейтом 
то они это время заносят в %idle

пиздец такой схемы состоит в частности в том что когда мы смотрим на график скажем через
nmon и мы видим там некий кусок синней полоски который означает iowait% то при такой 
схеме описания статистики по цпу очень трудно  правильно трактоват то что мы видим на экране
из за этих долбоебов.

предположим у нас на эарне нарисовано 
		%user 20  %iowait 30  %idle 50

и интутивно хочется подумать что 20% цпу работал. 80% цпу неработал 
и (САМОЕ ГЛАВНОЕ) 30% времени какойто процесс был на компе котоырй ждал ответа от диска.
ТАК ВОТ ЭТО НАЕБАЛОВО ПОЛНОЕ.

правильная трактовка будет вот такая -  
80% времени цпу нихеренан не делал. в вэто время (втечение этих 80% ) часть этого времени
у нас были на компе процессы которые ждали ответат от диска. причем это еще хуй поймемешь 
я щас обьясню почему.
далее 20% времени у нас цпу работал И (ЕЩЕ ОДНО ОЧЕНЬ ВАЖНОЕ) что было при этом с процессами
которые тоже стояли в очереди  имели D стейт ЭТО НАМ УЖЕ НЕСООБЩАЮТ! в этом еще один 
пиздец. тоесть если цпу занят хотьт чем то то они в эти моменты времени неанализируют
а есть ли в этом время в очереди также процессы ждушие ответа от диска. может они еть
а может их и нет. хуй знает. поэтмоу iowait время в этоот момент НЕУЧИТВЫВАЕТСЯ поэтому
мы незаем чтобыло в тчение вот этих 20% времени когда цпу был %user может там был %iowait
а может его и небыло. в этом полнвй пиздец этой ихней схемы.
они начинают считать iowait только в те времена когда цпу нихрена неделает. щас
покажу графичеки как они все наворотили


                            (есть\нет) нагрузка на цпу_______________
                                                \         \
                                                 \         \
нагрузка на цпу есть "+" или нет "-" ==> |++++++++++++|-------------------------------------------|
iowait есть "////" или нет "====="   ==> |????????????|/////====/=/=//===//==/=//==//=//==/=======|
или хуй знает "??????"                             /    /             /
                                                  /    /             /
        (есть\нет) нагрузка на диск  ------------/----/-------------/



и вот получатется что на том участке где нагрузка на цпу еть там эти дебилы прекраащают
снимать статистику есть ли в этот момент процессы с D стейтом или нет. они это нам
несообщают. поэтмому статстика %iowait она отноится только к участку когда цпу 
нихрена неделал. тоесть эт дебилы они собирают часть парамтеров работы сситемы на всем
интервале времени сэмплина  а iowaut собирают только на части этого интервала.
разве не дебилы? поэтому вот если мы видим на картинке

             12s         10s         20s
         |++++++++++++|//////////-----------------|

 "+" показано сколько времени цпу был занят скажем это %user
 "/" показан iowait
 "-" показан idle

%user = 12s
%iowait= 10s
%idle = 20s

то как я уже сказал интутитивно ты думаешь что процессы которые имели D стейт
они существали в очереди шедулера согласно картинке якобы 10s
а в оставшеемя время якобы таких процессов в очереди шедулера небыло. И КАК Я УЖЕ
СКАКАЗАЛ ЭТО ПОЛЕНОЕ НАЕБАЛОВО.
на самом деле это значит что в течение 30s (idle_iowait) у нас 10s были D процессы
а что было с D процессами в течеиние 12s когда цпу пахал ОНИ НАМ НИХУЯ НЕСООБЩАЮТ! 
неизвестно. там тоже может были такие процессы а может и небыло. мы этого незнаем.
нам этго не сообщают. вот  в этом и естьпиздец архитеткуры вычсдегие iowait параметра.

дебилизм тройной
	1) во первых они называли этот парамтер iowait тоесть намекая что якобы цпу 
	в это время как бы занят заблокирован от выполненеия какого либо кода 
	потому что на нем как то там виисит процесс который ждет ответа от диска. 
	тоеть как бы полается что этот процесс с одной стороны свой код не выполяняет
	из за того что он ждает ответа от диска а с дуругой стороны сука типа забло
	кировал цпу и недает другим процессами выполняться. вдумайся в эту ебрнутую
	формулироваку cpu io wait. а на самом деле цпу нихуя никого неждет. да он 
	не выполняет никкой код но не потмоу что его D проецесс заблокировал а потмоу что
	в очереди щедурлера нет процессов которые бы были в R стейет. но цпу нихуя 
	неждет этот D процесс. цпу свободен и ему на этот D роцесс похуй
	2) они всунули харакетрсиритстику жеского диска то что он занят работой в
	в статистику которая описывает совершенно дрруую железку  а именно цпу
	спешали гавно котлеты и мух в одну кучу
	3) такая схема сбора iowait очень сиьно затрудняет верноую интпретацию 
	статистику по цпу. она супе антиинтуитивная. интуациия нам говорит что 
	якобы если на графике нет iowait значит на интервале семплиноа небыло процессов
	с D стейтом. а это полное вранье. также интуиция нам говорит что если награфике
	нариовано что iowait=20% то якобы это значит что 20% времени от интервала 
	сэмплинга у нас были D прцоессы а оставшиемя 80% времени якобы их небыло.
	и это тоже полное наебалово. а все отому что то как они считают iowait это 
	абсолютно дебильная схема.


ИТОГО: 
как трактовать
если мы видим на экране %idle=20 и %iowait=10
то мы из этого должны вот то для себя понять. 
  	1) цпу был в idle 20+10 = 30% 
  	1.5) это значит что цпц был busy 70% времени
  	2) что 20% времени от 100% интервала сэмплинга у нас были D процессы
  	  и (САМОЕ ВАЖНОЕ) что творилось на участке 70% когда цпу был занят в плане
  	  наличия там D процессов МЫНЕЗНАЕМ. может там тоже был iowait а может и небыло
  	 тоеть iowait=10 означает что ПО КРАЙНЕЙ МЕРЕ 10% от 100% у нас были D процессы.
  	 НО МОЖЕТ БЫТЬ ОНИ БЫЛИ И БОЛЬШЕ ПО ВРЕМЕНИ!


еще раз покажу на картинке
плюсы это кодга цпу был busy
минусы когда цпу был свободен
эти дебилы они проверяют налиичие D процессов только на участке с минусами
а что творится в плане наличия D прцоссов на участке с плюсами они нам несообщают.
там они это непроверяю. поэтом мы этого незнаем.  

    |++++++++++++++++++++++++++++|-------------------------------------|
           
    |  ???????????               |   толклько на этом участке они      |
                                      проверяеют сколко здесь было iowait                                    
               
      на этом участке мы незнаем
      здесь был iowait или нет
      может он был может небыл



поэтому если  у нас busy=30%  полный idle=70% из них iowait=40%
то мы должны четкопонимать что полный реальный iowait на всем интрвале
было между 40% и (40+30) то есть плоый iowait был  от 40% до 70%
скоько точно мы незнаем из за этих лебилов.
если busy =100% то iowait составляет от 0% до 100% мы это незнаем. от того что на
экане нет iowait незначит что его небыло. а если мы видим на экарне сколько то
iowait то не факт что он показан в полном обьеме .в этом пизда их ебнутой 
архрткеткуры подсчета этой велчичины.

            5s                              5s
    |++++++++++++++++++++++++++++|///////////------------------|
                                     2s


вот предстаивм что они нам нарисвалси что 
	%user 5s
	%iowait 2s
	%idle 3s

мы дожлны четко понимать что там где цпу работал тоеть 5s там тоже незримо могут
"прятаться" iowait-ы пртсто эти дебилы нам их там не считают непроверяют. поэтому
реалный iowait для даннго графика лежит где то между
                   2s  <= %iowait <=  (2s+5s)
точнее мы сказать не можем . но мы дожлны четко понимать что иовет на таком гарфике
мог быть до 7s вклчительно. а не та хуйня что они нам нарислвали. дебилы


вот  я на граифкике вопросами показал места где могут "прятаться " иовейты
протсо мы незнаем . дебилы эти нам несообщают что были с иовейтами 
на этом участке 5s

            5s                              5s
    |+?+?+?+?+?+?+?+?+?+?+?+?+?+?|///////////------------------|
                                          2s


вот что  я хотел сказать на счет этой дебильной характертистики iowait

возикает предложение а может на учатке где цпу был свободен надо нетлоко р-исовать
время кодга диск был занят а еще рисовать когда на марсе идут дожди или рисовать 
что обед в булочной в эти моменты. неадо останалвиться в деблизмме наод поимомо 
iowait еше нахуячить в сатистику работы цпу каких нибудь идиотических счетчиков
и признаков


