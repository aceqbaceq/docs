docker

в докере есть прикольный пиздец.

у него есть несколько типов volume.
один из них назыается bind volumes.

это когда мы папку с хоста прокидваем внуьр контейнера.

$ docker run --rm -it   -v /home/vasya/temp/107/01:/01 ubuntu /bin/bash

здесь папка на компе /home/vasya/temp/107/01  пркидывается внуьрь контейнра в папку /01

так вот в чем пиздец:  если папка  /home/vasya/temp/107/01 уже существует на нашем компе то внутри 
контейнера она будет иметь теже пермищнсы что и на компе. едиснвтеннео что в пермишнсах будут указаные
не имена юзеров а их uid\gid тоесть если на космпе эта папка имеет 777 для 1000:1000 то и в контейнере
это будет тоже самое.  пока все охуенно.  НО!!!   если на компе папки /home/vasya/temp/107/01 нет то докер 
при старте контейнера создаст эту папку и права у нее на хосте будут исключетельно root.root !!!! 
причем неважно под каким юзером вы запускаете докер команду под рутом или  обычным енпривлигированным  - создванная
автоматчиески на хосте паапка будет иметь права root.root это пиздец.  это значит что обязательно перед запуском
контейнера надо провреять есть ли папка для волтьюма на хосте или нет. иначе  когда контейнер будет запущен 
то мы получем подмнтрованный volume  в который может пиисать только root. а если унас например стартует 
имадж мускула то это будет полный пиздец. поэтмоу перед стартаом контйенера надо все папки для bind volumes обязательно
на компе подгтоовить чтобы неполучить проблем с file permissions

===
почистить лишнее
$ docker system df
$ docker system prune
$ docker volume prune
$ docker image prune
$ docker builder prune

===
как узнать сколько места занимает тот или иной докер контейнер

$ docker ps --size
CONTAINER ID   IMAGE                    COMMAND                  CREATED        STATUS        PORTS      NAMES                                         SIZE
7d51470e3e99   alpine                   "/bin/sh"                23 hours ago   Up 23 hours              pedantic_hodgkin                              7.08MB (virtual 14.1MB)
aa2ee4d9131c   nginx:alpine             "/docker-entrypoint.…"   43 hours ago   Up 43 hours   80/tcp     vasya_apple.1.5vnmle4p9781joolu6tz086kz       1.09kB (virtual 23.5MB)
cb5297e4dae6   localhost:5000/mysql:1   "docker-entrypoint.s…"   43 hours ago   Up 43 hours   3306/tcp   mysql21_mariadb.1.jt4edmvcwqrzs0d275p8xwail   4B (virtual 491MB)
5e2606ee4349   registry:2               "/entrypoint.sh /etc…"   43 hours ago   Up 43 hours   5000/tcp   registry.1.mp3apml1pk14fj2hog8zxfg8o          0B (virtual 24.2MB)
[vasya@lenovo temp]$ 

====
приолна фича докера. 
$ docker stats 


показаывает сколько цпу , памяти, io  потребялет щас контйеер

$ docker stats имя_конт
CONTAINER ID   NAME       CPU %     MEM USAGE / LIMIT     MEM %     NET I/O      BLOCK I/O       PIDS
fe755ca936d6   gt-php73   0.01%     22.28MiB / 15.39GiB   0.14%     701kB / 0B   100MB / 200MB   8



прикол!

===
| registry

как засунуть имадж в приватный регистри


для начала надо залогинться в этом регистри
$ docker login https://regi.local:5000

при этом если сертификат саподписанный или если у него CA неизвестный для докера 
то он выдаст ошибку что неможет проверит достоверность сертификта. 

docker login failed to verify certificate x509

чо делать - надо 
засунуть CA сертификат в папку для довернных CA.

надо создать папку вот с ттаким именем

# mkdir -p /etc/docker/certs.d/regi.local\:5000
и туда засунуть либо если это самодписанный сертифкаит то его либо если сертификат регистри 
подрпсиан неизвестным для докера ca то ca.crt этого ca.

после этого при попытке логина докер сервис перстанет ругаться что неоможет проерить сертфиикат.

после того как мы успешно залогислись то 
надо создать новый тег для нашего локального имаджа

$ docker tag имя_образа regi.local:5000/наш_логин/имя_образа

где нащ_логин = это логин под которым мы логинмлст на регистри
имя_образа = это имя нашего локального образа

после этого можно пушить

$ docker push  regi.local:5000/наш_логин/имя_образа


вот и все.
прикол в том чкак я понял что команды докера чтобы удалить из удаленного регистри ее нет.
дебилы.

===
| docker size

якобы посмтреть размер сколько занимает на дике контейнер

# docker ps --size
CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS        PORTS                                   NAMES                                     SIZE
f0dfc0b32c60   nginx          "/docker-entrypoint.…"   25 hours ago   Up 25 hours   0.0.0.0:8087->80/tcp, :::8087->80/tcp   sharp_shirley                             1.09kB (virtual 142MB)
8c976e174975   registry:2     "/entrypoint.sh /etc…"   2 days ago     Up 2 days     5000/tcp                                registry.1.3sh6rzwzeywmzhinc92yml1qb      0B (virtual 24.2MB)
06a173d1179b   nginx:alpine   "/docker-entrypoint.…"   2 days ago     Up 2 days     80/tcp                                  vasya_apple.1.7xyejmk9j0n1kpr2g7q5fopwj   1.09kB (virtual 23.5MB)


еще есть docker system df

но в любом случае это все хреново повказывает сколько знинимает отделный конетйнер 
и в целом вся докер щарманка

---
| enntrypoint

как переобрпеделить entrypoint у имаджа.
потому что его надо перебить чтобы войти в командную стрлку
оказывается

$ docker run -it --rm --entrypoint sh   image_id

ура!

===

| sphinx

$ docker run -it \
             --rm  \
             -v ./config/sphinx/sphinx.conf:/opt/sphinx/conf/sphinx.conf \
             -v ./data/sphinx/index:/opt/sphinx/index/ \
             -v ./data/sphinx/logs:/var/log/sphinx/ \
             --entrypoint sh   \
             --add-host mariadb:172.18.0.2   \
             --network fastrans_lan  \
             -e SQL_PASS=rootpass \
             -e SQL_DB=db  \
             ef56fdfad70d



  вот такой интересный пример.
  -v = это мы монтруем папки с хоста
  --entrypoint sh   = это мы переопределяем entrypoint 
  --add-host mariadb:172.18.0.2  = это мы добавляем запись в /etc/hosts
  --network fastrans_lan  = это мы встаялем контейнер в определенную докер сеть
  -e SQL_PASS=root123   = это мы задачем переменную окружения
 

==
| ping by hostname

я хочу пинговать из контейнера другой контейнер по имени контейнера.
это можно сделать если 
1) оба контейнера сидят в одной сети. причем сеть должна быть не дефолтовая
а кастомная. если они будут сидеть в дефолтовой сети то нихера не работает
2) если при запуске контейнера у него было указано руками имя. 
если имя было неуказано то контейнер получает рандомное имя и сука докер
тогда не резолвит такое кастомное имя.

прмиеры

$ docker run --rm -it  --net net1 --name ub3 alpine sh
$ docker run --rm -it  --net net1 --name ub1 alpine sh
ub1# ping -c3 ub3
# ping -c3 ub3
PING ub3 (172.20.0.3): 56 data bytes
64 bytes from 172.20.0.3: seq=0 ttl=64 time=0.376 ms


==

| docker 
| pull
| sha

можно pull делать по тэгу а можно по sha

каку знать sha у имаджа

$ docker inspect --format='{{index .RepoDigests 0}}' $IMAGE

===

| build


как создавать имаджи для докера

пишем Dockerfile

# cat Dockerfile 
FROM alpine:latest

COPY 22.exe  /opt/22.exe

# Запускаем контейнер
CMD ["/bin/sh"]



создаем имадж
# docker build .  --tag "22:latest"


смотрим что за имадж получился
# docker image ls
REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
22            latest    c8dfd75e6c33   2 minutes ago   7.39MB


запуск имаджа
# docker run -itd  --name "22"   22:latest

смотрим контенер
# docker ps
CONTAINER ID   IMAGE       COMMAND     CREATED          STATUS          PORTS     NAMES
184ee03f078f   22:latest   "/bin/sh"   27 seconds ago   Up 25 seconds             22

===

| dockerd

как менять настройки у него. 
можно  в systemd юните. 
а можно через конфиг


/etc/docker/daemon.json

{
 

  "ip": "172.17.0.1",
  "iptables": true

}


конкнетно эта настройка делает вот что
    $ dockerd --help
    ...
     --ip ip                                   Default IP when binding container ports (default 0.0.0.0)



как проверить что конфиг вальидный

    $ dockerd --validate --config-file /etc/docker/daemon.json 
    configuration OK



вот полный файл всего чего можно запрогрмрвать через конфиг у dockerd
взял отсюда https://docs.docker.com/reference/cli/dockerd/#daemon-configuration-file


{
  "allow-nondistributable-artifacts": [],
  "api-cors-header": "",
  "authorization-plugins": [],
  "bip": "",
  "bridge": "",
  "builder": {
    "gc": {
      "enabled": true,
      "defaultKeepStorage": "10GB",
      "policy": [
        { "keepStorage": "10GB", "filter": ["unused-for=2200h"] },
        { "keepStorage": "50GB", "filter": ["unused-for=3300h"] },
        { "keepStorage": "100GB", "all": true }
      ]
    }
  },
  "cgroup-parent": "",
  "containerd": "/run/containerd/containerd.sock",
  "containerd-namespace": "docker",
  "containerd-plugins-namespace": "docker-plugins",
  "data-root": "",
  "debug": true,
  "default-address-pools": [
    {
      "base": "172.30.0.0/16",
      "size": 24
    },
    {
      "base": "172.31.0.0/16",
      "size": 24
    }
  ],
  "default-cgroupns-mode": "private",
  "default-gateway": "",
  "default-gateway-v6": "",
  "default-network-opts": {},
  "default-runtime": "runc",
  "default-shm-size": "64M",
  "default-ulimits": {
    "nofile": {
      "Hard": 64000,
      "Name": "nofile",
      "Soft": 64000
    }
  },
  "dns": [],
  "dns-opts": [],
  "dns-search": [],
  "exec-opts": [],
  "exec-root": "",
  "experimental": false,
  "features": {},
  "fixed-cidr": "",
  "fixed-cidr-v6": "",
  "group": "",
  "host-gateway-ip": "",
  "hosts": [],
  "proxies": {
    "http-proxy": "http://proxy.example.com:80",
    "https-proxy": "https://proxy.example.com:443",
    "no-proxy": "*.test.example.com,.example.org"
  },
  "icc": false,
  "init": false,
  "init-path": "/usr/libexec/docker-init",
  "insecure-registries": [],
  "ip": "0.0.0.0",
  "ip-forward": false,
  "ip-masq": false,
  "iptables": false,
  "ip6tables": false,
  "ipv6": false,
  "labels": [],
  "live-restore": true,
  "log-driver": "json-file",
  "log-level": "",
  "log-opts": {
    "cache-disabled": "false",
    "cache-max-file": "5",
    "cache-max-size": "20m",
    "cache-compress": "true",
    "env": "os,customer",
    "labels": "somelabel",
    "max-file": "5",
    "max-size": "10m"
  },
  "max-concurrent-downloads": 3,
  "max-concurrent-uploads": 5,
  "max-download-attempts": 5,
  "mtu": 0,
  "no-new-privileges": false,
  "node-generic-resources": [
    "NVIDIA-GPU=UUID1",
    "NVIDIA-GPU=UUID2"
  ],
  "oom-score-adjust": 0,
  "pidfile": "",
  "raw-logs": false,
  "registry-mirrors": [],
  "runtimes": {
    "cc-runtime": {
      "path": "/usr/bin/cc-runtime"
    },
    "custom": {
      "path": "/usr/local/bin/my-runc-replacement",
      "runtimeArgs": [
        "--debug"
      ]
    }
  },
  "seccomp-profile": "",
  "selinux-enabled": false,
  "shutdown-timeout": 15,
  "storage-driver": "",
  "storage-opts": [],
  "swarm-default-advertise-addr": "",
  "tls": true,
  "tlscacert": "",
  "tlscert": "",
  "tlskey": "",
  "tlsverify": true,
  "userland-proxy": false,
  "userland-proxy-path": "/usr/libexec/docker-proxy",
  "userns-remap": ""
}


