k8

посмотреть неймспейсы

# kubectl get namespaces
NAME              STATUS   AGE
default           Active   61m
kube-node-lease   Active   61m
kube-public       Active   61m
kube-system       Active   61m

===

crictl 
смотрим список подов
~# crictl pods

спмисок контейнеов
$ crictl ps
одна только проблема crictl непоказыает pause контейнеры, зато их id 
отображает crictl pods 


===
ctr 
посмотреть неймспейсы

# ctr ns ls
NAME    LABELS 
default        
k8s.io         

что интересно. с точки зрения ctr все контенеры куба ставятся в один
ctr неймспейс ===> в k8s.io , и системные и несистемные , все подряд. все в одну кучу.
как я понял неймспейсы к8 и неймспейсы ctr это разные вещи.

как поммотреть все контейнеры в ctr неймспейсе где все к8 контейнеры сидят

$ ctr --namespace  k8s.io container list


я пока не очень понял но самое смешное что родной лдя containerd клиент ctr
тем не менее считается лоховским. и сразу наод ставить другой клиент nerdctl
для этого 

качаем (https://github.com/containerd/nerdctl/releases/download/v2.0.0-beta.4/nerdctl-2.0.0-beta.4-linux-amd64.tar.gz)

распаковываем архив просто в /usr/local/bin

готово

смотрим список неймспейсов (кстати в докере как я помню никаких неймсейсов нет)
# nerdctl namespace ls
NAME       CONTAINERS    IMAGES    VOLUMES    LABELS
default    2             3         0              
k8s.io     13            33        0              


смотрим контейнеры к8
# nerdctl --namespace k8s.io container ls

задача - взять под из k8. потом найти все контейнеры этого пода в том числе и pause
контейнер. найти pid каждого. и наконец посмотреть неймспейсы каждого. чтобы 
узнать какие у них общие неймспейсы.
насколько я понял чеерез kubectl ненайти id пода. остается через crictl 

# crictl pods | grep pod-st1
0068c784c01a5       34 minutes ago      Ready               pod-st1
дело в том что id пода это id пауз контенера. 

далее уже через kubectl находим id остальных контенйнеров в поде
# kubectl describe pods pod-st1 | grep Container\ ID
    Container ID:   containerd://11dbe3e8274d67b0da6b3582130596dad32fea6d4ad395832ba9fdef88cf2e34
    Container ID:  containerd://3f85429df9f1c39b0e3d785d37534ac8cf61668ce78d0901f2eb27b0f3c6eda4


также я замечу что если мы возьмем id любого контенера пода который
мы получили через kubectl ,
то если мы найдем этот id в списке контенеров через утилиту crictl 
то в поле POD ID мы узнаем pod id тоесть id пауз контенера

# crictl ps
CONTAINER           NAME        POD ID              POD
3f85429df9f1c       sidecar     0068c784c01a5       pod-st1
11dbe3e8274d6       app         0068c784c01a5       pod-st1


хотя с другой стороны мы его также узнаем через список подов утилиты crictl
# crictl pods
POD ID              NAME       RUNTIME
0068c784c01a5       pod-st1    (default)




теперь можем найти pid каждого контейнйера

чеерез ctr можно посмотреть инфо о контейнере но 
почему то там нет инфо о pid контейнера..

$ ctr -n k8s.io c info 0068c784c01a5 | grep -i 3970
пусто



crictl может показать pid
для пауз контенера это надо искать у пода
# crictl inspectp 0068c784c01a5 | grep -i pid
    "pid": 3970,

для остальных контенеров смотрим у crictl через свойства контеенеров

# crictl inspect 11dbe3e8274d67b0d | grep -i pid
    "pid": 4074,

# crictl inspect 3f85429df9f1c39b0e3d7  | grep -i pid
    "pid": 4128,


# nerdctl --namespace k8s.io container inspect 0068c784c01a5  | grep -i pid
            "Pid": 3970,
# nerdctl --namespace k8s.io container inspect  11dbe3e8274d67b0d  | grep -i pid
            "Pid": 4074,
# nerdctl --namespace k8s.io container inspect  3f85429df9f1c39b0e3d7  | grep -i pid
            "Pid": 4128,


видим что pid совпали выданные разными утилитами.

теперь можем наконец посмотреть их неймспейсы

# ls -1al /proc/3970/ns/
cgroup -> 'cgroup:[4026531835]'
ipc -> 'ipc:[4026532425]'
mnt -> 'mnt:[4026532423]' <=====
net -> 'net:[4026532371]'
pid -> 'pid:[4026532426]' <=====
time -> 'time:[4026531834]'
user -> 'user:[4026531837]'
uts -> 'uts:[4026532424]'

# ls -1al /proc/4074/ns/
cgroup -> 'cgroup:[4026531835]'
ipc -> 'ipc:[4026532425]'
mnt -> 'mnt:[4026532427]' <=====
net -> 'net:[4026532371]'
pid -> 'pid:[4026532428]' <=======
time -> 'time:[4026531834]'
user -> 'user:[4026531837]'
uts -> 'uts:[4026532424]'

# ls -1al /proc/4128/ns/
cgroup -> 'cgroup:[4026531835]'
ipc -> 'ipc:[4026532425]'
mnt -> 'mnt:[4026532429]' <=====
net -> 'net:[4026532371]'
pid -> 'pid:[4026532430]' <======
time -> 'time:[4026531834]'
user -> 'user:[4026531837]'
uts -> 'uts:[4026532424]'

в итоге выясняется что у контейнеров  пода cgroup общая и 
все неймспейсы ОБЩИЕ кроме неймспейсов
	mnt
	pid

но можно в манифест пода вставить доп инструкцию и pid неймсмейс тоже может 
стать общим, тогда pause процесс в пауз контейре станет pid=1 для всех процессов
все контеенров пода. это позволит успешно избавиться от проблемы зомби процессов (дефанкт
процессов). ну точнее как избавиться. код пауз процесса прсто напросто имеет хендлер
SIGCHLD сигнала. вот и все.

кстати процессы принадлежащие одному поду можно найти еще оригинальным 
способом! оказывается каждый pod находится под контролем shim процесса!
более того все контейнеры пода исходят из shim процесса как из корня.
щас покажу.
поэтому надо запустить ps в режиме форест и посмотреть какие процессы крутятся
под каждым shim процессом.

# ps -A --forest -o pid,ucmd

   1923 containerd-shim
   2017  \_ pause
   2127  \_ kube-scheduler

   1924 containerd-shim
   2003  \_ pause
   2149  \_ kube-apiserver
   
   1925 containerd-shim
   2023  \_ pause
   2184  \_ etcd
   
   1940 containerd-shim
   1993  \_ pause
   2097  \_ kube-controller
   
   2641 containerd-shim
   2661  \_ pause
   
   3950 containerd-shim
   3970  \_ pause
   4074  \_ nginx
   4109  |   \_ nginx
   4110  |   \_ nginx
   4128  \_ sleep

откуда видно что у нас в отдельных подах сидят : шедулер,  апи сервер,
etcd, kube-controller, какойто пустой под в котором толко пауз конейнер,
и наш созданный нами уже под.

смотрим пиды - 3970, 4074, 4128
все совпало с тем что выше. 4109 и 4110 это уже дочерние процессы от головного
жинкса так что их нейспейсы совпадают с неймспейсами головного жинкса ибо  они 
сидят в одном контейнере. 

так как каждый под имеет pause контейнер то найдя на хосте все пауз контйенеры
мы найдем все поды. как уже было вяснено выше что по дефолту все процессы которые
составляют под они лежат в одной и той же цгруппе и одинаковых неймспейсах 
кроме pid и mount неймспейс.
с другой стороны так как самые часто используемые неймспейсы это pid,mnt,net
то грубо можно сказать что контейнеры имеют только общие сетевые карточки  
и боллше нихрена. да при желании можно сдееть чтобы у них был общий pid неймспейс, 
но по дефолту такого нет. есть и еще один важный интересный значимый момент. 
хотя каждый процессы в каждом контейнере пода сидят в своем pid неймспейсе то есть
дерево процессов в кажом контейнере независит от дерева проецссов в другом когнтейненре, но
с точки зрения pid неймсейса хоста все процессы пода являются детьми процесса shim.
показывают на примере

   3950 containerd-shim
   3970  \_ pause   <== один контенер
   4074  \_ nginx   <== второй контенер
   4109  |   \_ nginx
   4110  |   \_ nginx
   4128  \_ sleep   <=== третий контейнер

видно что все три процесса каждйы из которых это контейнер они все являются
чайлдами процесса shim. то есть все конейтенеры получаются путем clone+exec от процесса shim
отсюда получается еще одно правило - если мы хотим найти все поды на хосте - надо найти
все shim процессы. 

вот еще раз смотрим деревро процессов для shim процессов на хосте с k8


# pstree -sTp
...
...
           ├─containerd-shim(1923)─┬─kube-scheduler(2127)
           │                       └─pause(2017)

           ├─containerd-shim(1924)─┬─kube-apiserver(2149)
           │                       └─pause(2003)

           ├─containerd-shim(1925)─┬─etcd(2184)
           │                       └─pause(2023)

           ├─containerd-shim(1940)─┬─kube-controller(2097)
           │                       └─pause(1993)

           ├─containerd-shim(2641)───pause(2661)

           ├─containerd-shim(3950)─┬─nginx(4074)─┬─nginx(4109)
           │                       │             └─nginx(4110)
           │                       ├─pause(3970)
           │                       └─sleep(4128)

           ├─containerd-shim(8302)───storage-provisi(8321)

соотвевтеноно мы видимм содержимое каждого пода


а вот ккак выглядит деовроп процессов shim для хоста где нет к8 а просто докер


# pstree -spT
...
...
           ├─containerd-shim(29432)───sh(29463)

           ├─containerd-shim(30145)───nginx(30164)───nginx(30240)

           ├─containerd-shim(34615)───bash(34637)



видим что кода у нас просто контйенеры а не поды то у нас среди дочек shim нету
пауз процесса. 


я знаю что контейнер это процесс ограниченный неймспесами и цгруппами. взникает 
вопрос если есть два процесса то какая или какие неймсейсы у него должны
отличаться чтобы можно было сказать что это два контейнера а не один?
и что на счет цгрупп. должны ли они обязатеьно отличаться у разных контейнеров?
lsns - эта утилита которая читает /proc целиком и руками оттуда анализируя
каждый процесс вытаскиевает инфо о каждом неймспейсе. запукать ее нужно по рутом
иначе она не в каждый процесс может слазить. также она невидит persistent неймспейсы
в которых неработает пока что ни один процесс. 