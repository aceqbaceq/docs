| page cache
вопрос эта хрень хранится в области памяти ядра или нет?
тут надо понять как вобще память работает в линуксе и на компе
вообще.


я знаю что ядро оно в памяти держит таблицу page table.
далее в цпу есть много регистров. часть из них отвечает за работу
с памятью.

когда шедулер загружает процесс на цпу то 
он устанавливает все регистры внутри цпу согласно настроек процесса.
это называемтся загрузить контекст.

так вот как я понимаю. юзерскому процессу доступны регистры которые
позволяют модиифицировать часть регистров отвечающих за выставление адреса
в памяти который процесс хочет получить доступ. примерно говоря 
проесс выставляет адрес в памяти который он хочет считать. но по факту это 
виртуальный адрес. потому что когда цпу начинает лезть в память согласно
этому адресу то происходит вот что. он лезет в таблицу page table (которую
контролируует ядро а процесс неможет до нее добраться) и вычисляет физ 
адрес в памяти куда надо лезть как функцию от виртуального адреса
который выставил процесс и того что ядро выставило в page table.
таким обазом с точки зрения процесса он лелезт по адресу 16 а по факту
в памяти идет считываение по адресу 100.

насколько я даже примерно помню сам цпу недогадывается о том что происходит
мухлеж с адресом памяти. 

тоесть примерно говоря цпу посылает в шину адрес 16 его перехватывает 
микросхема отвесвтенная за неморсдетсвенную работу с памятью. она 
берет этот адрес , берет то что в page table , химичит и коректирует
адрес по кторому реально в память надо лезть. а на цпу просто 
на его шину данных прилетает байт. и цпу даже сам нихрена не знает
ничего о подмене адреса в памяти.

но там вроде как в привиигиорванном режиме цпу можно как то похимичить
и начать попадать именно по тому адресу что ты выставил на цпу 
без мухлежа.

что то как то примерно так реалиуется так называемая "виртуальное адресное
простаранство памяти " для процесса. поэтом кажоый процесс 
имеет свое адресное простарнство памяти. которое в итоге хрен знает 
как преобразуеся уже в реальные физические адреса в физ памяти.

и теперь мы приходим вот к чему. у нас есть куски в физ памяти где
автономно лежат процессы. как в коробках. а есть куски памяти где лежит
код ядра. вместе с кодом ядра есть и  куски памяти где лежат разные
переменные и данные ядра. это тоже относится к области памяти ядра. 

тоесть как я сбее представляют физиескя память ее ячейка она может находится
в трех сосотяниях. либо эта ячейка никак не используется. либо она используется
для хранения внутри себя данных относящихся к юзер процессу.
либо она испльзуется для хранения внутри себя данных относящихся к ядру.

так метдоом искючения я считаю что page cache он  относится к памяти ядра.
потому что он неиспользуется для хранения данных относящихяс к кокнретному
процессу. а он используется для хранения данных ядра. 

если ячейка использется для храрения данных процесса это значит что 
есть некий процесс юзескрий который может непосредственно менять значение
этой ячейки. он имет над ней власть.

если же ячейки лежит в области амяти ядра то эту ячейку может менять 
только код ядра работабщий в привлигированнрм режиме цпу.

поэтому page cache конечо может менять только код ядра и никакой проессс
не может.





