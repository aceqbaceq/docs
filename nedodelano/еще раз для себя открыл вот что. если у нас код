еще раз для себя открыл вот что. если у нас код
возврата процесса больше 128 это напрямую 
укзывает что процесс был убит снаружи сигналом. 
номер сигнала можно узнать как $exit_code-128
анмреир если код возарата 137 значит поцесс был убит
сигналом 137-128=9 
смотрим в kill -L
и видим что 9 это сигнал SIGKILL!

==
еще прикол

# docker inspect nginx:latest | jq '.[].Config.StopSignal'
"SIGQUIT"

в самом имадже зашито какой игнал докер оолжен посылать в процесс
по команде

docker stop !

===
в итге я вот к чему пришел.
у нас есть процесс. ему шлют sigterm. если у процесса нет своего обработчкиа. 
тогда ядро заупсукает свой дефолтовый обработчик. и практическо мгновннео процесс будет уничожен.
дефолтовый обрабочтки хранится в ядре. 
далее мы запускаем тот же процесс в докер контенере. натрваливаем тот же sigterm
но при этом нихрена не произодет. а почему? а потому что ели процесс имеет pid=1 
и не имеет своего обарчоика то дефтолотовый обарботчки лдя pid=1 равен нихрена не делать!
пэтому если процесс в контейнере имеет pid<>1 и мы натрваим на него sigterm то он 
подхднет также быстро как и вне контйенера! а если он pid=1 то нихнера ядро делать небудет!
как можно узнать что упроцесса есть кастмнй обраюочтик для SIGTERM?
надо узнать пид процесса и натрвить сркитпт

pid=$1
cat /proc/$pid/status|egrep '(Sig|Shd)(Pnd|Blk|Ign|Cgt)'|while read name mask;do
    bin=$(echo "ibase=16; obase=2; ${mask^^*}"|bc)
    echo -n "$name $mask $bin "
    i=1
    while [[ $bin -ne 0 ]];do
        if [[ ${bin:(-1)} -eq 1 ]];then
            kill -l $i | tr '\n' ' '
        fi
        bin=${bin::-1}
        set $((i++))
    done
    echo
done


он покажет всяко развно но нас интерсует строчка с "SigCgt"
SigCgt: 0000000180000a00 110000000000000000000101000000000 USR1 USR2

если в ней справа мы не видим TERM значит у процсса не своего кстмоног обаоктика для TERM!

самая жрпа остояит вот том что строка с SigCgt вылядит тоно также если ьы ее сморш из 
неймсейса хста либо из контйенера!

длае я вычснил на освное этой статьи (там прогрмма на C) https://www.codequoi.com/en/sending-and-intercepting-a-signal-in-c/#:~:text=In%20order%20to%20block%20a,to%20a%20dedicated%20function%2C%20sigprocmask%20.

что вот эта строка

SigBlk: 0000000000000004 100 QUIT
она означает что мы программе сами руамми заблокировали такие то сигналы.
а вот эта строка 
ShdPnd: 0000000000000004 100 QUIT
означает что сигнал прилетел но так как он бликрорван то стоит и ждет

из этго я хочу сказать что из этих строк
SigPnd:	0000000000000000
ShdPnd:	0000000000000000
SigBlk:	7be3c0fe28014a03
SigIgn:	0000000000001000
SigCgt:	00000001800004ec
мы никогда не увидим ничего про деолтовые хендлеры яра!

The following is the field definition from Linux man proc(5).

SigPnd, ShdPnd: Number of signals pending for thread and for process as a whole (see pthreads(7) and signal(7)).

SigBlk, SigIgn, SigCgt: Masks indicating signals being blocked, ignored, and caught (see signal(7)).


что интерсно для pid=1 я поыалают сигналы но при этом даже в SndPnd и SigPnd 
все равно остается пусто!

что осатетя непонятным - если зайти изунри контейнера то даже  kill -SIGKILL 1 
не сработает. но! если снаружи попробвать kill -SIGKILL 1212 то уже срабатвыает !
тоесть надо попроват создать руками +1 pid namespace. заупсить там процесс 
у котрого нет ни одного кастомного хенделала. и оттуда изнутри его грохнуть поровать. 
проверить что sigkill инути не работает. а снаоужи рабтает!
и девйсивтельно япрверил так и есть что из егоного неймспейса sigkill нераатебоаатет.
а из неймсесйса хоста хотя sigetrm тоже нерабрие ер sigkill уже рабаитеет
и ккстати убийство pid=1 походу автоматом уничтожает все соталыне процессы. 
поход уничожение pid=1 ывзвыает то что ядро все соталыне прцоссы автмоато уивает через 
sigkll!! а какже зомби получить? надо чтобы pid=1 был прцесс без SIGCHLD. чтобы он
заупстил скажем жинкс. а тот запустил своих чайлодов. потом глолвной жинкс биваем
у нас получается pid=1 и чайлды. потом мы чалда стопим. и он висит как зомби. 
но если мы pid=1 грохнет то ядро это зомби тоже навенрно грохнет?
вроле бы в этой сттье я нашел что что если у нас есть pid namesapce от котооошо
был рожлоен наш новый неймспейс то из предка можно послать в новый неймспйес SIGKILL
даже pid=1. что и обьясняет почему иунтри в пил=1 сигкилл не послать а снаружи с хоста
очень даже послать!

походу никто никгда не думал из какого нйеспейса докер удаляет процессы. 
ели бы он жто делал изунти то он бы замучался оперляеть под каким номер там процесс
крутится. он это делает снаружи. тога вознивакт вопорс  а как тогда исчезают все 
другие процессы которые там крутися? они поож=ходу об этм н задумылась. их удадяет не докер.
из удаляет само ядро. из за того что убили pid=1 

походу никт не заудмвался толком как в конйетенер процессы все исчезают.

получается веселухаю если ест 5 онтейнейров они делят 1 pid. мы в этом pid удаляем 
pid=1 то по идее ядро должно тогда убить все пцрцоецсы и аким обраом отсавноить всю групу
контерерв. тоесть грохнуть весь под?

==
пооходу unsahre --net это сопособо осздать новый сет неймспес "плохим способом"
==
из статьи 
(https://lwn.net/Articles/532748/)
PID namespaces implement some analogous behavior for the namespace-specific init process. Other processes in the namespace (even privileged processes) can send only those signals for which the init process has established a handler. This prevents members of the namespace from inadvertently killing a process that has an essential role in the namespace. Note, however, that (as for the traditional init process) the kernel can still generate signals for the PID namespace init process in all of the usual circumstances (e.g., hardware exceptions, terminal-generated signals such as SIGTTOU, and expiration of a timer).

Signals can also (subject to the usual permission checks) be sent to the PID namespace init process by processes in ancestor PID namespaces. Again, only the signals for which the init process has established a handler can be sent, with two exceptions: SIGKILL and SIGSTOP. When a process in an ancestor PID namespace sends these two signals to the init process, they are forcibly delivered (and can't be caught). The SIGSTOP signal stops the init process; SIGKILL terminates it. Since the init process is essential to the functioning of the PID namespace, if the init process is terminated by SIGKILL (or it terminates for any other reason), the kernel terminates all other processes in the namespace by sending them a SIGKILL signal.

Normally, a PID namespace will also be destroyed when its init process terminates. However, there is an unusual corner case: the namespace won't be destroyed as long as a /proc/PID/ns/pid file for one of the processes in that namespaces is bind mounted or held open. However, it is not possible to create new processes in the namespace (via setns() plus fork()): the lack of an init process is detected during the fork() call, which fails with an ENOMEM error (the traditional error indicating that a PID cannot be allocated). In other words, the PID namespace continues to exist, but is no longer usable.

это лянсятея еопочему из pid namespapsce мы нне можем kill а из пранета момжем!

==

я не могу понять как работат в новом pid namespace имея при этом старый mount namepace!

-=
что интерсно wait и waitpid() они останавлиавются выполение программы и ждут 
пока от чалйда не прилеит код возврата. поэтому можно убивать чайлдов даже
без всяких хендлеров. правада при этом основаной парент процесс будет стоять.
а так приколноэ
waitpid ждет серти конкретнго pid чайлда
а wait ждет смерти любого первого смерти чайлда

==
как у нас происходит созание нового pid namepsapce. через сискол clone()
это значит что у нас есть процесс. мы из него вызываем clone() тогда ядро клонирует 
наш процесс 

закончил на том что процесс клонирует себя при этом клон уже оказыатся в другом pid namespace
но '/proc ' остается прежним поэтому процесс видит proc того процесса. а чтобы ему
увидить свой проц ему надо смогтировать proc самому в друую папку.  а почему на отмнотирвать ту?
а потому что тот proc исползется другими процессами котрые лежат в исхнодм неймсейсе. а вот
если мы еще и маунт неймспейс клогировали то мы можем спокойно отмонтроват тот проц и 
смонтировать свой!

в парент неймсейсе у нас будет виден unshare и его чайлд bash
а в дочернем pid namesapece будет виден только bash. 


==
прогармаа из книши clone( с флагами NEWNS) а на практкие напрмиер umshare 
делает по другому. онаделает вызов unshare а потом fork

==
надо еще поднять что дает новый маунт неймспейс аотому что он в оличиие от 
ноого сетвого нейсейса или говго пид неймпейса недает новые диски. так а
 что он дает ?

 # unshare -f --pid --mount  --propagation=private --mount-proc=/proc  /opt/134.exe 
parent: parent PID=1...
parent: child PID=2...


# strace -f -e clone,fork,execve,unshare  -p 12027

clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f892ac3ca10) = 12788
strace: Process 12788 attached
[pid 12788] execve("/usr/bin/unshare", ["unshare", "-f", "--pid", "--mount", "--propagation=private", "--mount-proc=/proc", "/opt/134.exe"], 0x56399fec4af0 /* 11 vars */) = 0
[pid 12788] unshare(CLONE_NEWNS|CLONE_NEWPID) = 0
[pid 12788] clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f7a34fd7a10) = 12789
strace: Process 12789 attached
[pid 12789] execve("/opt/134.exe", ["/opt/134.exe"], 0x7fff6dc9beb8 /* 11 vars */) = 0
[pid 12789] clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f7d4e8c1a10) = 2
strace: Process 12790 attached
[pid 12790] +++ exited with 0 +++
[pid 12789] --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=2, si_uid=0, si_status=0, si_utime=0, si_stime=1} ---

баш форкается и в этом дочернкм процессе запускает exwcve с программной /usr/bin/unshare 12788
этот unshare запускает сисколл unshare c фланами CLONE_NEWNS|CLONE_NEWPID
CLONE_NEWNS= это новвй маунт неймспейс
CLONE_NEWPID= это новый пид неймсейс.
это мнгновенно этот процесс пеереводит в новый маунт неймспес. 
а что касатеся пид неймспейс то он осздается но этот процес к нему не переключается.
так задуман пид нейспейс. только теперь дети этго процесса попадут в новый пид 
неймспйес. 
поэтому когда unshare делет clone+execve для 134.exe 127889 то он уже нахрится и в 
новом маунт неймспейсе и в новом пид неймсепйсе. опять что интерсно что он при этом
наърится и в старом нейспейсе с точеи зрения родиетлсьного процесса. 
а далее кода 134.exe тоже делает форк то новый прцоесс134.exe 12790 тоже ественно
нахрлися в новмо маунт нейсмейсе и новом пид нейтсмесе. итооо


bash - старый маунт нейсмпейс, старый пи нейспейс
  \
  unshare  новый ммунт нейспейс, сьарый пид гейспейс
    \
     134.exe новый маунт нейспейс новый пид нейсмейс
      \
       134.exe новый маунт нейспейс новый пид нейсмейс
     
 запускается unshare и он делает сисколл unshare. этот сисикол помещает ээтот процесс
 в новые нейспейсы (кроме случая pid неймспейс. в него будет поемещен только дочерний прцоесс)
 далее если програма unshare без ключа -f запущена то она замещает себя той програмооной
 которая у нее указана скажем 134.exe тоесть процесс unshare.exe преварщается в процесса
 134.exe значит у него будет новый маунт нейсмекйс но старый пид нейспейс. 
 и только у чайлда 134.exe будет новый маунт и новый пид нейспейс. поэтому елси 
 мы хотим ккую то программу запустить в новом пид нейсейсе то обязательоно адо 
 юзать unshare с ключом -f . чтобы unshare процесс остался в старом пид нейспйемпейсе
 а наша прогарма уже попада в новый нейсийпеййс. 

 еще раз как рабоатет /usr/bin/unshare без ключа -f
/usr/bin/unshare ... /bin/bash:
  12788 (номер процесса) /usr/bin/unshare ---> запускает сисколл unshare (CLONE_NEWPID) --
  --> execve (/bin/bash) ----> 12788 /bin/bash в старом пид нейспейсе 
  тоесть процесс 12788 в котормы был  бианарник /usr/bin/unshare
  превращается в процесс с бинаркником /bin/bash и причем в старом pid нейспейсе. 
  а вот уже его дети они будут запускать в новом пид нейспейсе. 
  это значит что родиетель их видит. можетт им сигналы посылать. а дети родиетеля
  уже не видят. баш имеет такую моду после старта еще создать кучу детей. дети 
  делают всякую вспомогатеьную шнягу а потом они подыхают. получается 
  очень нехорошая картина. 

  есть головной баш. он запускает дочку. он видит дочку а дочка его нет.
  дочка делает свои дела и подыхает. что интерсно SIGCHLD от дочки прилетает к родителю. 
  потому что для роиетьского прцоесса дочка все равно лежит в том же пид нейсейсе. 
  это для дочки не суествте родиетля. ха ха. это значит что роедиетьль может запустить
  хендлер SIGCHLD и выполнить wait(). и значит ядро может коректно завершить дочерний 
  процесс. тоесть дочка при номрально хендлере SIGCJLD родилетя не будет висеть в Z статусе.
  а вот если родеитлье бех хенжнрднлра то будет!(проверить) тесть чьоюы процсс в своем
  пид нейспейсе могут закить работу обязаельно нунжно чтобы ее рдиель из родиелсьнкоого
  нейспейса выполнил wait(). иначе дочка будет всиесть в своем нйеспсе в статусе Z !
  тоесть ядро просто так нахаляву не будет ее вычищать из Z состтояия. нихуя.
  пусть родель име хенле SIGCJLD. все дочка в итоге стерта из ядра
а    дочка в свом нейспейсе имела pid=1 , и получается что в соем пид нейспейсе
исчез процесс pid=1 это ядур совсем не нраится. и тоогда припоыатке создать новый 
проеас в этомновоновом нейспейсе ядро недаст! оно скажет нет памяти! хаха. так
просходит при запуске bash через unshare без ключа -f. !

~# unshare --pid  /bin/bash
bash: fork: Cannot allocate memory 

к проблема с пмтятью это не имеет нкиакго отноения! это просто ядро недает создать новый
прцоесс. еще как это получается. запускется процесс /usr/bin/unshare он делает сисколл unshare
с ключом CLONE_NEWPID. это дает то что ядро создает новый пид нейспейс но ядро не переводит
текущий процсс в этот пид нейспейс (такова архитекртура работы с пид нейспейс у ядра).
но если текущией процесс создаст дочерний процесс то его уже ядро поместит в новый пид нейспейс.

   unshare (12788 -номер процесс)  - старый пид нейспейс

далее 12788 делает execve(без форк!) и ядро заменяет /usr/bin/unshare на  /bin/bash
поэтому мы получаем 

   bash (12788 -номер процесс)  - старый пид нейспейс

теперь баш (он так устроен) пордждает свой дочерний проесс 12789 

и вот уже его(дочерний процесс) ядро сует в новый пид нейспейс. это значит кстати что 
этот новый процесс он как бы одновременно сидит в двух пид нейспейсах (ебануто придумали).
для парент процесса дочерний процесс сидит в старом нейспейсе. и парент процесс может 
слать сигналы к дочеренему. и ядро будет обратно слать автоматом SIGCHLD к паренту. 
одновременно с этим дочерний процесс уже никкого не видит. он видит только себя в новом
пид нейспейсе. о родителе он не догадываетя. родителем у него назначен pid=0 тоесть
никто. 

  bash (12789) - новый пид нейспейс.

 рисую цепочку

старый пид нейсмейс
 bash(12788) ---- bash (12789)

для парента 12788 для него дочка выгляит как 12789.
но для самой дочки она выглядит как pid=1 и родиетелей у нее нет

новый нейспейс
никого-----bash(1)


12789 и 1 это один и тотж же процесс в разных пид нейспейсах (ебануться)

так как 12789 это дочерний процесс баша то он делает некую мелокую работу и заканчивает 
свои действия и ызывает exit(0). тогда ядро его преврашает в Z . и послывает родиелю 
синал SIGCHLD. парент в своем старом пид нейсмейсе его получает и делает wait()
и ядро уже полностю вычищает 12789 он же 1 из памяти. тогда получается в новом пид
нейспейсе исчезает процсс pid=1 для ядра это ужасная ситуация. она ему ненравится. 
и это приводит к тому что ядро далее запрещает создавать новые процессы в новом пид
нейсейсе. навсегда. поэтому когда 12788 пытается соодать следующую дочку (ибо у баша при старте
возникает дхера дочек) то ядро шлет нахер этот fork запрос с ошибкой 
	fork: Cannot allocate memory
и на этмо старт баша заканывается. 

вопрос а если у нас pid-1 в новом нейсмейс висит в состоянии  Z и родитель в старом 
нейспейсе не запускает wait() то можно ли тода родителю запутить новвую дочку? даст 
ли ядро. хер знает. не проверял. 

я не понимаю вчем проблема почему при запуске ссиколаа unshare нельзя ткущий процесс 
поместить в новый пид нейспейс. ведь мы уже знаем что процесс будет однрврепменно 
сидеть и в своем старом пид енйспейсе и в в нвоом и ну и в чем пробелма? они пишут что 
якобы у нас у прцоесса поменяться пид. это хуйня полнейщая. у нас пид в текуще нейейсе
ниухя не поменятся. он просто приоебреет новый пид в ново м пид нейспейе ну и что? 
дочерний проеыесс имеет два пида ни нкиаких претенезий у дяра при этмо не возникает. 
так хуйле? непоянтно

а чем е разница запуска /usr/bin/unshar с ключаом -f ? а втом что когда стартунул 
процсс /usr/bin/unshare и он выполнил сисколл unshare то он недаелет execve(bash)
он делает fork +execve (bash) таким образом bash у нас стартует не в теуще роцессе
а в новом. и эт означит что bash сратуте в новом пи нейспейсе. сам он при этом получается
в новом пид нейспйсе pid=1 а его дочерний баш котоыйр старутет в новом нейспйсе
уже получается какйото pid<>1 и значит коода дочерний сделает exit() то в этом пид нейсйесе
головной то баш pid=1 как работал так и работает. то что подох дочерни  с pid<>1 так
и похеру. поэтмуо головной бащ может спопйно апускать следущрий дочерний процесс !

таким образрм я более рагбрался как рабраиетт pid naneosace, ка кработаеи unshare

итак если сисколл unshare неает теукущему процссу перелезть в пид нейспейсе
а толко его ребнку то сисколл clone(NEWNS) он создает дочерний уже в новом пид
нейспейсе ? (проверяю)

как посвтить gcc

# apt-get install build-essential

кстати /ust/bin/unshare это программа для создания новыех нейсейов! а не для 
подключения к уже усущестуюущими!!!!







 
баш - в итге какой его тред осаттс живым после заупска? знаит я проверил. 
когда стартует голвной бащ процесс. то он запускает кучу чайлдов. чась чайлдов
заупукскает своих чайлодв. в итоге они все выходят и осатеся только тот самый
изначальный головной прцоессб баща. 

вот у нас процесс сидит в пид неймсейсе. а как нам это проверить ?
как нам псмотрет список процессов ? обычно мы это делаем либо рукми через ls -1 /proc
либо чрез ps aux который за нас лезет в /proc   . значит я поискал как все пишут (спецааисты)
это то что нет никакого сисколла\функции наподобие getpid() чтобы получить список процессов
в текущем пид нейспейсе кроме как обратиться в /proc. хаха. пид нейспейс нам нужен 
чтобы наш процесс неимел досутпа как то полвиять на другие процессы. например не мог им
послать сигнал. но чтобы кому то послать сигнал нао для начала занть список номеров процссов
в моем пид нейспейсе. можно конечно посылаи и вслепую толко это нчео не даст. если мы 
послываем сигнал процсессу номера которого нет в тпкущем пид нейспейсе то это имеет нулеой
реуу=зульатат. так что в слепую ничего не полуится. список можно унать через /proc
но тут проблема. вот мы имеем процесс который сидит в новом пид нейспейсе. но этот 
процесс был получен путем клонирования из какогто другого процесса и нам достался маунт
нейспейс от какогото другого процесса. предполжим чтот тот процесс сидит в другом пид 
нейсмейсе. это згачит что при создании нащего процесса у нас будет наш маунт нейсммейс
от того процесса. и даже если у нас наш процесс создан с новым маунт нейсмейсом то 
все равно фактически псоел клониврания вид папок будет как у того процесса ! это знчит
что /proc будет покывзаь список прцоессов того процесса из того пид нейспейса!
неважно в нашем процессе новый маунт нйесмпейс или старный маунт нейспейс это никак 
не влияет на вид папок при клонировании в новй процесс. вид папок будет абсолютрно
такойже как у прошлого процесса! (это пиздец). а раз у того процесса был друой пид нейсмпйс
то его /proc/ и наш /proc будет одинаковый ! (это здец) это значит сидя в новом пид
нейсмейсе мы неможем получить список процессов которые сидя в наем пид нейспйсе.
типа ебнутый парадокс. это не значит что мы ищ нашего пид нейспейса может как то пволяиять 
на те прцоессы! нет! просто мы невидим список наших роцесов а видим список тех процессов!
нам нужно в новую папку заново смонтирвать proc тогда в этой папке будет  список пцроессов
которые сидят в том же пид нейспйесе что и процесс который монтировал proc!
значит мы можем либо монтирвать proc  в новую папку. и наконец увидить спсик процессов
нащего пид нейсмейса.  но это неклево. нам надо как то отмонтиовать шатануую папку /proc
и в нее примонтиовать новый /proc и вот тут у же на сцену вылезает какой у нашего прцоесса
маунт нейспйес. он старый или новый. если старый. то мы не сможем отмонтровать /proc
потому что он тогда отвалится и для тех процесов которы сидят в старом пид неспспейсе. 
нам просто напишут что ест открые файлв в /proc а вот ели у нас в нашем новом процессе 
новый маунт нейспейс. то тгда мы отмонтруется /proc никак не вляем на /proc в который
смотретя процессы из того пид неййспцса! и тгаа все окей!  поэтому я бы сказал что 
нет смысла созавать новый пид нейспейс и при этом не создаватвь новый маунт нейспейс 
для процсса или группы процессов! создание новоого пид нейспйса доожпо влечт за собой 
и создание новго маунт нейспесп! тогда мы без прбелм отмонтпуем старый /proc
и примонтуем нвой /proc

<===== закончил тут 
mount("none", "/", NULL, MS_REC|MS_PRIVATE, NULL) = 0
mount("none", "/proc", NULL, MS_REC|MS_PRIVATE, NULL) = 0
mount("proc", "/proc", "proc", MS_NOSUID|MS_NODEV|MS_NOEXEC, NULL) = 0



таким макамроя пходу разобратлся как докер грохает с помощть ядра все процессы
в контйенере


странно если выставить sigterm handler а потом делать clone то сказано что 
чайолд процесс по дейолту унасоедоует все хендлеры. однако по крайней
мере при клонировании в другой пид нейспейс и pid=1 ча1лд процесс нихрена не наследует
терм хендер. приходистя его грохать из род нейсмейса через sigkill <=====



докер как грохает все пцреоссы в контереер? если там sigterm нет  <====



если сигнлы это жлемент IPC то новый pid ns это уже новый ipc то нахуй нужен ipc 
namespace и флаг  CLONE_NEWIPC ?  <======



по моему груповое убивние процессов работает только при зарытии темринала
а болье никгада. тольк ирдиудаьано <=====



