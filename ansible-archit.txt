ansible-archit.txt

| ansible
| architecture


как устроен ебанйы ансибль под капотом.

ансибль написан на питоне.  для начала нужно ансбль на комп поставить.
для этого нужно прочитать ansible-setup.txt

итак мы поставили ансибль на комп.

запустим его из автоомного инстанса питона

	$ source ~/.venv/ansible2/bin/activate
    (ansible2) $ ansible --version


теперь будем говорить о том как он усттроен.

в ансибле есть 

	modules, 
	playbooks, 
	plugins, 
	roles, 
	collections

поовгорим об этом

мы щас будем уже говорить о стркутурных частях ансибля не питона. 

значит на самом верху у нас сидит "плейбук"
это та хрень которую мы скармиливает ансиблю чтобы он нам чтото сделал.

плейбук состоит из .... 
в частности из ролей.

а еще есть модули и плагины. щас поговорим чем они отличаются. 
и потом передейем к колекциям. 
и потом наконец прейдем к тому что храится на ансибль галакси. этот
тот вопрос который меня изначально интересует

итак начнем с плейбука.
что такое плейбук
	плейбук сосотоит из одного или нескольких play. потому и называется плейбук. книжка
	с плеями. 
	отдельный play содержит всебе такие главные элементы как name, hosts, roles, tasks.
    пример


    - name: playbook_name
	  hosts: ... 
	  roles: 
	      - role: role1
	        ...
	      - role: role2
	  tasks: 
	    - name: task1
	    ...
	    - name: task2


поле name это имя плейбука. чисто для нас для человека. это поле необязатеьное.
поле hosts укаывает на каких удаленных компах будет выполнен этот плейбук
поле tasks указыает какие задачи нужно выполнить на удаленных хостах
     задача это некое минимальное элементарное действие которое можно выполнить на 
     удаленном хосте. например поставить пакет.
     тоесть в tasks мы прописывем что конкнретно мы хотим делать на удаленных компах
     тоесть в hosts указано где делать а в tasks что делать
поле roles это интересная опция. роль эта такая хрень в которой расписано что надо делать.
     просто говоря в роли тоже находится список тасков. тоесть представть мы взяли все таски
     с нашего плейбука и засунули их в отдеьный файл. который и называется плейбук. тоесть
     упрошенно гооворя плейбук это набор тасков толкьо он хранится не в плейбук файле а в 
     отдельном файле. 


так как были придумана хрень роль. то файл плейбука может вобще не содрежать ни одного таска.
потому что все таски засунуты в роль или роли. потому что ролей может быть много. 
по болльшому счету роль это плейбук только без поля hosts. тоесть в роли прописано что делать
(список тасков) но не написано где делать. а в плебйуке а у нас указывается где делать
и что делать. что делать указывается либо через списоок tasks, либо через список roles,
также плей может содержать и список ролей и список таской.  плей исполняется сверху вниз.
при этом элемент tasks: и roles: находтся на одной линии иерархии. и то что попадется в файле
первее то и будет выполенено. обычно роли пихают сверху. а таски ниже. как  в примере выше
но ничто не мешает это сделть наобррот как в примере ниже


    - name: playbook_name
	  hosts: ... 
	  tasks: 
	    - name: task1
	    ...
	    - name: task2
	  roles: 
	      - role: role1
	        ...
	      - role: role2


удобно напихать в roles  порядок изготоллвения какйото большой задачи типовой. например 
развернуть mysql. тоесть в роли прописано как это сделать. но так как в роли нет поля hosts
то нет привязки на каком удаенном хосте это делать. а потом мы создаем play в который пропиывем
эту роль. и указываем в hosts где это делать. поэтому саму соль ансибля его кость составляют
именно роли. play по своей сути только описывает гдде мы будем чтото делать и список ролей
который уже содержит что мы будем делать. одна роль это поставть мускул на хосте, вторая 
роль устанвоить жинкс на хосте. 

итак что такое playbook, play , role - разобрались.

рассмаотрим как вылядит отдеьный таск неважно он в файле плейбука указан либо внутри роли


   tasks:
     - name: install mysql package
       apt:
         name: mysql-server
         state: present

 отдельны таск может содержть необязательное поле с навзанием. 
 потом идет название ансибль модуля в данном случае apt
 и потом идут параметры как это модуль вызывать.


 значит как работает ансибль. он работает квантовыми кусками. он работает отдельными тасками.
 он берет таск. на основе него готовит некий ПИТОН скрипт. далее он этот скрипт копирует
 на удаленный комп во временную папку. копирет через ssh. и потом на удаленном компе выполняет
 этот скрипт. и в реузльтатие этого скрипта на компе чтото меняется. 

 когда таск выполняется то пока он неыполнится на этом удаленном компе больше ничего
 не делает ансибль. он недвигается к следущему таску. когда таск выполен тогда ансибль
 передививагется к слдущему таску в теле роли или теле play.
 тоесть еще раз ансибль оперирует двигается на уровне минимаьльной единицы таск. 
 как уже сказал по капоом на основе таска изгттвалиывается питон скрипт. который через ссш 
 заслыается на удаленный комп. и там выполняется. 

 таск у нас включает название ансибль модуля. модуль это единица которая умеет чтото 
 кокнренртено делать. модуль apt умеет запускать apt на удаленном компе. соотвесвеннно
 с помощью этого модуля можно устанавливать удалять пакеты. я особоне копал но вроде как
 модули могут быть написаны на любом языке. главное чтобы они принимали и выдавали 
 все через json формат. но как я понимаю все же модули обычно написаны в ансибле
 тоже на питоне. модуль это хрень которая чтото позволяет сделать на УДАЛЕННОМ компе.

 а есть еще плугины ансибля. это нечто несколько другое. обычно они предназначены не для
 того чтобы чтото делать на удаленном компе. они в моем понмимании расширяют функционал 
 самого ансибль интерпретатора на нашем компе где мы запускаем плейбук. тоесть ансибль получается
 это эе интетпретатор. мы ему даем скрипт. он его интерпетирует. а потом уже чегто делает 
 на удаеленным компах. так вот плагин он недает то что мы наудаленном компе чтото можем поменять
 например пакет там поставить. плагин дает то что ансиль интператор становится умнее 
 на нашем компе. потому что схема такая . на нашем компе стоит ансибль интпертатор. мы ему
 даем скрипт. он его анализиурет. по шагам вырабатывает питон скрипты. копирует их на удаленную
 машину и там запускает питон скрипт на исполенение. удаленная машина ни о каком ансибле незнает.
 с точки зрения уденной машины там просто исполняется некий рандомный питон скрипт. там 
 ансиблем не пахнет. так вот о том что делают плуигнины. например плагин дает то что ансибль
 на нашем компе запускает какото процесс например ssh с правами рута. или мы на нашем
 компе подсовываем ансиблю некие данные в каком то формате. а плагин ансибля позволяет этот 
 дата формат обработать профильтровать запарсить. например  у ансибля есть такой элемент как
 инвентори. в нем просывается связь между буквенным названием хоста который мы указываем в
 плейбуке в hosts уже в ip адрес и порт по которым можно через ssh связаться с этим хостом.
 так вот один вариант мы составляем статический файл с инвентори. а второй вариант у нас
 есть плагин который позволяет ансиблю обратиться к внешнему процесссу с запросом. получит
 вответ json портянку. ее распарсить. и всосать из портянки этот список соотвесвтия
 буквенных хостов и IP:port 
 вот я постарался раписать в чем разница между назначением плагинов и модулей. как их отличать.
 насколько я понял плагины написаны только на питоне.

 и модули и плагины можно писать самому. добавлять.

значит в целом как работает запуск ансибль интрептатора. мы написали файл где плеи
лежат. далее мы запускаем ансибль интрпретатор. мы указываем в комндйно строке имя файла плейбука плюс где 
лежит инветори (который свяжет буквенные имена хостов указанные в hosts в теле плейбука 
с ssh ip:port )  либо это стат файл либо это внешний сервис который нам высрет в json этот
динамическтй инвентори  юзера под которым идти в ssh. и понеслось.
ансибль инрпетатор  составляет для себя список хостов в инвентори. далее берет плебук.
так или иначе доходит до первого таска. смотрит какой там модуль. на оснвое кода модуля
стслаяет питон скрипт. далее по ssh стчится на удалпнный хост. копирует туда этот питон скрипт.
там его выполянет. получает код возврата. и переходит к слдующему таску.
таикм оборазом что делать указанов плейбуке который содержит либо таски либо роли в которых
содежжсят таски которые содержат модули которые знаю уже как конкнтено надо сосавить питон 
код который умеет чтото делать. далее нам нужен хост удаленный и ssh конект с ним. это 
нам дает инвентори. плюс нужна ssh связь с удаленным хостом. плюс надо чтобы на удаленном
хосте стоял питон. тогда шарманка начинет работать. 
пример

	$ ansible-playbook -i inventory/mycluster/hosts.yml --become --become-user=root cluster.yml


где ansible-playbook это интепретатор  это тоже пиитон скрипт. фронтенд файл. 

(ansible2)  X ຅  $ which ansible-playbook 
	~/.venv/ansible2/bin/ansible-playbook

(ansible2)  D ⛊  $ file $( which  ansible-playbook )
	~/.venv/ansible2/bin/ansible-playbook: Python script, ASCII text executable


итак я указал интепретатор,   указал инвентори, указан плейбук cluster.yml
и указано что надо на удаленной машине выполнять питон скрипт под sudo командой,
и указано под каким конкрретно судо юзером это там надо делать (под рутом)


также ансиль позволяет нам чтото делать на удаленных хостах без файла с плбейуками.
а прям в командной строке указав название модуля и его параметры. это называется запустить
ансибль в режиме ad-hoc (дебил термин)


 	$ ansible localhost    -m shell -a "ls -1 /boot"
	[WARNING]: No inventory was parsed, only implicit localhost is available
	localhost | CHANGED | rc=0 >>
	amd-ucode.img
	efi
	grub


для адхок работы с ансиблем используем интерпетатор ansible. это питон скрипт тоже.
указываем хост или группы хостов с которым мы хотим рабоать в данном случае localhost
файл с интевнтори я не указал. в случае если мы обращемся к localhost то это допускатется
(остуствивие указанного файла с инвентори)  указываем модуль -m shell
и укаызваем параметры с оторым мы взываем этот модуль  -a ""
аналогия как с питоном. можно запускать питон скрипт. а можно указать python и далее
модуль который ему надо выполнить  например 

    $ python -m pip list

это тоже адхок режим работы тока уже питона. 
итак это была верхняя общая инфо о том как рабоатте ансиль.
однако
вернусь к модуля и плагинам

 значит я щас малек покажу на примерах где лежат модули и плагины. как они выглядят.
можно получить список модулей через код. я даже не хочу показыать как. 
а можно псмотреть его руками 
идем в наше автонмноый питон окружение где устанвоили ансибль в папку

	~/.venv/ansible2/lib/python3.12/site-packages/ansible/modules

	add_host.py
	apt_key.py
	apt.py
	apt_repository.py
	assemble.py
	assert.py
	async_status.py
	async_wrapper.py
	blockinfile.py
    ...
    ...


берем любой из этих модулей. и получаем об нем справку 

	$ ansible-doc add_host
> MODULE ansible.builtin.add_host (/home/noroot/.venv/ansible2/lib/python3.12/site-packages/ansible/modules/add_host.py)

  Use variables to create new hosts and groups in inventory for use in later plays of the same playbook.
  Takes variables so you can define the new hosts more fully.
  This module is also supported for Windows targets.


	$ ansible-doc assert
> MODULE ansible.builtin.assert (/home/noroot/.venv/ansible2/lib/python3.12/site-packages/ansible/modules/assert.py)

  This module asserts that given expressions are true with an optional custom message.
  This module is also supported for Windows targets.


а вот здсь лежат плагины
	/.venv/ansible2/lib/python3.12/site-packages/ansible/plugins

$ ls -1 | head
action
become
cache
callback
cliconf
connection
doc_fragments
filter
httpapi
__init__.py


причем это все папки.тоесть если модули свалены в одну кучу.
то плагины разделены по папкам тоеть по типам

посморрим на action плагины

༠  $ ls -1 | head
add_host.py
assemble.py
assert.py
async_status.py
command.py
copy.py
debug.py
dnf.py
fail.py
fetch.py

якоб вот это даст спсок плагинов

	 $ ansible-doc -t lookup -l 


а вот так можно посмотреть справку по плагину.


	 $ ansible-doc -t lookup -l  add_host

и он меня послал нахер. говорит нет такого плагина. 
может папка plugins она для чегото другого?

хорошо возьммем навание плагина из вывода команды   ansible-doc -t lookup -l 

	$ ansible-doc -t lookup -l  | head -n20
        ...
        ansible.builtin.dict                                 returns key/value pair...
        ansible.builtin.env                                  Read the value of envi...
        ansible.builtin.file                                 read file contents    
        ansible.builtin.fileglob                             list files matching a ...
        ansible.builtin.first_found                          return first file foun...
        ansible.builtin.indexed_items                        rewrites lists to retu...
        ansible.builtin.ini                                  read data from an ini ...
        ansible.builtin.inventory_hostnames                  list of inventory host...
        ansible.builtin.items                                list of items         

хочу посмотреть инфо по плагину items

	$ ansible-doc -t lookup ansible.builtin.items

		> LOOKUP ansible.builtin.items (/home/noroot/.venv/ansible2/lib/python3.12/site-packages/ansible/plugins/lookup/items.py)

	  this lookup returns a list of items given to it, if any of the top level items is also a list it will flatten it, but it
  	will not recurse
	...
	...

	EXAMPLES:
	- name: "loop through list"
  	ansible.builtin.debug:
    	msg: "An item: {{ item }}"
  	with_items:
    	- 1
    	- 2
    	- 3


как видно все таки папка plugins реаьльно содержит плагины. может прсто не все файлы
там являются плагинами. я проерил так и есть. 
если я загляну внутрь файла 

	/home/noroot/.venv/ansible2/lib/python3.12/site-packages/ansible/plugins/lookup/items.py

то там будет точно аткое же описание как указано выше. оно содержится в питон переенной DOCUMENTATION

из чего я делаю вывод что если файл плагин то у него будет эта перменная. а если этой перменной
нет то и перменной нет.

 в папке ../plugins/become там каджый файл это плагин

 	$ ls -1 | grep py
	runas.py
	sudo.py
	su.py

каджй из этих файлов это плугин ансибля
тока прикол в том что 


	$ ansible-doc -t lookup ansible.builtin.runas

говорит что такого плагина нет. 
хотя веб доки говорят что есть 
	https://docs.ansible.com/ansible/latest/collections/ansible/builtin/runas_become.html

так что также как в питоне все сделано хуй как так и в ансибле который рбенеок
питона тоже все сделано хуй как.

вот что я читаю из файла


DOCUMENTATION = """
    name: runas
    short_description: Run As user
    description:
        - This become plugin allows your remote/login user to execute commands as another user via the windows runas facility.
    author: ansible (@core)


возможно обьясненеи состоит в том что этт плагин для виднвс платформы. поэтому 
линукс комнда ansible-doc о нем нихуя и не показывает.

хотя плагин su тоже про него в ansible-doc нихрена нет. хотя плагин ест.
вот его описание из самого файла

DOCUMENTATION = """
    name: su
    short_description: Substitute User
    description:
        - This become plugin allows your remote/login user to execute commands as another user via the su utility.
    author: ansible (@core)
    version_added: "2.8"


а вот его писание из интенета
	https://docs.ansible.com/ansible/latest/collections/ansible/builtin/su_become.html


в общем про моули и плагины поговорили.
еще раз скажу про разницу. когда мы добавили в систему плагин. то это значит что мы теперь
на удаленной машине чтот можем сделать новенькое. чтото там имзенить. 
а когда мы обавили плагин это обычно значит что мы на локалной машине где ансибль интпретаттр
запускается сделали этот интпретатор чуть умнее. например он начал понимать новый формат 
входных данных. или условноговоря теперь наш  интерпреатор понимает что такое циклы.
опятьже повтрюсь я сам ни модули ни писал ни плагины. модули якоы можно написать на любом
языке они тока должны уметь понимаь входной поток на json и выходной давать на json. хотя
тем модули что явидел они все на питоне а плагины якобы можно только на питоне добавлятьь.
так написано.


осталось расмотреть только collections. что это за хрень.
читаю - Collections are a distribution format for Ansible content that can include playbooks, roles, modules, and plugins. 

колекции что это такое - пока что хуй знает. 
но они хранятся на сайте ансибль галакси. 
		https://galaxy.ansible.com

на него надо залогиниться. тыкаем там логин. и он звонит на гитхаб. и аутентифицирует тебя
на основе гитхаб акаунта. в итоге мы попадаем на этот сайт. так вот сайт присваивает логин 
и в терминах галакси(ебанутое навание) этот логин называется  namespace
и нам чтобы скачать коллекцию надо знать еще имя неймспейса , тоесть человек заходит 
на сайт под своим логином (неймсейсом) и там сохраняет свои коллекции. поэтому полное
имя для коллекции это  неймспейс.имя_коллекции
заходим на сайт ансибль гелекси. и там в веб морде ищем ту коллекцию которая нам нужна.
и тогда ставим ее вот так

		$ ansible-galaxy collection install ben_dataraven.zabbix

тогда на компе создаются папки  

$ pwd
   ~/.ansible/collections/ansible_collections
      ben_dataraven
      ben_dataraven.zabbix-0.0.1.info

что интересно. что в ходе установки питон модуля ansible коллеции в рамках этого модуля-папки
сохраняются в папку

  ~/.venv/ansible2/lib/python3.12/site-packages/ansible_collections


а получается если мы как уже кскаазал потом ставим какую то коллекцию через 
ansible-galaxy команду то эти коллекции уже падают в соверенно другую папку. 

	~/.ansible/collections/ansible_collections

как посмотреть список всех колллекций которые щас установлены на компе

	$ ansible-galaxy collection list | head -n 20

	# ~/.ansible/collections/ansible_collections
	Collection                               Version
	---------------------------------------- -------
	ben_dataraven.zabbix                     0.0.1  

	# ~/.venv/ansible2/lib/python3.12/site-packages/ansible_collections
	Collection                               Version
	---------------------------------------- -------
	amazon.aws                               8.2.1  
	ansible.netcommon                        6.1.3  
	ansible.posix                            1.5.4  
	ansible.utils                            4.1.0  
	ansible.windows                          2.5.0  

хотя бы удобно что он сам показывает  в каких папках лежат эти колекции

ну там плюс минус нетяжело я думаю и обраный процесс - записать свою колцию на галакси сайт.

теперь как пользоваться этой колекцией
вот пример пожоложим у нас есть вот такая колекция

	$ ansible-galaxy collection list | grep mysql
	community.mysql                          3.10.3 

вот как ей воспользоваться


 - name: task12
       community.mysql.mysql_query:
           login_db: testdb
           query: select * from test where message='Ansible is fun'
           login_unix_socket: /run/mysqld/mysqld.sock
       register: temp

так как в тасках у нас прописыется имя модуля то поэтому легко положить что 
колллекция имеет имя   community.mysql и внутри нее скрыт ансибль модуль с именем  mysql_query
щас проверим, иду в папку с этой коллекцией

		~/.venv/ansible2/lib/python3.12/site-packages/ansible_collections/community/mysql/

и там ищу модуль с именем mysql_query и такой файл там есть

~/.venv/ansible2/lib/python3.12/site-packages/ansible_collections/community/mysql/plugins/modules/mysql_query.py

тоесть это файл на питоне. тоесть получается в этой коллекции есть модуль ансибля написанный
на питоне который расширяет фнкционал ансибля добавляя новый модуль (такой же как модуль apt напрмиер) который можно смело использовать в тасках

итак получается коллекция это такая хрень что если мы ее загрузим то получим дополниельные МОДУЛИ.
(модули я писать не умею потому что например надо питон знать)

что дебильно сделано в этом галакси это то что как можно заметить вот что положим  у нас 
есть папка в которую записываются коллекции. напримре это папка 

	......./ansible_collections

значит если мы туда суем коллецию которая имеет имя community.mysql
то будем создана папка community 

	......./ansible_collections/community

и внутри нее папка mysql

	......./ansible_collections/community/mysql

пока все нормально
а вот дальше пиздец. можно заметить что модули ансибля хранятся в папке с именем 

	......./community/mysql/plugins/modules/

тоесть вопрос - нахуя хранить в папке с именем plugins ???? что за нахуй плагинс?
ведь в ансибле как мы знаем есть плагины а есть модули. так почему они модули плагинов ансибля
хранят в папке  с названием plugins !?!?!?!?!?!? что за долбоебы

и тут я напарываюсь на вот эту ссылку

	https://docs.ansible.com/ansible/latest/plugins/plugins.html

и узнаю что оказывается в ансибле МОДУЛЬ сука это просто одна из разновидностей
ансибль плагина. ЕБАНЫЙ ТЫ СМЕНШНОЙ СУКА! 	ну тогда это все обьясняет!!!
а вообще вот сколко типов плагинов 

└── plugins
    ├── action
    ├── become
    ├── cache
    ├── callback
    ├── cliconf
    ├── connection
    ├── filter
    ├── httpapi
    ├── inventory
    ├── lookup
    ├── module_utils
    ├── modules
    ├── netconf
    ├── shell
    ├── strategy
    ├── terminal
    ├── test
    └── vars


ну а так  точно известно что в этой папке хрантся именно модули(плагины с типом модуль). потому что например откываю файл

 $ cat mysql_query.py  | head -n 40
	#!/usr/bin/python
	...
	...

	DOCUMENTATION = r'''
	---
	module: mysql_query   <===== !!!!!
	short_description: Run MySQL or MariaDB queries
	description:


тоесть показан пример как пользовать и укаано что 

		module: mysql_query

как посмтреть доку по модулю из коллекции через командную уитилиту - хуй знает
проще в файл заглнуть напрямую

ксатти когда новую хрень придумывают - например ансибль колекции - то это шанс влезть 
в итсторию и прославится. потому что тот кто первый наченет закиывать колеции а в них модули
тот в истории и останется. а там в каждом файле написано что его автор вася пупкин. вот
пупкин и стал исторической личностью.

вопрос почему эти уебки из ансиль в основных местах пишут что есть модули а есть плагины.
и только в одном месте пишут что оказыается модули это частный случай плагина. суки


итак получается коллекция - ее можно загрузить с сайта галакси. и она дает то что внутри
нее есть новые модули ансибля. и таким маакром эти модули можно укзывать использовать в
своих тасках котоыре например в ролях. поэтому если мы загрузили роль то чтбы она работала
надо еще будет загрузить нужную колекцию с сайта галакси. модули обычно написаны на питоне.
и дают то что мы можем делаь новые фишки на удаленных компах. например модуль mysql_query
из коллкции community позволяет делать кьюри к мускулу. 

выше  я приводил такую фразу про колекции :  Collections are a distribution format for Ansible content that can include playbooks, roles, modules, and plugins. 

получается якобы что внутри колллекции можеть быть плейбуки, роли, модули, плагины.
значит коллекци где внутри модули я уже нашел. теперь хочу колекцию где внутри есть 
нетолько моддули (плагин типа модуль) а и плагины другого типа. 
например это колекция community.digitalocean
так вот внутри нее есть вот такие папки

	doc_fragments
	inventory
	modules
	module_utils

я ненашел чтобы бывали плагины ансибля с типом doc_fragments но точно есть плагины с
типом module_utils и с inventory

тоесть в папке modules у нас лежат разные модули для работы с дигитаоушн.
а в папке inventory лежит плагин который поззволяет вместо статического файл инвентори
работать с динамическим инвентори машин с дигиталоушн

далее я открыл ссскул где распиана сатруктура коллеккции

	https://docs.ansible.com/ansible/latest/dev_guide/developing_collections_structure.html

вот структура папок в колекции

collection/
├── docs/
├── galaxy.yml
├── meta/
│   └── runtime.yml
├── plugins/
│   ├── modules/
│   │   └── module1.py
│   ├── inventory/
│   └── .../
├── README.md
├── roles/
│   ├── role1/
│   ├── role2/
│   └── .../
├── playbooks/
│   ├── files/
│   ├── vars/
│   ├── templates/
│   └── tasks/
└── tests/


и тут я наконец узнал как через ansible-doc получить доки об том или ином плагине (в том числе модуль это тоже плагин ) который был устанолвен в любой установленной коллекции на этом компе.
я теперь понял почему у меня не вылезали плагины скажем типа action. потому что ключ -t
как раз задает тот тип плагина который мы ищем. 
щас покажу.  например mysql_query это плагин тиипа модуль. поэтому егонадо искать вот так

	$ ansible-doc -t module  -l | grep mysql_query
		community.mysql.mysql_query 

а если я хочу найти плагин add_host типа action то ... кхм.. 
почемуто ключ -t принимает не все типы плагинов

-t {become,cache,callback,cliconf,connection,httpapi,inventory,lookup,netconf,shell,vars,module,strategy,test,filter,role,keyword}

почемуто нет плагинов типа action!
зато хотя бы есть плагин типа become

	$ ansible-doc -t become -l 
	ansible.builtin.runas            Run As user         
	ansible.builtin.su               Substitute User     
	ansible.builtin.sudo             Substitute User DO     


и здесь я наконкц вижу плагины runas, su, sudo

так вот возращаюсь к ворому как прочитать доку от mysql_query из community.mysql
коллеции
а вот так

 $ ansible-doc -t module   mysql_query  | head -n 5
> MODULE community.mysql.mysql_query (/home/noroot/.venv/ansible2/lib/python3.12/site-packages/ansible_collections/community/mysql/plugins/modules/mysql_query.py)

  Runs arbitrary MySQL or MariaDB queries.
  Pay attention, the module does not support check mode! All queries
  will be executed in autocommit mode.


так вот я отвлелся вовзращаюсь к статье про коллеции

	https://docs.ansible.com/ansible/latest/dev_guide/developing_collections_structure.html


каждая коллкция имеет вот такую структуру папок

collection/
├── docs/
├── galaxy.yml
├── meta/
│   └── runtime.yml
├── plugins/
│   ├── modules/
│   │   └── module1.py
│   ├── inventory/
│   └── .../
├── README.md
├── roles/
│   ├── role1/
│   ├── role2/
│   └── .../
├── playbooks/
│   ├── files/
│   ├── vars/
│   ├── templates/
│   └── tasks/
└── tests/


многие папки необязатлеьные. а тока при необходимости.
и вот видно что внутри коолеции могут быть 
  docs - документация
  plugins - плагины это я уже неоднократно встретил
  roles - роли
  playbooks - плбейуки
  tests - тесты хрен знает как это работает


так вот я в коллекциях которые ставяться при установке ансибля нашел такую кооллекцию 
в котороу входят не только плагины (в том числе плаины модули) но и роли! потому что чаще всего
насколко я посморел в папку  с коллекциями
		
		~/.venv/ansible2/lib/python3.12/site-packages/ansible_collections

то в основновном в коллекциях обычно все таки поставляют новые плагины (в том числе плагины-модули)
и редко роли. но я такую колекцию нашел

это коллекция community.mongodb
у этой колеции вот ткая структура папок

	plugins
	roles

а папка ролей содржит вот такие файлы

	mongodb_auth
	mongodb_config
	mongodb_install
	mongodb_linux
	mongodb_mongod
	mongodb_mongos
	mongodb_repository
	mongodb_selinux

в каждой папке - роль.

получаетс стало понятно что в себе может содрежать коллакция. - плейбуки, роли, плагины(втом числе плгины с типом модуль), документацию, тесты

и эти колекции можно запиыать на сайт ансиьлб галаки. а можно оттуда закачивать. 
таким образом расширяя возможности ансибля на своем компе

закачака и скачка коллеекций идете через утилиту ansible-galaxy 
когда коллекия скачана то ее увидят ансибль фронтенд утилиты ansible и ansible-playbook
гавное что нужно использовать полное имя для все сущностей которые в коллекции тоесть 
для ролей и плагинов и модулей. в виде  имя_коллекции.имя_плагина
и они пишут оо том что надо сразу привыквать имяена модулей плагинов писать в полном виде
чтобы не было путаницы и былп подная ясность из какой коллекции мы хотим юзать сущность. 

также сайт ансибль галакси позволяет закачаивать и сохранять  только роли. 
то есть в итоге этот сайт является хранмитлелем либо колекций они видимо позже появилрст
либо ролей.
все это можно искать через веб морду на сайте галакси. 
хочу подчеркнуть что роли харнтся на сайте незвисимо от ролей которые явялтся частью 
коллекцйий. тость нельзя с сайта поставить выцырапать роли из колекции. ты либо ставишь
всю колекцию целиком. либо вобще не ставишь.
а роли это отдельные сущности. так вот роль ставится вот так

	$ ansible-galaxy role install ansibleguy.sw_zabbix_server

и тогда эта роль будет поставлена в папку

		$ ~/.ansible/roles/ansibleguy.sw_zabbix_server

тоесть колекции которые мы ставим чрез утилиту ansible-galaxy 
ставится в папку 

		~/.ansible/collections

а если мы ставим имеено роль то она еще раз скажу ставится в папку 

	    ~/.ansible/roles/


ну теперь наконец стало понятно что в себе хранит сайт ansble galaxy
что такое коллкция . из чего она состоит. как ее ставить. как узгать что в составе
колеции. как посмреть докуменатцию от внутренностей колции. в какие паки это ставится.
стало понятно чтотакже роли хрансятся на этом сайте. отделно от колеций.

