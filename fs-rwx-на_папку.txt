| linux
| permissions
| directory
| folder
| rwx

что значит если файл имеет права
  
  rwx


  r - процесс может читать тело файла
  w - процесс может писать в тело файла
  x - процесс может сделать execve() для этого файла


а вот с папкой все гораздо гораздо гораздо хуже.
полная ебала


во первых что такое папка. это такой же файл
толко у него в теле хранися нерандомный контент
а там хранится два столбца. первый столбец это
сиволнотное имя фйала. а второй столбец это его 
номер иноды. номер иноды нужен драрверу фс для
того чтобы уже реально найти этот файл на диске.

так вот R на файл дает то что процесс имеет право
из тела папки прочитать первый столббец- тоесть
список имен файлв в виде символов! но это недает
право процессу получить доступ к номерам инод
файлов! на практике это дает вот что. у нас
успешно отработает

  ls /folder

и  мы увидим имена файлов. но при попытке 
зная эти имена прочитать их контент мы увидим
пошел нахйц

  ls /folder/1.txt = пошел нахуй

спрашвается а нахуя нам имена файлов если мы их
все равно эти файлы проитаь нихуя не можем . ответа
нет. 



что дает X на папку. он дает процессу полуить допступ
к номерам инод в папке. при этом мы немиеем права
на доступ к символыьным именам в папке. это дает
то что ls /folder пошлет нас нахуй. но ! если мы
какимто макаром знаем имя файла. но мы можем 
прочтать его контент! 

  cat /folder/1.txt = успешно

правда не совсем так. если у нас есть X на папаку
то мы имеем право узнать номер ее иноды который
хранится в папке. но! на втором этапе драйвер фс
который находит эту иноду на диске он читает 
список пермишнсов для этого файла который хранится
внутри иноды. и если у процесса нет права читать файл
соглсно этому списку то нас ядро пошлет нахуй.

ксати пермишныс на файл никак не влияют на право
процесса узать все метаданные этого файла(размер
список пермишнсов итп). тоесть перминднсы на файл
влияю только на доступ к телу файла но никак не 
вляиют на досутп к его метаданным ктоые хрантся
в иоде. вот такой ебанизм. 


итак еще раз. если у анс есть R на папку. то 
ls отрабоает успешно. но прочитать тело файла 
мы не сможем. только узнаем их имена.


если есть X на файл. то ls пошлет нахуй. но если 
мы каким то макаом узнли имя файла в папке то 
можно успещно его прочитать через cat
также можно узгать все метаданные файла через stat


также X на папку влияет на то что успешно отрабывает
команда cd /folder котоаря под капотом дедает
chdir() вызов который меняет у процесса 
перменную CWD которая по факту хранит номер
иноды данной папки. так вот X дает право чтобы
процесс мог номер иноды записать в свой CWD 
(запиывает кончно не процесс а ядро).


кстати а нахуй нужен этот cwd. а он дает то что
мы для фунций раоты с ФС можем укзывать как поный
путь так и короткий. если короткий то это значит
что файл нужно искать внутри той папки номер
иноды которой лежит в CWD. а нахй это нужно? 
потому что искать номер иноды файла по его полному
пути это мегадолгий процесс. очень вермя заттаный.
поэтому если процесс работает с фалйами к оторые
лежат в ондной папке. то выгодднее пометить номер
иноды папки в CWD. и искать эти файлы уже именно
в этой иноде. это супер быстро. но это кончно
другая тема.


итак я детално обяснил на что влияет R X на папку.

причем W напапку дает то что процесс может
либо создвать новые файлы в ней либо удалять 
файлы из нее.

есть еще STICKY BIT на папку. он дает то что
файл созданный в такой папке смеожет удалить 
только владелец файла, либо root, либо владелец 
папки.


стики бит на файл нихуя не дает.

uid на файл дает то что при запуске бинарника
процесс будет создан от имени владеьца файла.

gid на файл аналогично.

что дает uid\gid на папку хуй знает


согласно ИИ UID на папку игнориртется. 
а GID на папку дает то что вновь созданный
файл будет иметь в свойствах владбельца  группу GID 


в целом ебнутая архитектура

