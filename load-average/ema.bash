#!/bin/bash

# первый набор начальных данных
#v=( 7 22 19 9 18 2 17 12 21 19 6 3 19 17 24 21 13 9 10 10 8 18 11 21 18 27 25 13 22 7 14 21 9 15 16 19 28 9 21 21 10 7 24 21 6 16 6 12 10 7 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 )
#la_p=( 0.62 2.26 3.52 3.88 4.93 4.69 5.60 6.03 7.15 8.02 7.86 7.39 8.48 9.08 10.52 11.52 11.63 11.58 11.54 11.49 11.29 11.91 11.92 12.57 13.24 14.42 15.51 15.23 15.77 15.07 14.98 15.39 15.03 15.35 15.40 15.85 16.91 16.75 15.49 15.61 15.80 15.26 14.20 14.66 15.01 14.21 14.11 13.22 13.04 12.72 12.18 11.20 10.31 9.48 8.72 8.02 7.38 6.79 6.25 5.75 5.28 4.86 4.47 4.11 3.78 )

# второй набор данных
# v=( 100 98  1  15 44  120 11  8 50 1 14 10   )  
v=( 10 9 1 0   0 0 0 0      0 0 0 0 0   )  


# третий набор данных 
#v=()
#a1=( "0"  )
#for i  in "${a1[@]}"; do
#    for j in $(seq 1 1 59); do
#	v+=( "$i" )
#    done
#done






la0=$( [[ -n "$la_p" ]] && echo "${la_p[0]}" || echo "0" )  # начальный la
r=()
p=$(bc -l <<< "e(-5/60)"); printf "\n\np=%.2f # коэфициент \n\n" ""$( tr "." "," <<< $p )""
ema="$la0"


for i in $(seq 60); do
    r+=( "$la0" )
done

#echo "${r[*]}"
#echo "${v[*]}"
#exit 1



printf "||============================================================||\n"
printf "||                                                            ||\n"
printf "||   t  >>  время                                             ||\n"
printf "||   r  >>  число процессов R|D                               ||\n"
printf "||   ema >> расчет на основе всех членов последовтельности    ||\n"
printf "||   ema_it >> расчет на основе итерационной формулы          ||\n"
printf "||   la_p >> load average из практики                         ||\n"
printf "||                                                            ||\n"
printf "||============================================================||\n"
printf "\n\n"



t="0" # время
[[ -f "./ema-data.log" ]] && true > "./ema-data.log"
for ((  k=-1; k<="$(( ${#v[*]}-1 ))"; k++ ));  do
    [[ "$k" -gt -1  ]] && r+=( "${v[k]}" )

    n="${#r[*]}"; # размер массива 
    sum=0

    for ((  j=0; j<="$(( n-1 ))"; j++ ));  do
	temp=$( bc <<< "scale=11;  ( $p^( $n-($j+1)) ) * ${r[j]}" )
        sum=$(  bc <<< "scale=11; $sum+$temp" )
    done

    d=$( bc <<< "scale=11; (1-$p^$n)/(1-$p)" )
    ema=$(  bc <<< "scale=11; $sum/$d" )
    [[ "$k" -eq -1  ]] && ema_it="$la0" || ema_it=$( bc <<< "$p*$ema_it+(1-$p)*${v[k]}" )


    printf "t=%-3s| r=%-3s | ema=%-5.2f | ema_it=%-5.2f | la_p=%-6s |\n"  "$t"      "${r[-1]}"   "$( tr "." "," <<< $ema )"  "$( tr "." "," <<< $ema_it )"  "$( [[ -n "$la_p"  && "$(( k+1 ))" -lt ${#la_p[*]}    ]] && echo ${la_p[$((k+1))]} || echo 'undef' )"
    printf "%-3s %-3s %-5.2f %-5.2f %-6s \n"           "$t"      "${r[-1]}"   "$( tr "." "," <<< $ema )"  "$( tr "." "," <<< $ema_it )"  "$( [[ -n "$la_p"  && "$(( k+1 ))" -lt ${#la_p[*]}    ]] && echo ${la_p[$((k+1))]} || echo 'undef' )"  | tr "," "."    >> ./ema-data.log


    let t+=5

done



