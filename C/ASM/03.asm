section .data
    msg db 'Value: ', 0      ; Сообщение для вывода (строка с нулевым символом в конце)

section .bss
    num resb 4               ; Резервируем 4 байта для числа (не инициализировано)

section .text
    global _start            ; Точка входа в программу

_start:
    ; Сохраняем текущие значения регистров и настраиваем стек
    push    ebp              ; Сохраняем указатель базы стека
    mov     ebp, esp         ; Настроим указатель стека на новый фрейм

    ; Выделяем память для локальной переменной (4 байта)
    sub     esp, 4           ; Выделяем 4 байта для локальной переменной

    ; Присваиваем значение локальной переменной
    mov     [ebp-4], 123     ; Присваиваем значение 123 локальной переменной

    ; Загружаем значение локальной переменной в eax для использования
    mov     eax, [ebp-4]     ; Загружаем значение локальной переменной в eax

    ; Печатаем сообщение "Value: "
    mov     eax, 4           ; Системный вызов sys_write (4)
    mov     ebx, 1           ; Дескриптор файла stdout (1)
    mov     ecx, msg         ; Адрес строки
    mov     edx, 7           ; Длина строки "Value: "
    int     0x80             ; Вызов системного вызова

    ; Печатаем число
    mov     eax, 4           ; Системный вызов sys_write (4)
    mov     ebx, 1           ; Дескриптор файла stdout (1)
    lea     ecx, [num]       ; Адрес памяти для вывода числа
    mov     [ecx], eax       ; Сохраняем число в памяти для вывода
    mov     edx, 4           ; Длина данных (4 байта)
    int     0x80             ; Вызов системного вызова

    ; Завершаем программу
    mov     eax, 1           ; Системный вызов sys_exit (1)
    xor     ebx, ebx         ; Код возврата 0
    int     0x80             ; Вызов системного вызова

