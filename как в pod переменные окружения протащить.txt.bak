как в pod переменные окружения протащить
внутрь имя физ сервера на котором он запущен и все такое

конкретный пример применения см. "elastic shard allocation awareness.txt" 

теория

	для контейнера который стартует в поде можно прописываеть переменные
	окружения в секции env:

	пример
	
	 env:
          - name: cluster.name
            value: es-cl-01
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: "discovery.seed_hosts"
            value: "masters-headless"
          - name: "node.master"
            value: "false"
          - name: "node.voting_only"
            value: "false"

значит прописан ряд простых переменных
и  часть похитрее

простые переменные задаются просто
	имя_переменной=константа

	cluster.name = es-cl-01
	iscovery.seed_hosts = masters-headless
	node.master = fasle
	node.voting_only = false


 более хитрые переменные 
 
зачастую хочется писать вместо значений неконстанты
а тоже переменные. тоесть например вместо false указать некоторую переменную а значение чтобы куб подставил сам на стадии запуска пода.
это очень актуально при написании шаблонов подов в стейтфуллсет.

	пример
	
	- name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          
они как раз описываюют что мы говорим

node.name = metadata.name

где metadata.name это другая переменная. переменная самого куба котрая относится к yaml портянке описывающей что мы деплоим.

таким образом внутрь пода будет проброшено значение переменной снаружи из енвиронмента куба

когда мы внутрь куба пробрасываем переменные куба называется downward api

есть определенные ограничение подстанрвки переменных
	а. подставлять мы их можем только в секции пода\контейнера в подразделе env
	б. если мы в качестве значения указываем неконстанту
		- name: cluster.name
            value: 3
	а хотим подставить системную переменную куба
		- name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
	
	то существует всего лишь определенное множество системных переменых куба которые мы можем поставить
	в. эти переменные куба они неотносятся к свойствам самой yaml портянки
	например мы пишем yaml для стейтфуллсет и мы используем переменную
	metadata.name
			- name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
	так вот эта metadata.name это не та metadata.name которая относится к стейтфуллсету. она имеет четкий смысл конкретна эта переменная metadata.name подставит вместо себя имя пода. но никак не имя стейтфуллсета. спмсок переменных куба которые можно подставлять вместо значений переменных см тут
		https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
	
	тамже указаны их смысловые значения.почти все относится к свойствам пода.


\\описать новую инфо по сертификатам
\\орисать инфо про empty file
\\ dependent variables синтаксис $() , $$()
\\ показать как выглядят эти переменные в pod describe как выглядят там и потом внутри пода	
\\толстые переменные vs тонкие переменные
одни видны другие невидны
\\порядок переменных
\\ связанные переменные
\\волшебство скобок в переменных в  bash ${vasya$$*:}
\\обнуление файла
\\читать книгу по архитектуре линукса



	
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: es-data
  namespace: es-cl-01
spec:
  serviceName: data-he
  
внутри которого есть шаблон пода. так вот пологике казалось бы что 
metadata.name это metadata.name самого стейтфулл сета. НО ЭТО НЕТАК!
вот эти разрешенные для подстановки в качестве значений переменные они неимеют отношение к портянке yaml которую мы пишем.
они имеют собственный смысл например 

metadata.name - the pod's name

тоесть это будет подставлено имя пода но никак не имя стейтфулл сета.

следующая разрешенная переменная

metadata.labels['<KEY>'] - the value of the pod's label 

полный список разрещенные для подстановки переменных указан тут
	https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/

ТАКЖЕ важно понять что подставлять мы их можем некуда хотим в yaml портянке а только в секцию контейнеров пода в раздел env . все!


если вернуться к нашему исходному примеру

- name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
				
то теперь его смысла таков

node.name=metadata.name 

где metadata.name = имя пода. 
переменной node.name будет присвоено значение этого пода.


вот еще пример подсовыавания внутрь контейнера спец переменных
	
- env:

    - name: APPD_NODE_NAME
       valueFrom: 
        fieldRef:
          fieldPath: spec.nodeName
    - name: APPD_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: APP_POD_NAME
      valueFrom: 
        fieldRef:
          fieldPath: metadata.name
    - name: JAVA_OPTS
      value: -Xmx712m -Xms556m -Dpdp.logging.level=WARN -Dappdynamics.agent.nodeName=$(APPD_NODE_NAME)-$(APPD_POD_NAMESPACE)-$(APP_POD_NAME)
	  
	
	(взял отсюда https://stackoverflow.com/questions/52680807/how-to-assign-cluster-namespace-and-pod-name-in-kubernetes-yaml-files-environm)
	 

вот этим перменным внутри контейнера
будет присвоен имя неймспейса пода
	APPD_NODE_NAME =  spec.nodeName  
будет присвоен имя хоста куба
	APPD_POD_NAMESPACE = metadata.namespace 
будет присовено имя пода
	APP_POD_NAME = metadata.name 


главнй минус этой технологии (downward api) то что она непозволяет 
подставлять все какеи хочешь элементы портянки yaml а только отдельные
систмные переменные и то что подставлять их можно только в одно место


чуть более мощным функционалом обладает ConfigMap 
	(см. configmap.txt)
==
далее.
 вот мы читали системне переменные куба мы их протаскивали из куба
 внуьрь контейнера. 
 а еще есть вариант записывать их на ФС внутри контейнера в файлы
 обэтом написано здесь 
	https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
	
==

 