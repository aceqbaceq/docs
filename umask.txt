umask 


как он работает
что дает.


сидим мы в баше в этом процессе. и создаем файл или папку.
возникает вопрос а какие пермишнс делать вновь создаваемым обьектам.

в линуксе упрощенно говоря решили так.

в системе есть дефолтовые пермишнсы на файлы и папки при создании.

для файлов в это 666 = rw-rw-rw
для папаок это 777 = rwx-rwx-rwx

в баше можно задать umask. как я понял ткже umask наследуется как свойство от родителя процесса к чайлду процессу.
так вот umask задает какие биты ГАСИТЬ в дефолтовых пермишнсах системы. и потом уже с оставшимися правами создавать файлы\папки.

тоесть как делает линукс. мы в баще говорим содать файл. линукс берем дефолтовый пермишнс на файлы 666 применяет к нему битовый AND  с umask или  попросту 
говоря гасит в дефолтовых пермишнах те биты которые выставлены в UMASK и уже с такими правами создает новый файл. 
это нас освобждает при создании файлов папок от указания точных пермишнов при создании. ( ведь реально когда мы созаем файл иили папку мы нуеуказываем какие у них будутт пермишны а ведь они у них хоть какието должны быть обязательно).

пример 

UMASK = 222 в битовом виде это 010 010 010

деолфтовый пермишна для файла это 666 = 110 110 110

накладывает одно на другое

010 010 010  UMASK
110 110 110  дефолтовый файл пермишн

гасим в файл пермишн те биты котоыре выставлены в UMASK

получаем 

100 100 100 или r-r-r


как посмотреть чемк равен umask щас 

$ umask
0002


можно в символольном виде

$ umask -S
u=rwx,g=rwx,o=rx

еще раз umask это те биты которы будут погашены.

так вот фишка втом что с помощью umask нельзя зажигать биты! можно только гасить.
также важно что umask накалдывается на дефолтовые системные пермишны. 
повтою для файла это 666 = rw-rw-rw 

сумммарно это значит что какой бы мы не выставили umask мы никогда не получим для создаваемого файла пермишнв котором выставлен бит x.  !!!!
это важно понять. таким образом какой бы ни был umask когда мы создаем файл на системе у него никггда он никгда не будет исполняемым у него никогда 
не будет выставлен бит +x на исполнение.   этот бит всегда надо выставлять руками уже после того как файл создан.!!! это важно.



как поменять ткущий umask для текущего процесса. 

$ umask 444

вот так просто.


для каталогов\папок дефолтовый пермишн = 777 = rwx-rwx-rwx 
это значит что для папок которые вновь создаваемые мы можем получать папки с пермишном +X выставленным.


теперь примеры.

$ umask 222

222 =  010 010 010 значит гасим второй бит.

666 = 110 110 110 , гасим у него второй бит получаем 100 100 100 = r-r-r
 проверяем.

$ touch 235.txt
$ stat 235.txt
 Access: (0444/-r--r--r--)  

 совпало.


 $ umask 333  = 011 011 011 значит гасим второй и первый бит

 для файла дефолт преимшн это 666 = 110 110 110 , применяем umask получаем 100 100  100 = r-r-r
  проверяем


$ umask 333
$ touch 567.txt
$ stat 567.txt
Access: (0444/-r--r--r--)  

полчается с точки зрения содания файлов UMASK 222 и UMASK 333 они абсолютно равнозначны.
разница это масов будет сказываться только при создании папок.

UMASK 222 = 010 010 010
для папки дефолт пермишнс это 777 = 111 111 111 , применяем umask получаем 100 100 100 = rx-rx-rx

проверяем
$ umask 222
$ mkdir 222.dir
$ stat 222.dir
Access: (0555/dr-xr-xr-x)  

совпало.

UMASK 333 = 011 011 011
для апапки дефот пермишн 777 = 111 111 111 , прминяем юмаск получеаем 100 100 100 = r-r-r

проверяем
$ umask 333
$ mkdir 333.dir
$ stat 333.dir
Access: (0444/dr--r--r--)

совпало.

таким образом umask позволяет порезать дефолтовые пермищнсы при соадании новых файлов и папок.
он задается для баша на уровне bashrc или типа того


в системе убунту деолвтовый umask = 0002 тоесть 000 000 010

для файлов дефолтовый 666 = 110 110 110 применяем маску будет 110 110 100 = rwx-rwx-r
для папок дефолотовый 777 = 111 111 111 примменяем маску это дает 111 111 101 = rwx-rwx-rx

проверяем:
$ stat 2.txt 
Access: (0664/-rw-rw-r--)  

$ stat 2.dir/
Access: (0775/d-rwxrwxr-x) 

совпало


-------------



