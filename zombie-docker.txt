вопрос зомби процессов в контйнере.
это досаттчно мутный вопрос.

перво что надо сказать - если у нас в конйетнер есть несколько прцоесссов.
и если голвной проецсс-А  pid=1 убит ядром или этот процесс сам вышел. то
возникает вопрос - а кто этому процессу-А делает wait() ? - ответ - это делает
его парент процесс-Б который являетяс праентом для процесса-А только он является
парентом не пид не1спейсе конейтера! а в пид неймсейсе хаоста! потму у процессаа-А
всегда есть парент! но конечно если парент-Б так написано что у него нет хендлера
для SIGCHLD сигнала то процесс-А будет висеть в системе как зомби!
и этот зомби умрет тоьк тогда кога умрет процесс-Б и тогда зомби процесс-А 
станет ребенокм у sysyemd процесса в пид неймсейса хоста. а уж systemd
имеет хендлер для SIGCHLD! как только процесс-А изменить родителя с процесс-Б 
неа systemd то ядро полет к systdm сигнал sugchld! так системд узнает о новой дочери
и сделает еу waity(),

но щас вопрос про другое. положим у нас pid=1 процесс-А в конейенер сдох. его нет.
что будет с остальные пцроссрами в конейтенере? их то кто будет убвивать? а будет вот
что ядру ненрроиавтся когда в пид неймпейсе конетренера исчезает процесс с pid=1
на это событие ядро автоматом убивает все прцоессы остальыне в конейтенер! тоесть
они становистя зомби! дале сотвтеенно им делает wait() либо процесс-Б. а если он 
не хочет это делать то это сделает systemd когда сдохнет процесс-Б!

конечно возгикает вопрос - когда ядро начинает убивать все процессы в конетйнере? - 
когда pid=1 уже зомби или только после тго как pid=1  уже полностью нет? 
я выснил!
вот программа
root@docker1:~/C# cat pid-ns2.c


/* pidns_init_sleep.c

   Copyright 2013, Michael Kerrisk
   Licensed under GNU General Public License v2 or later

   A simple demonstration of PID namespaces.
*/



#define _GNU_SOURCE
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <sys/mount.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <signal.h>
#include <stdio.h>

/* A simple error-handling function: print an error message based
   on the value in 'errno' and terminate the calling process 
*/






    pid_t child_pid;
    int finished = 0;




/*
void zombie_hunter(int sig)
    {
    int status;
    wait(&status);
    printf ("got  SIGCHLD \n");
    printf("parent: Got status %d from child\n",status);

    }
*/



void kill_child(int sig)
    {

     printf("parent: SIGINT is catched \n" );
      int sigk = 9;
      kill(child_pid, sigk);
     finished = 1;

    }


void sigt (int sig)
    {
    pid_t p2 = getpid();
    printf ("pid=l%d, got  SIGTERM ... shutdown\n", p2);
    exit(0);

    }




#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \
                        } while (0)


static int              /* Start function for cloned child */
childFunc(void *arg)
{


    printf("child  PID  = %ld\n", (long) getpid());
    printf("child PPID = %ld\n", (long) getppid());


    int mnt1;


    mnt1 = mount("none", "/", NULL, MS_REC|MS_PRIVATE, NULL);
    if (mnt1 == -1)
    errExit("mount");



    mnt1 = mount("none", "/proc", NULL, MS_REC|MS_PRIVATE, NULL);
    if (mnt1 == -1)
    errExit("mount");



    mnt1 = umount("/proc");
    if (mnt1 == -1)
    errExit("umount");


    mnt1 =  mount("proc", "/proc", "proc", MS_NOSUID|MS_NODEV|MS_NOEXEC, NULL);
    if (mnt1 == -1)
    errExit("mount");







    pid_t pid;
       pid = fork();

        if (pid == -1)
        {
           exit(1);
           } 

        else if (pid == 0)
        {
           printf("child of child pid = %d\n", getpid());
               
           //sleep(1200);
         char* argv[] = { "sleep", "1200", NULL };
         char* envp[] = { NULL };
         if (execve("/bin/sleep", argv, envp) == -1)
         perror("Could not execve");
         return 1;

              
           exit(0);
            }



        char* argv[] = { "sleep", "1100", NULL };
        char* envp[] = { NULL };
        if (execve("/bin/sleep", argv, envp) == -1)
        perror("Could not execve");
        return 1;

   //sleep(1200);

   exit(EXIT_SUCCESS);
}


#define STACK_SIZE (1024 * 1024)

static char child_stack[STACK_SIZE];    /* Space for child's stack */





int
main(int argc, char *argv[])
{

//    signal(SIGCHLD,zombie_hunter);
    signal(SIGINT, kill_child);
    signal(SIGTERM,sigt);

    printf("parent  PID  = %ld\n", (long) getpid());



    child_pid = clone(childFunc,
                    child_stack + STACK_SIZE,   /* Points to start of
                                                   downwardly growing stack */
                    CLONE_NEWPID|CLONE_NEWNS|SIGCHLD, argv[1]);

    if (child_pid == -1)
        errExit("clone");

    printf("PID returned by clone(): %ld\n", (long) child_pid);


  while(!finished)
        {
        //printf("parent:i am running...\n");
        //sleep(20);
        char* argv[] = { "sleep", "1000", NULL };
        char* envp[] = { NULL };
        if (execve("/bin/sleep", argv, envp) == -1)
        perror("Could not execve");
        return 1;

        }



    exit(EXIT_SUCCESS);
}



что она делает.
во первых эта прогамма не имеет обрабтки сигнала SIGCHLD. 
это важно. тоесть если в нее он приетает он нихрена неделает.
также мы помним что у ядра дефлотнвй обрабочик этого сигнала тоже
нихрена неделает. это важный момент

далее она создает три процесса 
sleep 1000 = процесс-А
sleep 1100 = процесс-Б
sleep 1200 = процесс-С

sleep 1000 = лежит в пид хоста.
sleep 1100 и sleep 1200 -лежат в новом пид неймспейсе. получается sleep 1100 имеет
в своим пид неймсейсе pid=1

значит зачем это? процесс-А представляет собой процесс который породил контейнер и лежит
в пид неймспейсе хоста.
процесс-Б это pid=1 внутри контейнера. процесс-Б это чайлд от процоесса-Б и он тоже 
лежит внутри контйенера. это еще можно вот таки представить
   процесс-А=shim процесс докера
     \
      \
       процесс-Б = nginx головной в контенере pid=1
         \
          \
           процесс-С = чайлд жинкса pid=2

зачем я налепил слипов? чтобы было четко понятно какой процесс есть какой.
так вот я запускаю эту прогамму
у нас появляется три процесса 
29983
29984
29985

# pstree -AspT 6225
---bash(6225)---sleep(29983)---sleep(29984)---sleep(29985)


29984 и 29985 лежат в одном новом pid неймспейсе. это контейнер
29983 лежит в другом пид неймсспейсе. пид неймспейсе хоста

# ps -o pid,stat,pidns,cmd  -p 29983,29984,29985
    PID STAT      PIDNS CMD
  29983 S+   4026531836 sleep 1000   <===== пид неймспейс хоста
  29984 S+   4026532459 sleep 1100   <==== пид неймспейс контейнера pid=1 (внутри пид контейнера)
  29985 S+   4026532459 sleep 1200   <==== пид нейсмпейс контейнера pid=2


далее я убивают pid=1 в контейнере
# kill -SIGKILL 29984
он превращается в зомби. так как его родительсаий процесс 29983 не обабатывает SIGCHLD
то этот процесс начинает висеть в системе в состоянии Z
и тут насутпает момент истины ради которой эта прорамма написана. - мы поулучаем ответ 
на вопрос- а что в этот момент будет с процессом 29985? потому что у нас щеколитивая
ситация. pid=1 превратился в зомби но все еще висит в системе. что при этом происходит
с процессом 20985?


и вот он ответ!
# pstree -AspT 6225
---bash(6225)---sleep(29983)---sleep(29984)

процесс 29985 полностью исчез!!!! ВАУ!! как такое может быть?!?!?!!?
ядро не просто автоматом процесс 29985 превращает в зомби, он его вообще полностью
вычищает!!!!!!!!!! хотя НИКТО для процесса 29985 не выполнял wait() сискол!!!!
охренеть!!!!

# ps -o pid,stat,pidns,cmd  -p 29983,29984,29985
    PID STAT      PIDNS CMD
  29983 S+   4026531836 sleep 1000
  29984 Z+   4026532459 [sleep] <defunct>

также видно что 29984 дейтсвительно превратился в Z и висит в ситеме ожидая чтобы
ктото сделал wait() запрос. чтобы его можно было вычистить полностью.
еще раз - почему 29984 висит как Z ? потому что его родитель 29983 неимеет обабортчика
для SIGCHLD! поэтому 29983 висит в Z состоянии и ждет чтобы хотя бы ктото выполнил wait()

теперь я увбиваю 29983
# kill -SIGKILL 29983

при этом 29984 процесс меняет своего родителя и им становистя systemd. плюс ядро шлет
к systemd сигнал sigchld. так как systemd имеет обоабочки sigchld то выполняется wait()
и наконец ядро может полностью вычистиь следы от 29983

# pstree -AspT 6225
---bash(6225)

что мы и видим. от всех этих процессов не осталось и следа!

ТАКИМ ОБРАЗОМ = я нашел ответ на вопрос - если у нас есть контейнер. и в нем есть 
куча процессов. и погибает или убивают или сам заканчивает работу процесс pid=1 внутри
контейнера то что будет дальше?  ОТВЕТ - как только pid-1 внутри контйенера превращается 
в Z то ядро мгновенно УБИВАЕТ все остальные процессы внутри контенера! и непросто убивает
прверащаея их в Z. а вычищает их ПОЛНОСТЬЮ! неожидая чтобы ктото там считывал wait() 
для этих процессов! вау! что касается pid=1 висящего в Z состоянии то если его родитель 
в пид неймспейсе хоста имеет SIGCHLD обрабочтки в котором есть wait() команда то 
и pid=1 Z тоже будет полностью вычишен из системы. если же такого обработчкика нет 
то ядро будет ждать когда исчезнет из системы родительский процесс. после этого pid=1 Z
заимеет нового родителья на хосте систмы в лице systemd. этот процесс уже имеет хаендлер
SIGCHLD. и ядро шлет систмд SIGCLD. sstusyemd счиытвает wat(). и ядро наконец вычищает
pid=1 Z полностью из системы! охуеть система ниепль! что не совсем понятно - почему 
как только pid-1 в контейнера получает статус Z ядро полнстью вычищает все процессы
остальные в контйенере? понятно что изначально в лиукнаесе не быол неймспейсов и поэтому
во всей системе был только один процсс с pid=1 и если он погибает значмт чтото в хосте
случилось совсем нето. и дальнейшая работа на хосте под вопросом. и вот торвальдсы 
рещили что в этой ситации надо срочно грохать все процесы в системе нахрен! даже не 
дождася всйких там wait(). логика недожидаться waut() вот видимо какая. если pid=1
сломался значит на хосте какаято катастрофа. и типа чтобы процессы не нетворли на 
коспе чего нибудт страшного. нужно все прцоесы срочно грохнут а то вдруг он иданные
поломают какие нибуь на фс. (правад иедя о том что срочно грхныте процессы все равно 
поломают данные это им в голову не пришло). поэтому они не ждут wait(). но тгда у меня 
вопрос а нахрен тодга ждать wait() для pid=1 ? его тогда тоже можно было грохать без 
ожидания всяких wait() !!!!! вот какая история! с этим разобраилрсь.


далее продолджаю разбирать статбю = https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/ пытаюсь понять о каких зомби внутри 
контейнера они хотели сказать. потому что на данный момент если у нас в контйенере
грохнулся pid=1 то никаких зомби в контенере не будет! кроме едиснвтенного зомби pid=1
и то он будет только при условии что его родитель на хосте не имеет обраочика сигнала 
SIGCHLD! поэому пока что никкимм зомби не пахнет!!! 
они приводят такой пример. пуст у нас на контейнере есть процесс веб сервер. 
и пусть этот процесс запустил новый процесс баш скрипт. 
и пусть этот баш скрипт процесс запустил  новый процесс греп. 

веб сервер(pid1) ---> баш(pid10) ---> grep(pid11) 

далее они пищут что греп у нас работает очень долго поэтому баш работает очень 
долго. веб сервер видит что баш работате очень долго и поэтому грохает баш процесс

у нас в системе остается два процесса
	веб север(1)
	греп(11)

далее они пишут что греп закончил свою работу и вышел. у него стал статус Z потому
что ранее у грепа был родилель баш но его уже нет. новый роитель у греп это веб 
сервер. но у веб сервера нет обрабочтика SIGCHLD сигнала. поэтому греп висит как 
зомби. да я ситацию понял. но! как они собираюся ее решатт то?!?!?!!?!?!?

они пишут а давайте мы контейнер будем по другому создавать. давайт добавим 
небольой процесс у которого будет обрабочик SIGCHLD сигнала. вот так дафате сделаеим

init(pid1)----веб сервер(pid5) ---> баш(pid10) ---> grep(pid11) 

ну и что я вас справшиваю это даст ?!?!?!!?!?
положим баш убили у нас тогда будет вот что

init(pid1)----веб сервер(pid5) --->---> grep(pid11) 

init(pid1)
веб сервер(pid5)
grep(pid11, Z)

ну и что нам этот инит дал!?!?!?!?
у нас греп как имел родителя веб сервер так и он остался. для того чтобы убить греп
нужно чтобы его родитель стал init. а для этого нужно убить процесс веб сервер. 
тогда ядро сделает для греп его новым родителе процесс init. и только тогда его хенлер
получит сигнал SIGCHLD и только тогда он сделате wait() и толко тда ядро наконец 
сотрет этот grep нахрен! но убиват веб сервер ради этого это полная хрень!

кстати сисколыы wait*() они возвращают код только от чайлдов процесса который запустил
этот сисколл! тоесть если есть процес-А у него есть чалйд-Б 
   процесс-А ===== процесс-Б

 и есть процесс-С котоыйр к ним неимеет никакого оотгшения. и если процесс-Б
 вышел ивисит как Z то запуск wait() на процессе-С то это несделает нихрена. этот 
 сисколл сразу вернется пустой. потому что раз у процеса-С нет чайдов то его вообще не
 должно ебать судьа чайдов других процессов! тоесть бедсполезно пробовать получать код возврата
 процессу у котртго нет детей от чужих детей!

тгад приходит другая  идея -а что если init будет монитроить процессы на налииче z
процессов и потом если находит то делает какйто сисколл чтобы поменять для этого убитого
чайлда его парента с веб сервера на себя самого?  но как я прочиатал вот тут
= https://stackoverflow.com/questions/3842235/changing-a-processs-parent
это нихрена нелтзя сделать! тоест едсивныный способ поменять у процесса рподителя 
это грохнуть родителя! а это невариант!
ПОЭТОМУ на данный момент я не вижу  как добавление init прцоесса поможет нам 
вычищать из системы Zombie греп процессы!!!!!!!!!!!!


итак чита. эту  стаью
https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/

там написано что действие когда парент запускает wait() чтобы считать код 
возврата своего чайлда называется специальным словом = reaping
также  там утрведжают что якобы создатели софта обычно не парятся на счет того чтобы
у своих программ создавать хедлер SIGCHLD. они якобы считаю что ничего страшного.
мол когда парент закочит работу то systemd станет парентом для этих чайлдов он то 
для них wait() и выполнит. я считаю что это хуйня. потому что может пройти дохуя
времени с момента когда чайлд процесс завершил свою работу и стал зомби. 
и моментом когда парент закончит свою жизнь. так что по мне они хуйню пишут. 
тоесть представь. мы запустили жинкс. у него парент процесс и чайлды. чайлд сдох.
и висит как Z. парент продолжает работатьь. может месяц пройти прежде чем мы перезапустим
парента. и что все это время чайлд будет висеть в состоянии Z? я думаю это хуйня.
я щас прям проверю. я проерил. конечно они хуюню написали. если убить у жинкса
его чайлда через SIGKILL то во первых никакого Z потом ненаблюдается. это значит
что парент жинкс принимает SIGCHLD сигнал от ядра, делает wait() и ядро полностю
вычищает чалйда и от него не остается следа. а во вторых парент тут же запускает
нового чайлда вместо умершего. поэтому чуваки пишут полную хуйню.

далее они расматрваиют пример. есть контейнер. запускается процесс-1 он же 
веб сервер. далее он запускает баш скрипт. а баш скрипт запускае греп процесс.
далее веб сервер убивает баш процесс. тогда греп лишаетс своего парента (баша)
и ядро переназначает парента для грепа и делает ему родичем pid=1 то есть 
веб сервер. далее греп заканчивает работу, выходит. и превращается в Z.
далее ядро  шлет SIGCHLD к веб серверу. а он якобы по их словам не иммет
обработчика этого сигнала - хотя как только что я проверил жинкс который веб 
сервер имеет такой обработчик - так что нет проблем. нихуя.
но поих теории греп прододжает висеть как зомби. 

и вот они пищут а вот если бы у вас был процесс который бы стартнуд первым
и он имел SIGCHLD обрабочик и он бы запустил веб серевер то было быщастье.
ДАСХУЯЛИ я спрашиваю.чтобы изменилось если бы над веб сервером процессом висел 
бы процес? нихуя бы это ничего недало!

далее они пишут если мы пошлем SIGTERM в баш то баш якобы нешлет SIGTERM своим чайлдам.
я щас проверю может и тут пиздят -==>  я проерил тут тоже пиздят! Баш он ввообще
на сигнал SIGTERM не реагирует! причем я вначале думал что он нереагирует если 
у него есть чайлды. а нет! он всегда на него не реагирует! так что и тут  они напиздецли!
но баш оттлично реагрует на SIGHUP. и он и себя закрывает и чайлдам он рассылает 
этот же сигнал я проверил!!!
вот программа

root@docker1:~/C# cat pipe.c


/* pidns_init_sleep.c

   Copyright 2013, Michael Kerrisk
   Licensed under GNU General Public License v2 or later

   A simple demonstration of PID namespaces.
*/
#define _GNU_SOURCE
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <sys/mount.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <signal.h>
#include <stdio.h>





/* A simple error-handling function: print an error message based
   on the value in 'errno' and terminate the calling process */



    pid_t child_pid;
    int finished = 0;

        int     fd[2], nbytes;
        char    string[] = "Hello, world!\n";
        char    readbuffer[80];





void zombie_hunter(int sig)
    {
    int status;
    wait(&status);
    printf ("got  SIGCHLD \n");
    printf("parent: Got status %d from child\n",status);

    }



void kill_child(int sig)
    {

     printf("parent: SIGINT is catched \n" );
      int sigk = 9;
      kill(child_pid, sigk);
     finished = 1;

    }


void sigt (int sig)
    {
    pid_t p2 = getpid();
    printf ("pid=l%d, got  SIGTERM ... shutdown\n", p2);
    exit(0);

    }


void sighup (int sig)
    {
    pid_t p2 = getpid();
    printf ("pid=%d, got  SIGHUP ... shutdown\n", p2);
    exit(0);

    }




#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \
                        } while (0)


static int              /* Start function for cloned child */
childFunc(void *arg)
{


    printf("child  PID  = %ld\n", (long) getpid());
    printf("child PPID = %ld\n", (long) getppid());




    int mnt1;


    mnt1 = mount("none", "/", NULL, MS_REC|MS_PRIVATE, NULL);
    if (mnt1 == -1)
    errExit("mount");



    mnt1 = mount("none", "/proc", NULL, MS_REC|MS_PRIVATE, NULL);
    if (mnt1 == -1)
    errExit("mount");



    mnt1 = umount("/proc");
    if (mnt1 == -1)
    errExit("umount");


    mnt1 =  mount("proc", "/proc", "proc", MS_NOSUID|MS_NODEV|MS_NOEXEC, NULL);
    if (mnt1 == -1)
    errExit("mount");





              char* argv[] = { "sleep", "2", NULL };
              char* envp[] = { NULL };


               /* Child process closes up input side of pipe */
                close(fd[0]);

                for(;;){
                /* Send "string" through the output side of pipe */
                write(fd[1], string, (strlen(string)+1));



             if (execve("/bin/sleep", argv, envp) == -1)
             perror("Could not execve");
             return 1;
           }





   exit(EXIT_SUCCESS);
}


#define STACK_SIZE (1024 * 1024)

static char child_stack[STACK_SIZE];    /* Space for child's stack */





int
main(int argc, char *argv[])
{

    signal(SIGCHLD,zombie_hunter);
    signal(SIGINT, kill_child);
    signal(SIGTERM,sigt);
    signal(SIGHUP,sighup);



        pipe(fd);




    printf("parent  PID  = %ld\n", (long) getpid());



    child_pid = clone(childFunc,
                    child_stack + STACK_SIZE,   /* Points to start of
                                                   downwardly growing stack */
                    CLONE_NEWPID|CLONE_NEWNS|SIGCHLD, argv[1]);

    if (child_pid == -1)
        errExit("clone");

    printf("PID returned by clone(): %ld\n", (long) child_pid);

//    if (waitpid(child_pid, NULL, 0) == -1)      /* Wait for child */
//        errExit("waitpid");


               /* Parent process closes up output side of pipe */
                close(fd[1]);





  while(!finished)
        {
        printf("parent:i am running...\n");
        sleep(2);

        /* Read in a string from the pipe */
        nbytes = read(fd[0], readbuffer, sizeof(readbuffer));
        printf("Received string: %s", readbuffer);

           }




    exit(EXIT_SUCCESS);
}


компилиурем 

$ gcc -o pipe.exe pipe.c

запускаем баш.

$ bash
и в нем pipe.exe
$./pipe.exe

# pstree -AspT 6225
---bash(6225)---bash(30476)---pipe.exe(30490)

посылаем SIGHUP бащу

# kill -SIGHUP  30476

и видим такое

pid=30490, got  SIGHUP ... shutdown   <=== вот это pipe.exe сообщил что  в него прилетел SIGHUP
Hangup  <==== вот это баш сообщил что он закрывается по SIGHUP


таким образом на SIGHUP непросто закрывается он посылает и своим чайлдам этот сигнал!
так что и тут в стаьттье напиздецли!!!

а если послать башу SIGKILL то он закрывается а чайлд при этом никакого 
сигнала не получает. и это логично. потому что SIGKILL он неловаится юзерскиими
программами. он сразу начинает обрабтываться ядром. поэтому из баша в чайлд
не может ничего полететь потому что ядро сразу начинает убивать баш. и это
верно не только если бащу послать этот сигнал а любому процессу. !!! если люому проессу
послать SIGKILL то все его чайлды нихрена не получат!


ксатти раз баш нереагирует на SIGTERM это значит что если запустить бащ
в контейнере то doocker stop будет останалвиать такой контйнер 10с ! тоесть 
долго то есть докер пошлет sigterm. выждет 10с таймаут и убьте его через SIGKILL
проверяю: так и есть! если стопить bash через docker stop это 10с
а если через SIGHUP то это мгновенно!

# docker create --rm --name bash1 -t ubuntu /bin/bash
# docker start  bash1
# docker stop bash1   <==== заняло 10 секунд!


# docker create --rm --name bash1 -t ubuntu /bin/bash
# docker start  bash1
# docker stop -s SIGHUP bash1   <=== заняло мгновенно!

корорче я не вижу как их программа может решать проблемы с зомби.
я имеено если у нас есть ихний init pid=1 и далее запущен процесс веб 
сервер. и этот процесс запустил процесс баш. а бащ запустил греп.
init (1)
веб сервер (10)
баш (11)
греп(12)
далее веб сервер грохнул баш. причем тут вопрос как он его грохнул  -
как я выяснил выше баш игнориует сигнал SIGTERM. зато баш отлично закрывается
при сигнале SIGHUP но при этом он посылает такойже сигнал все чайлдам. и также 
я не проверял но  у меня есть подозрение ( я щас проверю) что баш ждет пока все
его дети закроются а до этого момент баш не закроется .==> проверяю ==>
итак я проверил. когда баш получает SIGHUP он посылает чайлдам тоже SIGHUP 
но баш не ждет пока закончат работу чайлды. он просто посылает им сигнал и выходит.
а если у чайлда заблокирован SIGHUP то чайлд продолжит работу.
итак положим веб сервер послал SIGHUP грепу. а у того он заблокирован. в итоге
баш вышел а греп продолжает работать. у грепа парентом был баш. его не стало. далее
тонкий вопрос везде пишут что новым парентом для греп ядро сделает pid=1 это 
тоже вранье. я проверял. ближайшим парентом будет сделан некий ближайщий наверх процесс.
я проверл например у меня парентом в такой ситации назначаетя вот такой процесс

pid = 3311  /lib/systemd/systemd --user

а не pid=1 !

итак ядро назначит грепу нового родителя то ли это будет pid=1 то ли это будет веб сервер.
я не знаю. но я щас проверю! итак я проверил - да что касается контейнера - там все 
просто - если чайлд теряет родителя типа как греп то его новым родиетелем становится
не тот процесс который выше по дереву а процесс с pid=1 !!!!! тогда действительно 
заведение в контйенер init процесса решает все проблемы!!!! они были правы я не прав!
получается когда веб сервер грохает баш то греп теряет родителя и ядро назначит грепу
нового родителя не в форме веб сервера а в формме init pid=1 тогда да! это все 
решает! 


тогда init должен решать вот какие задачи:
  1) при поступлении к нему сигнала SIGCHLD он должен выполнять wait()
  2) если к нему снаружи прилетел сигнал SIGTERM он должет просканировать 
  все процессы в контенере и им всем послать сигнал SIGTERM
  3) после этого к нему полетят сигналы SIGCHLD и он должен навыполнять wait()
     и он долждет дождаться чтобы все процессы в контйенере полностью исчезли.
     и только потом он сам должен выйти не раньше! когда он всем пошлет SIGTERM
     то первым делом подохнут его чайлды. как только они подохнут то процессам
     которые были чайлдами от чайлдоп pid=1 переназначит нового родителя (те то сдохли)
     на нового парента pid=1 к pid=1 полетят новая пачка SIGCHLD сигалов. он 
     должен и на них выполнить wait(). и по идее это будет прододжаться пока
     все процессы в контенере не сдохнут или не будут иметь pid=1 новым родиелем.
     и они все в итоге должны сдохнуть целиком. и толко тогда pid=1 может 
     сам выходить.
  4) таким образом init должен грохать текущих зомби которые будут возникать 
      по мере работы контенейнера ( как случай с грепом) и второй случай это когда
      снаружи прилетит в pid-1 сигнал SIGTERM тоест когда снаружи пришлют сионал
      что мы хотим конетнейр погасить. и тут pid=1 должен смочь погасить все 
      процессы корректно. 
  5) еще перед тем как грохать самого себя pid-1 дложен еще раз просканровать 
     списрк процессов и убедиться что они все сисчезли и остался толко он. почему.
     потому что ряд процессов может иметь отсуствиуе реакции на SIGTERM тоест 
     толку им посылать этот сигнал нету. тут вопрос а что тогда делать?
     например тот же самый баш срал на SIGTERM

 да ! введение init должно решить все проблемы! единсвтенное что может так случиться
 что процесы в контенере будут межденно завершать работу а докер таймаут всего 10с.
 и тогда докер неджоадетсяь и грохнет pid-1 через SIGKILL а ядро тогда грохнет
 все оставиеся процессы тоже черех SIGKILL и тогда эта вся шарманка нераотает. 
 значит надо на докере уувелчитвать таймаут.


по всей видимости докеровская опция --init как раз делает тоже самое. запускает
в конетенере свой init pid=1
я попробвал эту фичу

$ docker create -it --init --name "bash-init" ubuntu /bin/bash
	если я гашу конернер через SIGTERM 
$ docker stop bash-init
	то толку нет. контейнер гасится 10с
	а если гашу черз SIGHUP
$ docker kill -s SIGHUP bash-init
	то контнейре гаисятся мгнвоенно. 
тоесть понятно как оно работает. я шлю к pid-1 сигнал такойто и этот init 
этот же сигнал рассылает всем вокруг. логично.

в стате напсано почему бащ скрипт с его TRAP функионалом не подходит для init 
потому что например хотя баш скрипт при получении сигнала снаружи может его 
разослать другим через trap функционал но типа баш скрипт не будет ждать пока 
завешатся чайлд процессы. наверное баш можно подкрутить ?... хер знает. думаю
есди на питое их init занял 350 строк то это неспроста и на баше такое 
не наворотить.

дальше я решил проверить эту штуку TRAP у баша

$ cat trap.bash 

#!/bin/bash


function  a () {
   echo "signal SIGINT is cauht! - do nothing!"
}



trap a SIGINT


echo "pid=$$"
while true ; do sleep 1; done


значит как это на практике работает. запускаем скрипт.
тыкаем Ctrl+c ,  экран пишет что сигнал получен и скрипт продождает дальше
работать. тоесть trap по сути это как раз кастомный хендлер сигналов позволяет
писать для процесса баша. отлично. ну значит по сути баш можно по мне использовать
для создания init. он ловить сигнал. потому он шлет его все процессам в системе. 
потом добалвяем ему trap для sigchld. он отрабывает все wait() потом проверяет
что в системе нет процессов. живых. если есть он опять им шлет сигнал. 
опять отрабывает SIGCHLD и wait(). по мне нормал. и баш можно заюзать для init.
в конец концеов когда проверка спска проыессов покажет что процессов нет
то баш может заканчивать свою детялеьно. по мне нормал.

далее я перешел к другому эксерминту.
я добавил хендлер SIGHUP
он ничего неделает при поступлпнии этого сигнала



$ cat trap.bash 


#!/bin/bash




function  a () {
   echo "signal SIGINT is cauht! - do nothing!"
}




function  b () {
   true
}






trap a SIGINT
trap b SIGHUP


echo "pid=$$"
while true ; do sleep 1; done


далее я запустил скрипт в окне терминала. далее я шелкаю на крестик. окно
закрыватся. я проверяю - процесс по прежнему жив здоров в списке процессов.
так просходит если  использовать gnome-terminal.
а если открыть xterm и там запустить и щелкать на крестик на окне то окно
нихрена незакрыывается! пишет на экране Hangup но окно не закрыватеся. 
и толоько если грохнуть процесс xterm через SIGKILL то окно исчезает. а процесс
спокойно продолжает жить и работать !
это очень интересно!
и что интетесно также это то что в свйоствах баш процесса его файл дескрпиторы
уже никуда не ведут. щас покажу

вот так выглядят fd процесса баша до того как я убиваю xterm

lrwx------ 1 vasya vasya 64 апр 29 14:55 0 -> /dev/pts/39
lrwx------ 1 vasya vasya 64 апр 29 14:55 1 -> /dev/pts/39
lrwx------ 1 vasya vasya 64 апр 29 14:55 2 -> /dev/pts/39

а вот так после того как xterm убит

lrwx------ 1 vasya vasya 64 апр 29 14:55 0 -> '/dev/pts/39 (deleted)'
lrwx------ 1 vasya vasya 64 апр 29 14:55 1 -> '/dev/pts/39 (deleted)'
lrwx------ 1 vasya vasya 64 апр 29 14:55 2 -> '/dev/pts/39 (deleted)'

удиветтельно!


я теперь все лучше начинаю понимать что такое "терминал" в линукск. в частнрсти
теперь стало понятно что елси у процесса есть TTY тоесть если у него есть отырйи
файл pts/X это соверенно не значит что где то на экране у нас есть окно через 
которое сэтим процессом можно взаимоедствтвтавь - чиать текст от него и посылат текст ему.
нет! нихуя! это всего нвсего значит что где в списке процессов у нас есть еще 
один процесс который разговривает с нашим исхоным процессом по протоколу "терминала" !
и происходит это так.
исхоный процесс-А имеет /proc/pid-a/fd/3 -> /dev/pts/17
другой неизвестный процесс процесс-Б имеет /prod/pid-b/fd/3 -> /dev/ptmx

так вот процесс-А посылат инфо в /proc/pid-a/fd/3 -> /dev/pts/17
потом она летит в ядро. а оно посылвает ее в /prod/pid-b/fd/3
и наоборот
процесс-Б посылет инфо в /prod/pid-b/fd/3 -> /dev/ptmx
она летит в ядро а ядро ее послыает в /proc/pid-a/fd/3

и вот эти два процесса через эти файлы разговаривают друг с другом по протоколу 
общения языка терминалов. это как IP сокет который открыт мжду двум процессами. 
и они по нему обмениваются данными !  ТАК ВОТ ЭТО СОВЕРШЕННО НЕ ЗНАЧИТ ЧТО 
У НАС НА ЭКРАНЕ ЕСТЬ ОКНО ЧЕРЕЗ КОТОРОЕ МЫ МОЖЕМ ДСТУЧАТЬСЯ ДО ЭТОГО ПРОЦЕССА! НИХУЯ!
обычно да процесс-Б который называется "владельцем терминаоа" создает окно в граф
системе и туда он транслиурет то что получил от процесса-А и то что мы в этом окне
вообьем с кнопок он ловит и пересылает в процесс-А. НО ЭТО НЕОБЯЗАТЕЛЬНО!
например процесс докера shim как раз таки обменивается с процессом в конетрере
через такую же систему(при условии что кодга мы создавали контейнер мы поставили
ключ -t) . но shim никаиких окон графических не создает! вместо 
этого он пеерсылывает инфо в докер клиент. докер клиент пересылает эту инфо процессу
gnome-terminal! процесс gnome-terminal имеет граф окно на экране которон он пордил
и контролирует. и gnome-termnal уже посылает эту инфо на окно!!!!! вот ккакая ужасная
цеопчка ! суки! они это нихуя не обьясняют!!!! вот что на самом деле физически значит
наличие у процесса открвтых файлов /dev/pts/X !!!
таким образом черное граф окно на экране это нихуя не терминал!!!!! терминалом в его
изначлаьном смысле является процесс держатель терминала !!! охх... это надо еще 
осознать. терминал может не имет ни окна ни кнопок. ! вот так прикол.
это можно на практике от как представит. предствавим стариный физ терминал железку.
только она хитрая.  у нее убрали экран  и клаву. а есть автоомный модуль. микросхема.
и он подключен к мейнфрейму чреез теже провода что и номральный терминал. 
ядро мейнфрейма и процесс на ейнфрейме ничего незаметит. потому что железка общается 
с ними ровн также как общался бы терминал! это и есть терминад без экрана и кнопок.
это и ест в нашем случае процесс. он может создавать экран для нас для человека. а может 
и нет. гавное что он может обащсять с тем проецссом на языке терминала.  
кода мы закрывам окно то  создатель окна - менеджер терминалов может  файлы отвечаю
зие за термина и закрыть. так обычно деражтель терминала делает. а может и не закрыть!
тоесть это разные вещи закрыть и окно изакрыть терминал! 
с тчок зрения ядра открыть или закрыть терминал это создать или убить пару спец файлов
/dev/pts/13 и fd/3 между процессами. если файлы созданы то терминал создан. 
если их убить то терминал убит. а графичекие окна это дело десятое!!! п...ц!
прцоесс держатель терминала это замена физ коробки котоаря конектилась к мейнфрейму
и могла с ним обмнивася инфорацией. на физ терминале клава и экран эт уже вторичная
хуйня через которую терминал позволял чеолвеку узнать что же узнал терминал. или донетси
до терминала что мы от рего хотим! вместо крана например мог быть примнтер! тоесть
терминалл необазан иметь ни кнпоока ни жкрана. !!!


мейнфрйм <=========> терминал <======> экран, клава, принтер, луч света 

                                       |---------------------------------|

                                                   ||
                                                   ||
                                                   ||
                                                   ||
                                                   \/
                                       это все хрени в целом мало имеющие отношение
                                       к терминалу. это вторичная хуйня которая позволяет
                                       терминалу общаться с человеком. но терминал вообще
                                       может  с человком и необщаться. от этого он не перестанет
                                       быть терминалом. 

терминал это железка кторая может подключиься по првооводам покдлючиься к мйенфрейму
и обмениваться инфораыией с процессом! вот что такое терминал. он умеет подключаться к
мейнрфейму и разговаритть с процессами! это и есть терминал.
а происхдоит ли при этом общение с члоевеоком и посреством каких прибуд эт уже 
дело десятое! есть ли у терминала экан или нет это неважно от этого он терминалом
не пркрашает быть. этот как ноутбук без экрана. он от этго ноутбуком не перстает быть.
у терминала могут тбыть порт для подкючения экрана. примнтера модема и хрен знает
чего. оот тог что это подключено к терминау или нет влияет на то явлется ли он 
терминалом или нет. это его вторичная хрен для общение с человеком. 
а первичная задача термиала это уметь говорить с процессом на мйенфрейме. 
еси он это деает он термина.а елси нет то он либо сломался либ л он не терминал!
так вот граф окно на экране это такой же внешиний экран у терминала (процесса)
есть ли оно или нет гичего неменяет. и когда мы акрывам окно мы прото напросто 
откодчаем внений экран или разбиаем его молтком. от этго  с темрирао мнизерна не
просиходит! самое главное это есть ли папа спец файлов между процессами! и умеют
ли они горит друг с другом на протоколу терминала

тепрь ставноися поняно что за сигнал такой SIGHUP!!!!!!
по идее когда железный терминал (или процесс который ялвяется деражтелем терминала)
заканчивал свою работу с мейнфереймом. то этот жел терминал посылал сигнал (электричексий)
в мейнфрем. ядро это видело и ядро посылало процессам на менфрейме сигнал SIGHUP.
котоырй собщал процессу что терминал физически выклился и нам об этом сообщил!
тоест это не то что на физ терминале экран выключли. не это хуйня. эт о именно сам
физ теримнал выключили из розтеикки. в нашем случае кода темнало являетя 
процесс (деражтель термиаоа)то  по идее SIGHUP это сигна который это держатель 
шлет всем процессам сообщая что он заканчивает с ними работу. что он щас будет убрать
с ними физ связь (делать запрос к ядру чтобы оно убило спец фалы темриана) и чтобы процессы
об этом знали. и либо закчнвали свою рабоу либо прододжаии! после этого валедец 
термианал доожен по хорошму делать сисколвв ядро на убивениие спц фалоы /dev/pts/10
и ядро это все убивает убиарет! вот ккако смысла SIGHUP и что его шлет!
также я дуаю если я пошдю SIGKILL к проессу деражтелю термиалов. (потому что держаетт 
теримналов может понаоткрывать кучу термиальных файлоы) то я так думаю ядро тогда
должно уже само автоматом всем процессам ск которыми этот терминал бы свяазан само
послать сигнал SIGHUP.  SIGHP это сигнал от терминала к прцоессам с которыми он
был связан что он сенас связи с ними прекращает. мол имейте ввиду!
я это к чму оворю - кода мы жмем на крестик окна на экране то это лишь знак от 
человека к процесу владелцу этого окна что человек желает завершить свою работу 
с процессом владельцем теримнала! тогда проецесс это понимая уже может решать а он 
то  в свою чрередь будет завершать терминалру связь с процесами или нет. !!! он может 
завершить а может и нет!!! крууутоо!! потом зккрвыя черное окно это мы  не термианал
закрываем! это мы всего навего окно закрываем которым владеет процесс создатье
термиалов. а чтобы реально  убаить термиал выклчить его это надо сделать SIGKILL 
процессу владельцу темианало!!! вот как!!! итак закрытие онка на крестик это 
совршенно не "закрыть терминал  " нихуя.
а SIGHUP это сигнял от процесса воаледльца терминалов всем процессам с которым он 
был связан что он (процесс терминал) собирается закочить св ними сенас связи. чтобы 
они имеиливвиду. также этот сигнал может послат ядро если оно ядро убило этот процесс
владделец терминалов.

ксаттиа init процесс вот какую проблемы все таки не решает. положим была запущена
тупая прога. она делает чайлда. чайлд заканчивает работу. превращается в зомби.
парент не обрабатыавет SIGCHLD. и чайлд так и висит как зомби. инит тут никак не
поможет так как парент по прежнему жив. 

далее на счет терминала


<=========== закончил тут !!







<=========== преыддудщщий вопро скоторая я изучал это как с поомщьь ю докера рукми создат
под то есть гурппу котнтейнеров в одном неймспейсе






===
pipe

мы привыкли что 

cat 1.txt | grep "12"

это "интуиивно " воспримимется как два процесса как бутто они связаны. 
как бубто цепью.

однако на смом деле это незавиимые процесссы ничем не связанные.
знак "|" это просто значок в баше. по факту он означает что у нас ест два
независимых процесса. просто кажый из них имеет открытый файл тип "пайп файл".
